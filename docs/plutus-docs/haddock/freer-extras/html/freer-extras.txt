-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Useful extensions to simple-freer
--   
--   freer-extras provides logging and monitoring functions extending
--   simple-freer
@package freer-extras
@version 1.1.0.0

module Control.Monad.Freer.Extras.Beam.Postgres
data DbConfig
DbConfig :: Text -> Text -> Text -> Word16 -> Text -> Int -> Text -> DbConfig
[dbConfigUser] :: DbConfig -> Text
[dbConfigPass] :: DbConfig -> Text
[dbConfigHost] :: DbConfig -> Text
[dbConfigPort] :: DbConfig -> Word16
[dbConfigDatabase] :: DbConfig -> Text
[dbConfigPoolSize] :: DbConfig -> Int
[dbConfigMarconiFile] :: DbConfig -> Text
runBeam :: forall effs. (LastMember IO effs, Member (Reader (Pool Connection)) effs) => Trace IO BeamLog -> Pg ~> Eff effs
instance Data.Aeson.Types.FromJSON.FromJSON Control.Monad.Freer.Extras.Beam.Postgres.DbConfig
instance Data.Aeson.Types.ToJSON.ToJSON Control.Monad.Freer.Extras.Beam.Postgres.DbConfig
instance GHC.Generics.Generic Control.Monad.Freer.Extras.Beam.Postgres.DbConfig
instance GHC.Classes.Eq Control.Monad.Freer.Extras.Beam.Postgres.DbConfig
instance GHC.Show.Show Control.Monad.Freer.Extras.Beam.Postgres.DbConfig
instance Data.Default.Class.Default Control.Monad.Freer.Extras.Beam.Postgres.DbConfig

module Control.Monad.Freer.Extras.Beam.Sqlite
data DbConfig
DbConfig :: Text -> Int -> DbConfig

-- | The path to the sqlite database file. May be absolute or relative.
[dbConfigFile] :: DbConfig -> Text

-- | Max number of concurrent sqlite database connections.
[dbConfigPoolSize] :: DbConfig -> Int

-- | Default database config uses an in-memory sqlite database that is
--   shared between all threads in the process.
defaultDbConfig :: DbConfig
runBeam :: forall effs. (LastMember IO effs, Member (Reader (Pool Connection)) effs) => Trace IO BeamLog -> SqliteM ~> Eff effs
instance Data.Aeson.Types.FromJSON.FromJSON Control.Monad.Freer.Extras.Beam.Sqlite.DbConfig
instance Data.Aeson.Types.ToJSON.ToJSON Control.Monad.Freer.Extras.Beam.Sqlite.DbConfig
instance GHC.Generics.Generic Control.Monad.Freer.Extras.Beam.Sqlite.DbConfig
instance GHC.Classes.Eq Control.Monad.Freer.Extras.Beam.Sqlite.DbConfig
instance GHC.Show.Show Control.Monad.Freer.Extras.Beam.Sqlite.DbConfig
instance Data.Default.Class.Default Control.Monad.Freer.Extras.Beam.Sqlite.DbConfig

module Control.Monad.Freer.Extras.Modify
mapEffs :: (Union effs ~> Union effs') -> Eff effs ~> Eff effs'
class UnderN as
underN :: UnderN as => (Union effs ~> Union effs') -> Union (as :++: effs) ~> Union (as :++: effs')
under :: (Union effs ~> Union effs') -> Union (a : effs) ~> Union (a : effs')
class CanWeakenEnd as effs
weakenEnd :: CanWeakenEnd as effs => Union as ~> Union effs
weakenUnder :: forall effs a b. Union (a : effs) ~> Union (a : (b : effs))
weakenNUnder :: forall effs' effs a. Weakens effs' => Union (a : effs) ~> Union (a : (effs' :++: effs))
weakenMUnderN :: forall effs' as effs. (UnderN as, Weakens effs') => Union (as :++: effs) ~> Union (as :++: (effs' :++: effs))
raiseEnd :: forall effs as. CanWeakenEnd as effs => Eff as ~> Eff effs
raiseUnder :: forall effs a b. Eff (a : effs) ~> Eff (a : (b : effs))
raiseUnder2 :: forall effs a b c. Eff (a : (b : effs)) ~> Eff (a : (b : (c : effs)))
raise2Under :: forall effs a b c. Eff (a : effs) ~> Eff (a : (b : (c : effs)))
raiseNUnder :: forall effs' effs a. Weakens effs' => Eff (a : effs) ~> Eff (a : (effs' :++: effs))

-- | Raise m effects under the top n effects
raiseMUnderN :: forall effs' as effs. (UnderN as, Weakens effs') => Eff (as :++: effs) ~> Eff (as :++: (effs' :++: effs))

-- | Handle a <a>State</a> effect in terms of a "larger" <a>State</a>
--   effect from which we have a lens.
handleZoomedState :: Member (State s2) effs => Lens' s2 s1 -> State s1 ~> Eff effs

-- | Handle an <a>Error</a> effect in terms of a "larger" <a>Error</a>
--   effect from which we have a review.
handleZoomedError :: Member (Error s2) effs => AReview s2 s1 -> Error s1 ~> Eff effs

-- | Handle a <a>Writer</a> effect in terms of a "larger" <a>Writer</a>
--   effect from which we have a review.
handleZoomedWriter :: Member (Writer s2) effs => AReview s2 s1 -> Writer s1 ~> Eff effs

-- | Handle a <a>Reader</a> effect in terms of a "larger" <a>Reader</a>
--   effect from which we have a getter.
handleZoomedReader :: Member (Reader s2) effs => Getter s2 s1 -> Reader s1 ~> Eff effs

-- | Handle a <a>Writer</a> effect in terms of a "larger" <a>State</a>
--   effect from which we have a setter.
writeIntoState :: (Monoid s1, Member (State s2) effs) => Setter' s2 s1 -> Writer s1 ~> Eff effs

-- | Handle a <a>State</a> effect in terms of a monadic effect which has a
--   <a>MonadState</a> instance.
stateToMonadState :: MonadState s m => State s ~> m
monadStateToState :: Member (State s) effs => State s a -> Eff effs a

-- | Handle an <a>Error</a> effect in terms of a monadic effect which has a
--   <a>MonadError</a> instance.
errorToMonadError :: MonadError e m => Error e ~> m

-- | Transform an error type
wrapError :: forall e f effs. Member (Error f) effs => (e -> f) -> Eff (Error e : effs) ~> Eff effs
instance (effs GHC.Types.~ (a : effs')) => Control.Monad.Freer.Extras.Modify.CanWeakenEnd '[a] effs
instance (effs GHC.Types.~ (a : effs'), Control.Monad.Freer.Extras.Modify.CanWeakenEnd (b : as) effs') => Control.Monad.Freer.Extras.Modify.CanWeakenEnd (a : b : as) effs
instance Control.Monad.Freer.Extras.Modify.UnderN '[]
instance Control.Monad.Freer.Extras.Modify.UnderN as => Control.Monad.Freer.Extras.Modify.UnderN (a : as)

module Control.Monad.Freer.Extras.Log
data LogMsg a r
[LMessage] :: LogMessage a -> LogMsg a ()

-- | The severity level of a log message See
--   <a>https://en.wikipedia.org/wiki/Syslog#Severity_level</a>
data LogLevel
Debug :: LogLevel
Info :: LogLevel
Notice :: LogLevel
Warning :: LogLevel
Error :: LogLevel
Critical :: LogLevel
Alert :: LogLevel
Emergency :: LogLevel
data LogMessage a
LogMessage :: LogLevel -> a -> LogMessage a
[_logLevel] :: LogMessage a -> LogLevel
[_logMessageContent] :: LogMessage a -> a
logLevel :: forall a_axt8. Lens' (LogMessage a_axt8) LogLevel
logMessageContent :: forall a_axt8 a_azLn. Lens (LogMessage a_axt8) (LogMessage a_azLn) a_axt8 a_azLn
logMessage :: LogLevel -> Prism' (LogMessage a) a
logDebug :: forall a effs. Member (LogMsg a) effs => a -> Eff effs ()
logInfo :: forall a effs. Member (LogMsg a) effs => a -> Eff effs ()
logWarn :: forall a effs. Member (LogMsg a) effs => a -> Eff effs ()
logError :: forall a effs. Member (LogMsg a) effs => a -> Eff effs ()

-- | Re-interpret a logging effect by mapping the log messages. (Does the
--   same thing as <a>contramap</a> for <a>Trace</a>)
mapLog :: forall a b effs. Member (LogMsg b) effs => (a -> b) -> LogMsg a ~> Eff effs

-- | Re-interpret a logging effect by mapping the log messages. Can use
--   other effects.
mapMLog :: forall a b effs. Member (LogMsg b) effs => (a -> Eff effs b) -> LogMsg a ~> Eff effs

-- | Re-interpret a <a>Writer</a> effect by writing the events to the log
handleWriterLog :: forall a f effs. (Member (LogMsg a) effs, Traversable f) => (a -> LogLevel) -> Eff (Writer (f a) : effs) ~> Eff effs

-- | Ignore all log messages.
handleLogIgnore :: Eff (LogMsg a : effs) ~> Eff effs

-- | Write the log to stdout using <a>trace</a>
handleLogTrace :: Pretty a => Eff (LogMsg a : effs) ~> Eff effs

-- | Re-interpret a <tt>Log</tt> effect with a <a>Writer</a>
handleLogWriter :: forall a w effs. Member (Writer w) effs => AReview w (LogMessage a) -> LogMsg a ~> Eff effs

-- | Pretty-print the log messages
renderLogMessages :: forall a effs. (Member (LogMsg Text) effs, Pretty a) => LogMsg a ~> Eff effs
data LogObserve a r
[ObserveBefore] :: a -> LogObserve a ObservationHandle
[ObserveAfter] :: Maybe a -> ObservationHandle -> LogObserve a ()

-- | An abstract type used to tie the beginning and end of observations
--   together.
data ObservationHandle

-- | An observation with measurements before and after running an action.
data Observation v s
Observation :: v -> s -> Maybe v -> ExitMode -> Observation v s

-- | Call-site information about the start of the observation
[obsLabelStart] :: Observation v s -> v

-- | Measurement taken before running the action
[obsStart] :: Observation v s -> s

-- | Call-site information about the end of the observation
[obsLabelEnd] :: Observation v s -> Maybe v

-- | <a>ExitMode</a> of the action.
[obsExit] :: Observation v s -> ExitMode
observeBefore :: forall a_axtb. forall effs_aAnj. Member (LogObserve a_axtb) effs_aAnj => a_axtb -> Eff effs_aAnj ObservationHandle
observeAfter :: forall a_axtc. forall effs_aAnk. Member (LogObserve a_axtc) effs_aAnk => Maybe a_axtc -> ObservationHandle -> Eff effs_aAnk ()

-- | Write a log message before and after an action. Consider using
--   <a>observeBefore</a> and <a>observeAfter</a> directly if you need more
--   control over the values that are observed at the call site.
surround :: forall v a effs. Member (LogObserve v) effs => v -> Eff effs a -> Eff effs a

-- | <pre>
--   surroundDebug = surround Debug
--   </pre>
surroundDebug :: Member (LogObserve (LogMessage v)) effs => v -> Eff effs a -> Eff effs a

-- | <pre>
--   surroundInfo = surround Info
--   </pre>
surroundInfo :: Member (LogObserve (LogMessage v)) effs => v -> Eff effs a -> Eff effs a

-- | <pre>
--   surroundWarn = surround Warn
--   </pre>
surroundWarn :: Member (LogObserve (LogMessage v)) effs => v -> Eff effs a -> Eff effs a

-- | Interpret the <a>LogObserve</a> effect by logging a "start" message
--   before the action and an "end" message after the action.
handleObserveLog :: forall effs. Member (LogMsg Text) effs => Eff (LogObserve (LogMessage Text) : effs) ~> Eff effs

-- | Handle the <a>LogObserve</a> effect by recording observations
--   <tt>s</tt> before and after the observed action, and turning them into
--   'LogMessage (Observation s)' values.
handleObserve :: forall v s effs. (v -> Eff effs s) -> (Observation v s -> Eff effs ()) -> Eff (LogObserve v : effs) ~> Eff effs
instance GHC.Show.Show Control.Monad.Freer.Extras.Log.ExitMode
instance GHC.Classes.Ord Control.Monad.Freer.Extras.Log.ExitMode
instance GHC.Classes.Eq Control.Monad.Freer.Extras.Log.ExitMode
instance Prettyprinter.Internal.Pretty a => Prettyprinter.Internal.Pretty (Control.Monad.Freer.Extras.Log.LogMessage a)
instance Data.Aeson.Types.FromJSON.FromJSON Control.Monad.Freer.Extras.Log.LogLevel
instance Data.Aeson.Types.ToJSON.ToJSON Control.Monad.Freer.Extras.Log.LogLevel
instance GHC.Generics.Generic Control.Monad.Freer.Extras.Log.LogLevel
instance GHC.Classes.Ord Control.Monad.Freer.Extras.Log.LogLevel
instance GHC.Classes.Eq Control.Monad.Freer.Extras.Log.LogLevel
instance GHC.Show.Show Control.Monad.Freer.Extras.Log.LogLevel
instance Data.Aeson.Types.FromJSON.FromJSON a => Data.Aeson.Types.FromJSON.FromJSON (Control.Monad.Freer.Extras.Log.LogMessage a)
instance Data.Aeson.Types.ToJSON.ToJSON a => Data.Aeson.Types.ToJSON.ToJSON (Control.Monad.Freer.Extras.Log.LogMessage a)
instance Data.Traversable.Traversable Control.Monad.Freer.Extras.Log.LogMessage
instance Data.Foldable.Foldable Control.Monad.Freer.Extras.Log.LogMessage
instance GHC.Base.Functor Control.Monad.Freer.Extras.Log.LogMessage
instance GHC.Generics.Generic (Control.Monad.Freer.Extras.Log.LogMessage a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Control.Monad.Freer.Extras.Log.LogMessage a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Control.Monad.Freer.Extras.Log.LogMessage a)
instance GHC.Show.Show a => GHC.Show.Show (Control.Monad.Freer.Extras.Log.LogMessage a)
instance Prettyprinter.Internal.Pretty Control.Monad.Freer.Extras.Log.LogLevel

module Control.Monad.Freer.Extras.Pagination

-- | Query parameters for pagination.
data PageQuery a
PageQuery :: PageSize -> Maybe a -> PageQuery a

-- | Number of items per page.
[pageQuerySize] :: PageQuery a -> PageSize

-- | Last item of the queried page.
[pageQueryLastItem] :: PageQuery a -> Maybe a

-- | Part of a collection.
data Page a
Page :: PageQuery a -> Maybe (PageQuery a) -> [a] -> Page a

-- | The <a>PageQuery</a> which was used to request this <a>Page</a>.
[currentPageQuery] :: Page a -> PageQuery a

-- | The <a>PageQuery</a> to use to request the next <a>Page</a>. Nothing
--   if we requested the last page.
[nextPageQuery] :: Page a -> Maybe (PageQuery a)

-- | Items in the current <a>Page</a>.
[pageItems] :: Page a -> [a]
newtype PageSize
PageSize :: Natural -> PageSize
[getPageSize] :: PageSize -> Natural

-- | Given a <a>Set</a>, request the <a>Page</a> with the given
--   <a>PageQuery</a>.
pageOf :: Eq a => PageQuery a -> Set a -> Page a
instance GHC.Num.Num Control.Monad.Freer.Extras.Pagination.PageSize
instance Data.OpenApi.Internal.Schema.ToSchema Control.Monad.Freer.Extras.Pagination.PageSize
instance Data.Aeson.Types.FromJSON.FromJSON Control.Monad.Freer.Extras.Pagination.PageSize
instance Data.Aeson.Types.ToJSON.ToJSON Control.Monad.Freer.Extras.Pagination.PageSize
instance GHC.Generics.Generic Control.Monad.Freer.Extras.Pagination.PageSize
instance GHC.Show.Show Control.Monad.Freer.Extras.Pagination.PageSize
instance GHC.Classes.Ord Control.Monad.Freer.Extras.Pagination.PageSize
instance GHC.Classes.Eq Control.Monad.Freer.Extras.Pagination.PageSize
instance Data.OpenApi.Internal.Schema.ToSchema a => Data.OpenApi.Internal.Schema.ToSchema (Control.Monad.Freer.Extras.Pagination.PageQuery a)
instance Data.Aeson.Types.FromJSON.FromJSON a => Data.Aeson.Types.FromJSON.FromJSON (Control.Monad.Freer.Extras.Pagination.PageQuery a)
instance Data.Aeson.Types.ToJSON.ToJSON a => Data.Aeson.Types.ToJSON.ToJSON (Control.Monad.Freer.Extras.Pagination.PageQuery a)
instance GHC.Base.Functor Control.Monad.Freer.Extras.Pagination.PageQuery
instance GHC.Generics.Generic (Control.Monad.Freer.Extras.Pagination.PageQuery a)
instance GHC.Show.Show a => GHC.Show.Show (Control.Monad.Freer.Extras.Pagination.PageQuery a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Control.Monad.Freer.Extras.Pagination.PageQuery a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Control.Monad.Freer.Extras.Pagination.PageQuery a)
instance Data.Aeson.Types.FromJSON.FromJSON a => Data.Aeson.Types.FromJSON.FromJSON (Control.Monad.Freer.Extras.Pagination.Page a)
instance Data.Aeson.Types.ToJSON.ToJSON a => Data.Aeson.Types.ToJSON.ToJSON (Control.Monad.Freer.Extras.Pagination.Page a)
instance GHC.Base.Functor Control.Monad.Freer.Extras.Pagination.Page
instance GHC.Generics.Generic (Control.Monad.Freer.Extras.Pagination.Page a)
instance GHC.Show.Show a => GHC.Show.Show (Control.Monad.Freer.Extras.Pagination.Page a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Control.Monad.Freer.Extras.Pagination.Page a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Control.Monad.Freer.Extras.Pagination.Page a)
instance Data.OpenApi.Internal.Schema.ToSchema a => Data.OpenApi.Internal.Schema.ToSchema (Control.Monad.Freer.Extras.Pagination.Page a)
instance Data.Default.Class.Default (Control.Monad.Freer.Extras.Pagination.PageQuery a)
instance Data.Default.Class.Default Control.Monad.Freer.Extras.Pagination.PageSize

module Control.Monad.Freer.Extras.Beam.Effects
type Synt dbt = (Sql92ExpressionValueSyntax (Sql92SelectTableExpressionSyntax (Sql92SelectSelectTableSyntax (Sql92SelectSyntax (BeamSqlBackendSyntax dbt)))))
data BeamEffect dbt r
[AddRowsInBatches] :: BeamableDb dbt table => Int -> DatabaseEntity dbt db (TableEntity table) -> [table Identity] -> BeamEffect dbt ()
[AddRows] :: BeamableDb dbt table => SqlInsert dbt table -> BeamEffect dbt ()
[UpdateRows] :: Beamable table => SqlUpdate dbt table -> BeamEffect dbt ()
[DeleteRows] :: Beamable table => SqlDelete dbt table -> BeamEffect dbt ()
[SelectList] :: FromBackendRow dbt a => SqlSelect dbt a -> BeamEffect dbt [a]

-- | Select using Seek Pagination.
[SelectPage] :: (FromBackendRow dbt a, HasSqlValueSyntax (Synt dbt) a, HasQBuilder dbt) => PageQuery a -> Q dbt db BeamThreadingArg (QExpr dbt BeamThreadingArg a) -> BeamEffect dbt (Page a)
[SelectOne] :: FromBackendRow dbt a => SqlSelect dbt a -> BeamEffect dbt (Maybe a)
[Combined] :: [BeamEffect dbt ()] -> BeamEffect dbt ()
addRowsInBatches :: forall dbt table db effs. (BeamableDb dbt table, Member (BeamEffect dbt) effs) => Int -> DatabaseEntity dbt db (TableEntity table) -> [table Identity] -> Eff effs ()
addRows :: forall dbt table effs. (BeamableDb dbt table, Member (BeamEffect dbt) effs) => SqlInsert dbt table -> Eff effs ()
updateRows :: forall dbt table effs. (Beamable table, Member (BeamEffect dbt) effs) => SqlUpdate dbt table -> Eff effs ()
deleteRows :: forall dbt table effs. (Beamable table, Member (BeamEffect dbt) effs) => SqlDelete dbt table -> Eff effs ()
selectList :: forall dbt a effs. (FromBackendRow dbt a, Member (BeamEffect dbt) effs) => SqlSelect dbt a -> Eff effs [a]
selectPage :: forall dbt a db effs. (FromBackendRow dbt a, HasSqlValueSyntax (Synt dbt) a, Member (BeamEffect dbt) effs, HasQBuilder dbt) => PageQuery a -> Q dbt db BeamThreadingArg (QExpr dbt BeamThreadingArg a) -> Eff effs (Page a)
selectOne :: forall dbt a effs. (FromBackendRow dbt a, Member (BeamEffect dbt) effs) => SqlSelect dbt a -> Eff effs (Maybe a)
combined :: forall dbt effs. Member (BeamEffect dbt) effs => [BeamEffect dbt ()] -> Eff effs ()
handleBeam :: forall dbt (dbM :: Type -> Type) effs. (BeamSqlBackend dbt, MonadBeam dbt dbM, BeamHasInsertOnConflict dbt) => (Trace IO BeamLog -> dbM ~> Eff effs) -> Trace IO BeamLog -> BeamEffect dbt ~> Eff effs
instance GHC.Base.Monoid (Control.Monad.Freer.Extras.Beam.Effects.BeamEffect dbt ())
instance GHC.Base.Semigroup (Control.Monad.Freer.Extras.Beam.Effects.BeamEffect dbt ())

module Control.Monad.Freer.Extras.Beam
type BeamableDb db table = (Beamable table, FieldsFulfillConstraint (BeamSqlBackendCanSerialize db) table)
type BeamThreadingArg = QNested (QNested QBaseScope)
newtype BeamError
SqlError :: Text -> BeamError
newtype BeamLog
SqlLog :: String -> BeamLog

module Control.Monad.Freer.Extras.State
use :: Member (State s) effs => Getting a s a -> Eff effs a
assign :: Member (State s) effs => ASetter s s a b -> b -> Eff effs ()
modifying :: Member (State s) effs => ASetter s s a b -> (a -> b) -> Eff effs ()

module Control.Monad.Freer.Extras.Stream

-- | Turn the <tt>Yield e ()</tt> effect into a pull-based stream of
--   <tt>e</tt> events.
runStream :: forall e a effs. Eff (Yield e () : effs) a -> Stream (Of e) (Eff effs) a

module Control.Monad.Freer.Extras

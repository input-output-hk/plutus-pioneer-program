-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/joinplank/plutus-apps/tree/plank-pab-blockfrost/pab-blockfrost#readme</a>
@package pab-blockfrost
@version 1.1.0.0

module Plutus.Blockfrost.Types
newtype BlockfrostConfig
BlockfrostConfig :: FilePath -> BlockfrostConfig
[bfTokenPath] :: BlockfrostConfig -> FilePath
data BlockfrostEnv
BlockfrostEnv :: FilePath -> NetworkId -> BlockfrostEnv
[envBfTokenPath] :: BlockfrostEnv -> FilePath
[envNetworkId] :: BlockfrostEnv -> NetworkId
data TxResponse
TxResponse :: TxHash -> Maybe Text -> Maybe Text -> [UtxoInput] -> [UtxoOutput] -> Map Text ScriptDatum -> Map Integer (ValidationPurpose, ScriptDatum) -> Map Text ScriptCBOR -> TxResponse
[_txHash] :: TxResponse -> TxHash
[_invalidBefore] :: TxResponse -> Maybe Text
[_invalidAfter] :: TxResponse -> Maybe Text
[_utxosInputs] :: TxResponse -> [UtxoInput]
[_utxosOutpus] :: TxResponse -> [UtxoOutput]
[_datumsMap] :: TxResponse -> Map Text ScriptDatum
[_redeemersMap] :: TxResponse -> Map Integer (ValidationPurpose, ScriptDatum)
[_scriptsMap] :: TxResponse -> Map Text ScriptCBOR
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.Blockfrost.Types.BlockfrostConfig
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.Blockfrost.Types.BlockfrostConfig
instance GHC.Generics.Generic Plutus.Blockfrost.Types.BlockfrostConfig
instance GHC.Classes.Eq Plutus.Blockfrost.Types.BlockfrostConfig
instance GHC.Show.Show Plutus.Blockfrost.Types.BlockfrostConfig

module Plutus.Blockfrost.Queries
getTipBlockfrost :: MonadBlockfrost m => m Block
getDatumBlockfrost :: MonadBlockfrost m => DatumHash -> m Value
getValidatorBlockfrost :: MonadBlockfrost m => ScriptHash -> m ScriptCBOR
getTxOutBlockfrost :: (TxHash, Integer) -> BlockfrostClient UtxoOutput
getUnspentTxOutBlockfrost :: (TxHash, Integer) -> BlockfrostClient UtxoOutput
getIsUtxoBlockfrost :: MonadBlockfrost m => (TxHash, Integer) -> m (Block, Bool)
getUtxoAtAddressBlockfrost :: MonadBlockfrost m => PageQuery a -> Address -> m (Block, [AddressUtxo])
getUnspentAtAddressBlockfrost :: MonadBlockfrost m => PageQuery a -> Address -> m [AddressUtxo]
getDatumsAtAddressBlockfrost :: MonadBlockfrost m => PageQuery a -> Address -> m [Value]
getTxoAtAddressBlockfrost :: MonadBlockfrost m => PageQuery a -> Address -> m [UtxoInput]
getUtxoSetWithCurrency :: MonadBlockfrost m => PageQuery a -> AssetId -> m (Block, [AddressUtxo])
getTxFromTxIdBlockfrost :: MonadBlockfrost m => TxHash -> m TxResponse
getTxsFromTxIdsBlockfrost :: MonadBlockfrost m => [TxHash] -> m [TxResponse]
defaultGetUtxo :: MonadBlockfrost m => m (Block, [AddressUtxo])
defaultGetList :: MonadBlockfrost m => m [a]
defaultIsUtxo :: MonadBlockfrost m => m (Block, Bool)

module Plutus.Blockfrost.Utils
class Show a => ToBlockfrostScriptHash a
toBlockfrostScriptHash :: ToBlockfrostScriptHash a => a -> ScriptHash
class Show a => ToBlockfrostDatumHash a
toBlockfrostDatumHash :: ToBlockfrostDatumHash a => a -> DatumHash
toBlockfrostTxHash :: TxId -> TxHash
toBlockfrostTxHashes :: [TxId] -> [TxHash]
toBlockfrostRef :: TxOutRef -> (TxHash, Integer)
toBlockfrostAssetId :: AssetClass -> AssetId
textToDatumHash :: Text -> DatumHash
textToScriptHash :: Text -> ScriptHash
textToRedeemerHash :: Text -> RedeemerHash
toPlutusScriptTag :: ValidationPurpose -> ScriptTag
toCardanoAddress :: Address -> Either String (AddressInEra BabbageEra)
credentialToAddress :: NetworkId -> Credential -> Address
txHashToTxId :: TxHash -> TxId
utxoToRef :: AddressUtxo -> TxOutRef
utxoToTxId :: AddressUtxo -> TxId
txoToRef :: UtxoInput -> TxOutRef
txoToTxId :: UtxoInput -> TxId
amountsToValue :: [Amount] -> Value
blfAmountToValue :: Amount -> Value
discreteCurrencyToValue :: SomeDiscrete -> Value
lovelaceConfig :: DecimalConf
lovelacesToMInt :: Lovelaces -> Maybe Integer
lovelacesToValue :: Lovelaces -> Value
textToSlot :: Text -> Slot
toPlutusSlotRange :: Maybe Text -> Maybe Text -> SlotRange
instance Plutus.Blockfrost.Utils.ToBlockfrostDatumHash Plutus.V1.Ledger.Scripts.DatumHash
instance Plutus.Blockfrost.Utils.ToBlockfrostDatumHash Plutus.V1.Ledger.Scripts.RedeemerHash
instance Plutus.Blockfrost.Utils.ToBlockfrostScriptHash Plutus.V1.Ledger.Scripts.ValidatorHash
instance Plutus.Blockfrost.Utils.ToBlockfrostScriptHash Plutus.V1.Ledger.Scripts.MintingPolicyHash
instance Plutus.Blockfrost.Utils.ToBlockfrostScriptHash Plutus.V1.Ledger.Scripts.StakeValidatorHash

module Plutus.Blockfrost.Responses
processTip :: Block -> IO Tip
processGetDatum :: FromData a => Maybe Value -> IO (Maybe a)
processGetValidator :: PlutusValidator a => Maybe ScriptCBOR -> IO (Maybe (Versioned a))
processUnspentTxOut :: Maybe UtxoOutput -> IO (Maybe DecoratedTxOut)
processIsUtxo :: (Block, Bool) -> IO IsUtxoResponse
processGetUtxos :: PageQuery TxOutRef -> (Block, [AddressUtxo]) -> IO UtxosResponse
processGetTxos :: PageQuery TxOutRef -> [UtxoInput] -> IO TxosResponse
processUnspentTxOutSetAtAddress :: PageQuery TxOutRef -> Credential -> [AddressUtxo] -> IO (QueryResponse [(TxOutRef, DecoratedTxOut)])
processDatumsAtAddress :: FromData a => PageQuery TxOutRef -> Credential -> [Value] -> IO (QueryResponse [a])
processGetTxFromTxId :: Maybe TxResponse -> IO (Maybe ChainIndexTx)
processGetTxsFromTxIds :: [TxResponse] -> IO [ChainIndexTx]
instance Plutus.Blockfrost.Responses.PlutusValidator Plutus.V1.Ledger.Scripts.Validator
instance Plutus.Blockfrost.Responses.PlutusValidator Plutus.V1.Ledger.Scripts.MintingPolicy
instance Plutus.Blockfrost.Responses.PlutusValidator Plutus.V1.Ledger.Scripts.StakeValidator
instance Plutus.Blockfrost.Responses.PlutusValidator Plutus.V1.Ledger.Scripts.Script

module Plutus.Blockfrost.Client

-- | Handle <a>ChainIndexQueryEffect</a> by making HTTP calls to the remote
--   blockfrost server.
handleBlockfrostClient :: forall m effs. (LastMember m effs, Member (Reader BlockfrostEnv) effs, MonadIO m) => ChainIndexQueryEffect ~> Eff effs

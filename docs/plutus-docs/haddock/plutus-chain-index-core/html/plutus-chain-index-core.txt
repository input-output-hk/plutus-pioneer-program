-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/input-output-hk/plutus-apps#readme</a>
@package plutus-chain-index-core
@version 1.1.0.0

module Cardano.Protocol.Socket.Type

-- | Tip of the block chain type (used by node protocols).
type Tip = Block

-- | The node protocols require a block header type.
newtype BlockId
BlockId :: ByteString -> BlockId
[getBlockId] :: BlockId -> ByteString

-- | A hash of the block's contents.
blockId :: Block -> BlockId

-- | Limits for the protocols we use.
maximumMiniProtocolLimits :: MiniProtocolLimits

-- | Protocol versions
nodeToClientVersion :: NodeToClientVersion

-- | A temporary definition of the protocol version. This will be moved as
--   an argument to the client connection function in a future PR (the
--   network magic number matches the one in the test net created by
--   scripts)
cfgNetworkMagic :: NetworkMagic
cfgNetworkId :: NetworkId
nodeToClientVersionData :: NodeToClientVersionData

-- | A protocol client that will never leave the initial state.
doNothingInitiatorProtocol :: MonadTimer m => RunMiniProtocol 'InitiatorMode ByteString m a Void
doNothingResponderProtocol :: MonadTimer m => RunMiniProtocol 'ResponderMode ByteString m Void a
type Offset = Integer

-- | Boilerplate codecs used for protocol serialisation.
--   
--   The number of epochSlots is specific to each blockchain instance. This
--   value is what the cardano main and testnet uses. Only applies to the
--   Byron era.
epochSlots :: EpochSlots
codecVersion :: BlockNodeToClientVersion (CardanoBlock StandardCrypto)
codecConfig :: CodecConfig (CardanoBlock StandardCrypto)
nodeToClientCodecs :: forall m. MonadST m => ClientCodecs (CardanoBlock StandardCrypto) m

-- | These codecs are currently used in the mock nodes and will probably
--   soon get removed as the mock nodes are phased out.
chainSyncCodec :: forall block. (Serialise block, Serialise (HeaderHash block)) => Codec (ChainSync block (Point block) Tip) DeserialiseFailure IO ByteString
txSubmissionCodec :: Codec (LocalTxSubmission (Tx BabbageEra) String) DeserialiseFailure IO ByteString
instance Prettyprinter.Internal.Pretty Cardano.Protocol.Socket.Type.BlockId
instance NoThunks.Class.NoThunks Cardano.Protocol.Socket.Type.BlockId
instance Codec.Serialise.Class.Serialise Cardano.Protocol.Socket.Type.BlockId
instance GHC.Generics.Generic Cardano.Protocol.Socket.Type.BlockId
instance GHC.Classes.Ord Cardano.Protocol.Socket.Type.BlockId
instance GHC.Classes.Eq Cardano.Protocol.Socket.Type.BlockId
instance Ouroboros.Network.Block.StandardHash (Cardano.Api.Tx.Tx Cardano.Api.Eras.BabbageEra)
instance Ouroboros.Network.Block.StandardHash Ledger.Blockchain.Block
instance NoThunks.Class.NoThunks Plutus.V1.Ledger.Tx.TxId
instance GHC.Show.Show Cardano.Protocol.Socket.Type.BlockId
instance Ouroboros.Network.Util.ShowProxy.ShowProxy GHC.Types.Char
instance Ouroboros.Network.Util.ShowProxy.ShowProxy (Cardano.Api.Tx.Tx Cardano.Api.Eras.BabbageEra)
instance Ouroboros.Network.Util.ShowProxy.ShowProxy Ledger.Blockchain.OnChainTx
instance Ouroboros.Network.Util.ShowProxy.ShowProxy a => Ouroboros.Network.Util.ShowProxy.ShowProxy [a]
instance NoThunks.Class.NoThunks PlutusTx.Builtins.Internal.BuiltinByteString


-- | Misc. types used in this package
module Plutus.ChainIndex.Types
data ChainIndexTx
ChainIndexTx :: TxId -> [TxIn] -> ChainIndexTxOutputs -> !SlotRange -> Map DatumHash Datum -> Redeemers -> Map ScriptHash (Versioned Script) -> Maybe SomeCardanoApiTx -> ChainIndexTx

-- | The id of this transaction.
[_citxTxId] :: ChainIndexTx -> TxId

-- | The inputs to this transaction.
[_citxInputs] :: ChainIndexTx -> [TxIn]

-- | The outputs of this transaction, ordered so they can be referenced by
--   index.
[_citxOutputs] :: ChainIndexTx -> ChainIndexTxOutputs

-- | The <a>SlotRange</a> during which this transaction may be validated.
[_citxValidRange] :: ChainIndexTx -> !SlotRange

-- | Datum objects recorded on this transaction.
[_citxData] :: ChainIndexTx -> Map DatumHash Datum

-- | Redeemers of the minting scripts.
[_citxRedeemers] :: ChainIndexTx -> Redeemers

-- | The scripts (validator, stake validator or minting) part of cardano
--   tx.
[_citxScripts] :: ChainIndexTx -> Map ScriptHash (Versioned Script)

-- | The full Cardano API tx which was used to populate the rest of the
--   <a>ChainIndexTx</a> fields. Useful because <a>ChainIndexTx</a> doesn't
--   have all the details of the tx, so we keep it as a safety net. Might
--   be Nothing if we are in the emulator.
[_citxCardanoTx] :: ChainIndexTx -> Maybe SomeCardanoApiTx

-- | List of outputs of a transaction. There is only an optional collateral
--   output if the transaction is invalid.
data ChainIndexTxOutputs

-- | The transaction is invalid so there is maybe a collateral output.
InvalidTx :: Maybe ChainIndexTxOut -> ChainIndexTxOutputs
ValidTx :: [ChainIndexTxOut] -> ChainIndexTxOutputs
data ChainIndexTxOut
ChainIndexTxOut :: CardanoAddress -> Value -> OutputDatum -> ReferenceScript -> ChainIndexTxOut

-- | We can't use AddressInAnyEra here because of missing FromJson instance
--   for Byron era
[citoAddress] :: ChainIndexTxOut -> CardanoAddress
[citoValue] :: ChainIndexTxOut -> Value
[citoDatum] :: ChainIndexTxOut -> OutputDatum
[citoRefScript] :: ChainIndexTxOut -> ReferenceScript
data ReferenceScript
ReferenceScriptNone :: ReferenceScript
ReferenceScriptInAnyLang :: ScriptInAnyLang -> ReferenceScript

-- | Block identifier (usually a hash)
newtype BlockId
BlockId :: ByteString -> BlockId
[getBlockId] :: BlockId -> ByteString

-- | Compute a hash of the block's contents.
blockId :: Block -> BlockId

-- | The tip of the chain index.
data Tip
TipAtGenesis :: Tip
Tip :: Slot -> BlockId -> BlockNumber -> Tip

-- | Last slot
[tipSlot] :: Tip -> Slot

-- | Last block ID
[tipBlockId] :: Tip -> BlockId

-- | Last block number
[tipBlockNo] :: Tip -> BlockNumber

-- | When performing a rollback the chain sync protocol does not provide a
--   block number where to resume from.
data Point
PointAtGenesis :: Point
Point :: Slot -> BlockId -> Point

-- | Slot number
[pointSlot] :: Point -> Slot

-- | Block number
[pointBlockId] :: Point -> BlockId
pointsToTip :: Point -> Tip -> Bool
tipAsPoint :: Tip -> Point
_PointAtGenesis :: Prism' Point ()
_Point :: Prism' Point (Slot, BlockId)

-- | Validity of a transaction that has been added to the ledger
data TxValidity
TxValid :: TxValidity
TxInvalid :: TxValidity
UnknownValidity :: TxValidity

-- | The status of a Cardano transaction
type TxStatus = RollbackState ()
type TxOutStatus = RollbackState TxOutState

-- | The rollback state of a Cardano transaction
data RollbackState a

-- | The transaction is not on the chain. That's all we can say.
Unknown :: RollbackState a

-- | The transaction is on the chain, n blocks deep. It can still be rolled
--   back.
TentativelyConfirmed :: Depth -> TxValidity -> a -> RollbackState a

-- | The transaction is on the chain. It cannot be rolled back anymore.
Committed :: TxValidity -> a -> RollbackState a
data TxOutState
Spent :: TxId -> TxOutState
Unspent :: TxOutState

-- | Converts a <a>TxOutStatus</a> to a <a>TxStatus</a>. Possible since a
--   transaction output belongs to a transaction.
--   
--   Note, however, that we can't convert a <a>TxStatus</a> to a
--   <a>TxOutStatus</a>.
liftTxOutStatus :: TxOutStatus -> TxStatus

-- | Maybe extract the <a>TxOutState</a> (Spent or Unspent) of a
--   <a>TxOutStatus</a>.
txOutStatusTxOutState :: TxOutStatus -> Maybe TxOutState
newtype BlockNumber
BlockNumber :: Word64 -> BlockNumber
[unBlockNumber] :: BlockNumber -> Word64

-- | How many blocks deep the tx is on the chain
newtype Depth
Depth :: Int -> Depth
[unDepth] :: Depth -> Int
data Diagnostics
Diagnostics :: Integer -> Integer -> Integer -> Integer -> Int -> Int -> [TxId] -> [ChainIndexTxOut] -> Diagnostics
[numTransactions] :: Diagnostics -> Integer
[numScripts] :: Diagnostics -> Integer
[numAddresses] :: Diagnostics -> Integer
[numAssetClasses] :: Diagnostics -> Integer
[numUnspentOutputs] :: Diagnostics -> Int
[numUnmatchedInputs] :: Diagnostics -> Int
[someTransactions] :: Diagnostics -> [TxId]
[unspentTxOuts] :: Diagnostics -> [ChainIndexTxOut]
data TxConfirmedState
TxConfirmedState :: Sum Int -> Last BlockNumber -> Last TxValidity -> TxConfirmedState
[timesConfirmed] :: TxConfirmedState -> Sum Int
[blockAdded] :: TxConfirmedState -> Last BlockNumber
[validity] :: TxConfirmedState -> Last TxValidity

-- | Datatype returned when we couldn't get the state of a tx or a tx
--   output.
data TxStatusFailure

-- | We couldn't return the status because the <a>TxIdState</a> was in a
--   ... state ... that we didn't know how to decode in
--   <a>transactionStatus</a>.
TxIdStateInvalid :: BlockNumber -> TxId -> TxIdState -> TxStatusFailure

-- | We couldn't return the status because the <a>TxOutBalance</a> does not
--   contain the target tx output.
TxOutBalanceStateInvalid :: BlockNumber -> TxOutRef -> TxOutBalance -> TxStatusFailure
InvalidRollbackAttempt :: BlockNumber -> TxId -> TxIdState -> TxStatusFailure
data TxIdState
TxIdState :: Map TxId TxConfirmedState -> Map TxId (Sum Int) -> TxIdState

-- | Number of times this transaction has been added as well as other
--   necessary metadata.
[txnsConfirmed] :: TxIdState -> Map TxId TxConfirmedState

-- | Number of times this transaction has been deleted.
[txnsDeleted] :: TxIdState -> Map TxId (Sum Int)

-- | The effect of a transaction (or a number of them) on the utxo set.
data TxUtxoBalance
TxUtxoBalance :: Set TxOutRef -> Set TxOutRef -> TxUtxoBalance

-- | Outputs newly added by the transaction(s)
[_tubUnspentOutputs] :: TxUtxoBalance -> Set TxOutRef

-- | Outputs spent by the transaction(s) that have no matching unspent
--   output
[_tubUnmatchedSpentInputs] :: TxUtxoBalance -> Set TxOutRef
tubUnspentOutputs :: Lens' TxUtxoBalance (Set TxOutRef)
tubUnmatchedSpentInputs :: Lens' TxUtxoBalance (Set TxOutRef)

-- | The effect of a transaction (or a number of them) on the tx output
--   set.
data TxOutBalance
TxOutBalance :: Set TxOutRef -> Map TxOutRef TxId -> TxOutBalance

-- | Outputs newly added by the transaction(s)
[_tobUnspentOutputs] :: TxOutBalance -> Set TxOutRef

-- | Outputs spent by the transaction(s) along with the tx id that spent it
[_tobSpentOutputs] :: TxOutBalance -> Map TxOutRef TxId
tobUnspentOutputs :: Lens' TxOutBalance (Set TxOutRef)
tobSpentOutputs :: Lens' TxOutBalance (Map TxOutRef TxId)

-- | A block of transactions to be synced.
data ChainSyncBlock
Block :: Tip -> [(ChainIndexTx, TxProcessOption)] -> ChainSyncBlock
[blockTip] :: ChainSyncBlock -> Tip
[blockTxs] :: ChainSyncBlock -> [(ChainIndexTx, TxProcessOption)]

-- | User-customizable options to process a transaction. See #73 for more
--   motivations.
newtype TxProcessOption
TxProcessOption :: Bool -> TxProcessOption

-- | Should the chain index store this transaction or not. If not, only
--   handle the UTXOs. This, for example, allows applications to skip
--   unwanted pre-Alonzo transactions.
[tpoStoreTx] :: TxProcessOption -> Bool
citxTxId :: Lens' ChainIndexTx TxId
citxInputs :: Lens' ChainIndexTx [TxIn]
citxOutputs :: Lens' ChainIndexTx ChainIndexTxOutputs
citxValidRange :: Lens' ChainIndexTx SlotRange
citxData :: Lens' ChainIndexTx (Map DatumHash Datum)
citxRedeemers :: Lens' ChainIndexTx Redeemers
citxScripts :: Lens' ChainIndexTx (Map ScriptHash (Versioned Script))
citxCardanoTx :: Lens' ChainIndexTx (Maybe SomeCardanoApiTx)
_InvalidTx :: Prism' ChainIndexTxOutputs (Maybe ChainIndexTxOut)
_ValidTx :: Prism' ChainIndexTxOutputs [ChainIndexTxOut]
fromReferenceScript :: ReferenceScript -> Maybe (Versioned Script)
instance GHC.Show.Show Plutus.ChainIndex.Types.TxProcessOption
instance GHC.Show.Show Plutus.ChainIndex.Types.ChainSyncBlock
instance Data.Default.Class.Default Plutus.ChainIndex.Types.TxProcessOption
instance GHC.Base.Semigroup Plutus.ChainIndex.Types.TxUtxoBalance
instance GHC.Base.Monoid Plutus.ChainIndex.Types.TxUtxoBalance
instance Codec.Serialise.Class.Serialise Plutus.ChainIndex.Types.TxUtxoBalance
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Types.TxUtxoBalance
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Types.TxUtxoBalance
instance GHC.Generics.Generic Plutus.ChainIndex.Types.TxUtxoBalance
instance GHC.Show.Show Plutus.ChainIndex.Types.TxUtxoBalance
instance GHC.Classes.Eq Plutus.ChainIndex.Types.TxUtxoBalance
instance Prettyprinter.Internal.Pretty Plutus.ChainIndex.Types.TxValidity
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Types.TxValidity
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Types.TxValidity
instance GHC.Generics.Generic Plutus.ChainIndex.Types.TxValidity
instance GHC.Show.Show Plutus.ChainIndex.Types.TxValidity
instance GHC.Classes.Ord Plutus.ChainIndex.Types.TxValidity
instance GHC.Classes.Eq Plutus.ChainIndex.Types.TxValidity
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Types.Depth
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Types.Depth
instance Prettyprinter.Internal.Pretty Plutus.ChainIndex.Types.Depth
instance GHC.Real.Integral Plutus.ChainIndex.Types.Depth
instance GHC.Enum.Enum Plutus.ChainIndex.Types.Depth
instance GHC.Real.Real Plutus.ChainIndex.Types.Depth
instance GHC.Num.Num Plutus.ChainIndex.Types.Depth
instance GHC.Generics.Generic Plutus.ChainIndex.Types.Depth
instance GHC.Show.Show Plutus.ChainIndex.Types.Depth
instance GHC.Classes.Ord Plutus.ChainIndex.Types.Depth
instance GHC.Classes.Eq Plutus.ChainIndex.Types.Depth
instance GHC.Show.Show a => Prettyprinter.Internal.Pretty (Plutus.ChainIndex.Types.RollbackState a)
instance Data.Aeson.Types.FromJSON.FromJSON a => Data.Aeson.Types.FromJSON.FromJSON (Plutus.ChainIndex.Types.RollbackState a)
instance Data.Aeson.Types.ToJSON.ToJSON a => Data.Aeson.Types.ToJSON.ToJSON (Plutus.ChainIndex.Types.RollbackState a)
instance GHC.Base.Functor Plutus.ChainIndex.Types.RollbackState
instance GHC.Generics.Generic (Plutus.ChainIndex.Types.RollbackState a)
instance GHC.Show.Show a => GHC.Show.Show (Plutus.ChainIndex.Types.RollbackState a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Plutus.ChainIndex.Types.RollbackState a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Plutus.ChainIndex.Types.RollbackState a)
instance Prettyprinter.Internal.Pretty Plutus.ChainIndex.Types.TxOutState
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Types.TxOutState
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Types.TxOutState
instance GHC.Generics.Generic Plutus.ChainIndex.Types.TxOutState
instance GHC.Show.Show Plutus.ChainIndex.Types.TxOutState
instance GHC.Classes.Ord Plutus.ChainIndex.Types.TxOutState
instance GHC.Classes.Eq Plutus.ChainIndex.Types.TxOutState
instance Data.OpenApi.Internal.Schema.ToSchema Plutus.ChainIndex.Types.Diagnostics
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Types.Diagnostics
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Types.Diagnostics
instance GHC.Generics.Generic Plutus.ChainIndex.Types.Diagnostics
instance GHC.Show.Show Plutus.ChainIndex.Types.Diagnostics
instance GHC.Classes.Eq Plutus.ChainIndex.Types.Diagnostics
instance GHC.Base.Monoid Plutus.ChainIndex.Types.TxConfirmedState
instance GHC.Show.Show Plutus.ChainIndex.Types.TxConfirmedState
instance GHC.Generics.Generic Plutus.ChainIndex.Types.TxConfirmedState
instance GHC.Classes.Eq Plutus.ChainIndex.Types.TxConfirmedState
instance GHC.Show.Show Plutus.ChainIndex.Types.TxIdState
instance GHC.Generics.Generic Plutus.ChainIndex.Types.TxIdState
instance GHC.Classes.Eq Plutus.ChainIndex.Types.TxIdState
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Types.TxOutBalance
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Types.TxOutBalance
instance GHC.Generics.Generic Plutus.ChainIndex.Types.TxOutBalance
instance GHC.Show.Show Plutus.ChainIndex.Types.TxOutBalance
instance GHC.Classes.Eq Plutus.ChainIndex.Types.TxOutBalance
instance GHC.Classes.Eq Plutus.ChainIndex.Types.TxStatusFailure
instance GHC.Show.Show Plutus.ChainIndex.Types.TxStatusFailure
instance GHC.Base.Semigroup Plutus.ChainIndex.Types.TxOutBalance
instance GHC.Base.Monoid Plutus.ChainIndex.Types.TxOutBalance
instance GHC.Base.Semigroup Plutus.ChainIndex.Types.TxIdState
instance GHC.Base.Monoid Plutus.ChainIndex.Types.TxIdState
instance GHC.Base.Semigroup Plutus.ChainIndex.Types.TxConfirmedState
instance PlutusTx.Lattice.MeetSemiLattice a => PlutusTx.Lattice.MeetSemiLattice (Plutus.ChainIndex.Types.RollbackState a)
instance PlutusTx.Lattice.MeetSemiLattice Plutus.ChainIndex.Types.Depth
instance PlutusTx.Lattice.MeetSemiLattice Plutus.ChainIndex.Types.TxValidity
instance GHC.Classes.Ord Plutus.ChainIndex.Types.Point
instance Prettyprinter.Internal.Pretty Plutus.ChainIndex.Types.Point
instance GHC.Base.Semigroup Plutus.ChainIndex.Types.Tip
instance GHC.Base.Semigroup Plutus.ChainIndex.Types.Point
instance GHC.Base.Monoid Plutus.ChainIndex.Types.Tip
instance GHC.Base.Monoid Plutus.ChainIndex.Types.Point
instance GHC.Classes.Ord Plutus.ChainIndex.Types.Tip
instance Prettyprinter.Internal.Pretty Plutus.ChainIndex.Types.Tip
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Types.Point
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Types.Point
instance GHC.Generics.Generic Plutus.ChainIndex.Types.Point
instance GHC.Show.Show Plutus.ChainIndex.Types.Point
instance GHC.Classes.Eq Plutus.ChainIndex.Types.Point
instance Data.OpenApi.Internal.Schema.ToSchema Plutus.ChainIndex.Types.BlockNumber
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Types.BlockNumber
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Types.BlockNumber
instance GHC.Real.Integral Plutus.ChainIndex.Types.BlockNumber
instance GHC.Enum.Enum Plutus.ChainIndex.Types.BlockNumber
instance GHC.Real.Real Plutus.ChainIndex.Types.BlockNumber
instance GHC.Num.Num Plutus.ChainIndex.Types.BlockNumber
instance GHC.Generics.Generic Plutus.ChainIndex.Types.BlockNumber
instance GHC.Show.Show Plutus.ChainIndex.Types.BlockNumber
instance GHC.Classes.Ord Plutus.ChainIndex.Types.BlockNumber
instance GHC.Classes.Eq Plutus.ChainIndex.Types.BlockNumber
instance Data.OpenApi.Internal.Schema.ToSchema Plutus.ChainIndex.Types.Tip
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Types.Tip
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Types.Tip
instance GHC.Generics.Generic Plutus.ChainIndex.Types.Tip
instance GHC.Show.Show Plutus.ChainIndex.Types.Tip
instance GHC.Classes.Eq Plutus.ChainIndex.Types.Tip
instance Prettyprinter.Internal.Pretty Plutus.ChainIndex.Types.BlockNumber
instance Prettyprinter.Internal.Pretty Plutus.ChainIndex.Types.ChainIndexTx
instance Data.OpenApi.Internal.Schema.ToSchema Plutus.ChainIndex.Types.ChainIndexTx
instance Codec.Serialise.Class.Serialise Plutus.ChainIndex.Types.ChainIndexTx
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Types.ChainIndexTx
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Types.ChainIndexTx
instance GHC.Generics.Generic Plutus.ChainIndex.Types.ChainIndexTx
instance GHC.Classes.Eq Plutus.ChainIndex.Types.ChainIndexTx
instance GHC.Show.Show Plutus.ChainIndex.Types.ChainIndexTx
instance Data.OpenApi.Internal.Schema.ToSchema Plutus.ChainIndex.Types.ReferenceScript
instance Codec.Serialise.Class.Serialise Plutus.ChainIndex.Types.ReferenceScript
instance GHC.Generics.Generic Plutus.ChainIndex.Types.ReferenceScript
instance GHC.Show.Show Plutus.ChainIndex.Types.ReferenceScript
instance GHC.Classes.Eq Plutus.ChainIndex.Types.ReferenceScript
instance Data.OpenApi.Internal.Schema.ToSchema Plutus.ChainIndex.Types.ChainIndexTxOut
instance Codec.Serialise.Class.Serialise Plutus.ChainIndex.Types.ChainIndexTxOut
instance GHC.Generics.Generic Plutus.ChainIndex.Types.ChainIndexTxOut
instance GHC.Show.Show Plutus.ChainIndex.Types.ChainIndexTxOut
instance GHC.Classes.Eq Plutus.ChainIndex.Types.ChainIndexTxOut
instance Data.OpenApi.Internal.Schema.ToSchema Plutus.ChainIndex.Types.ChainIndexTxOutputs
instance Codec.Serialise.Class.Serialise Plutus.ChainIndex.Types.ChainIndexTxOutputs
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Types.ChainIndexTxOutputs
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Types.ChainIndexTxOutputs
instance GHC.Generics.Generic Plutus.ChainIndex.Types.ChainIndexTxOutputs
instance GHC.Classes.Eq Plutus.ChainIndex.Types.ChainIndexTxOutputs
instance GHC.Show.Show Plutus.ChainIndex.Types.ChainIndexTxOutputs
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Types.ChainIndexTxOut
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Types.ChainIndexTxOut
instance Prettyprinter.Internal.Pretty Plutus.ChainIndex.Types.ChainIndexTxOut
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Types.ReferenceScript
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Types.ReferenceScript
instance Codec.Serialise.Class.Serialise Cardano.Api.Script.ScriptInAnyLang
instance Data.OpenApi.Internal.Schema.ToSchema Cardano.Api.Script.ScriptInAnyLang

module Plutus.ChainIndex.ChainIndexError
data ChainIndexError
InsertionFailed :: InsertUtxoFailed -> ChainIndexError
RollbackFailed :: RollbackFailed -> ChainIndexError
ResumeNotSupported :: ChainIndexError

-- | Query failed because the chain index does not have a tip (not
--   synchronised with node)
QueryFailedNoTip :: ChainIndexError
BeamEffectError :: BeamError -> ChainIndexError

-- | UTXO state could not be inserted into the chain index
data InsertUtxoFailed

-- | Insertion failed as there was already a block with the given number
DuplicateBlock :: Tip -> InsertUtxoFailed

-- | The <tt>_usTip</tt> field of the argument was 'Last Nothing'
InsertUtxoNoTip :: InsertUtxoFailed

-- | Reason why the <tt>rollback</tt> operation failed
data RollbackFailed

-- | Rollback failed because the utxo index had no tip (not synchronised)
RollbackNoTip :: RollbackFailed

-- | Unable to roll back to <tt>expectedTip</tt> because the tip at that
--   position was different
TipMismatch :: Tip -> Point -> RollbackFailed
[foundTip] :: RollbackFailed -> Tip
[targetPoint] :: RollbackFailed -> Point

-- | Unable to find the old tip
OldPointNotFound :: Point -> RollbackFailed
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.ChainIndexError.InsertUtxoFailed
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.ChainIndexError.InsertUtxoFailed
instance GHC.Generics.Generic Plutus.ChainIndex.ChainIndexError.InsertUtxoFailed
instance GHC.Show.Show Plutus.ChainIndex.ChainIndexError.InsertUtxoFailed
instance GHC.Classes.Ord Plutus.ChainIndex.ChainIndexError.InsertUtxoFailed
instance GHC.Classes.Eq Plutus.ChainIndex.ChainIndexError.InsertUtxoFailed
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.ChainIndexError.RollbackFailed
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.ChainIndexError.RollbackFailed
instance GHC.Generics.Generic Plutus.ChainIndex.ChainIndexError.RollbackFailed
instance GHC.Show.Show Plutus.ChainIndex.ChainIndexError.RollbackFailed
instance GHC.Classes.Ord Plutus.ChainIndex.ChainIndexError.RollbackFailed
instance GHC.Classes.Eq Plutus.ChainIndex.ChainIndexError.RollbackFailed
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.ChainIndexError.ChainIndexError
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.ChainIndexError.ChainIndexError
instance GHC.Generics.Generic Plutus.ChainIndex.ChainIndexError.ChainIndexError
instance GHC.Show.Show Plutus.ChainIndex.ChainIndexError.ChainIndexError
instance GHC.Classes.Eq Plutus.ChainIndex.ChainIndexError.ChainIndexError
instance Prettyprinter.Internal.Pretty Plutus.ChainIndex.ChainIndexError.ChainIndexError
instance Prettyprinter.Internal.Pretty Plutus.ChainIndex.ChainIndexError.RollbackFailed
instance Prettyprinter.Internal.Pretty Plutus.ChainIndex.ChainIndexError.InsertUtxoFailed


-- | Interface to the transaction types from 'cardano-api'
module Plutus.Contract.CardanoAPI
fromCardanoBlock :: BlockInMode CardanoMode -> [ChainIndexTx]

-- | Convert a Cardano API tx of any given era to a Plutus chain index tx.
fromCardanoTx :: IsCardanoEra era => EraInMode era CardanoMode -> Tx era -> ChainIndexTx
setValidity :: Bool -> Tx era -> Tx era
fromCardanoTxOut :: IsCardanoEra era => TxOut CtxTx era -> ChainIndexTxOut
fromCardanoTxOutRefScript :: ReferenceScript era -> ReferenceScript


-- | The chain index' version of a transaction
module Plutus.ChainIndex.Tx
data ChainIndexTx
ChainIndexTx :: TxId -> [TxIn] -> ChainIndexTxOutputs -> !SlotRange -> Map DatumHash Datum -> Redeemers -> Map ScriptHash (Versioned Script) -> Maybe SomeCardanoApiTx -> ChainIndexTx

-- | The id of this transaction.
[_citxTxId] :: ChainIndexTx -> TxId

-- | The inputs to this transaction.
[_citxInputs] :: ChainIndexTx -> [TxIn]

-- | The outputs of this transaction, ordered so they can be referenced by
--   index.
[_citxOutputs] :: ChainIndexTx -> ChainIndexTxOutputs

-- | The <a>SlotRange</a> during which this transaction may be validated.
[_citxValidRange] :: ChainIndexTx -> !SlotRange

-- | Datum objects recorded on this transaction.
[_citxData] :: ChainIndexTx -> Map DatumHash Datum

-- | Redeemers of the minting scripts.
[_citxRedeemers] :: ChainIndexTx -> Redeemers

-- | The scripts (validator, stake validator or minting) part of cardano
--   tx.
[_citxScripts] :: ChainIndexTx -> Map ScriptHash (Versioned Script)

-- | The full Cardano API tx which was used to populate the rest of the
--   <a>ChainIndexTx</a> fields. Useful because <a>ChainIndexTx</a> doesn't
--   have all the details of the tx, so we keep it as a safety net. Might
--   be Nothing if we are in the emulator.
[_citxCardanoTx] :: ChainIndexTx -> Maybe SomeCardanoApiTx

-- | List of outputs of a transaction. There is only an optional collateral
--   output if the transaction is invalid.
data ChainIndexTxOutputs

-- | The transaction is invalid so there is maybe a collateral output.
InvalidTx :: Maybe ChainIndexTxOut -> ChainIndexTxOutputs
ValidTx :: [ChainIndexTxOut] -> ChainIndexTxOutputs
data ChainIndexTxOut
ChainIndexTxOut :: CardanoAddress -> Value -> OutputDatum -> ReferenceScript -> ChainIndexTxOut

-- | We can't use AddressInAnyEra here because of missing FromJson instance
--   for Byron era
[citoAddress] :: ChainIndexTxOut -> CardanoAddress
[citoValue] :: ChainIndexTxOut -> Value
[citoDatum] :: ChainIndexTxOut -> OutputDatum
[citoRefScript] :: ChainIndexTxOut -> ReferenceScript
data ReferenceScript
ReferenceScriptNone :: ReferenceScript
ReferenceScriptInAnyLang :: ScriptInAnyLang -> ReferenceScript

-- | Address with two kinds of credentials, normal and staking.
data Address
Address :: Credential -> Maybe StakingCredential -> Address
[addressCredential] :: Address -> Credential
[addressStakingCredential] :: Address -> Maybe StakingCredential

-- | The datum attached to an output: either nothing; a datum hash; or the
--   datum itself (an "inline datum").
data OutputDatum
NoOutputDatum :: OutputDatum
OutputDatumHash :: DatumHash -> OutputDatum
OutputDatum :: Datum -> OutputDatum

-- | A cryptocurrency value. This is a map from <a>CurrencySymbol</a>s to a
--   quantity of that currency.
--   
--   Operations on currencies are usually implemented <i>pointwise</i>.
--   That is, we apply the operation to the quantities for each currency in
--   turn. So when we add two <a>Value</a>s the resulting <a>Value</a> has,
--   for each currency, the sum of the quantities of <i>that particular</i>
--   currency in the argument <a>Value</a>. The effect of this is that the
--   currencies in the <a>Value</a> are "independent", and are operated on
--   separately.
--   
--   Whenever we need to get the quantity of a currency in a <a>Value</a>
--   where there is no explicit quantity of that currency in the
--   <a>Value</a>, then the quantity is taken to be zero.
--   
--   See note [Currencies] for more details.
newtype Value
Value :: Map CurrencySymbol (Map TokenName Integer) -> Value
[getValue] :: Value -> Map CurrencySymbol (Map TokenName Integer)

-- | Convert a <a>OnChainTx</a> to a <a>ChainIndexTx</a>. An invalid
--   <a>OnChainTx</a> will not produce any <a>ChainIndexTx</a> outputs and
--   the collateral inputs of the <a>OnChainTx</a> will be the inputs of
--   the <a>ChainIndexTx</a>.
fromOnChainTx :: OnChainTx -> ChainIndexTx

-- | Get tx outputs from tx.
txOuts :: ChainIndexTx -> [ChainIndexTxOut]

-- | Get tx output references from tx.
txOutRefs :: ChainIndexTx -> [TxOutRef]

-- | Get tx output references and tx outputs from tx.
txOutsWithRef :: ChainIndexTx -> [(ChainIndexTxOut, TxOutRef)]

-- | Get <a>Map</a> of tx outputs references to tx.
txOutRefMap :: ChainIndexTx -> Map TxOutRef (ChainIndexTxOut, ChainIndexTx)

-- | Get <a>Map</a> of tx outputs from tx for a specific address.
txOutRefMapForAddr :: CardanoAddress -> ChainIndexTx -> Map TxOutRef (ChainIndexTxOut, ChainIndexTx)
txRedeemersWithHash :: ChainIndexTx -> Map RedeemerHash Redeemer
validityFromChainIndex :: ChainIndexTx -> TxValidity
citxTxId :: Lens' ChainIndexTx TxId
citxInputs :: Lens' ChainIndexTx [TxIn]
citxOutputs :: Lens' ChainIndexTx ChainIndexTxOutputs
citxValidRange :: Lens' ChainIndexTx SlotRange
citxData :: Lens' ChainIndexTx (Map DatumHash Datum)
citxRedeemers :: Lens' ChainIndexTx Redeemers
citxScripts :: Lens' ChainIndexTx (Map ScriptHash (Versioned Script))
citxCardanoTx :: Lens' ChainIndexTx (Maybe SomeCardanoApiTx)
_InvalidTx :: Prism' ChainIndexTxOutputs (Maybe ChainIndexTxOut)
_ValidTx :: Prism' ChainIndexTxOutputs [ChainIndexTxOut]


-- | The disk state is the part of the chain index that is kept on disk.
--   This module defines an in-memory implementation of the disk state
--   which can be used in the emulator.
module Plutus.ChainIndex.Emulator.DiskState

-- | Data that we keep on disk. (This type is used for testing only - we
--   need other structures for the disk-backed storage)
data DiskState
dataMap :: Lens' DiskState (Map DatumHash Datum)
scriptMap :: Lens' DiskState (Map ScriptHash (Versioned Script))
redeemerMap :: Lens' DiskState (Map RedeemerHash Redeemer)
txMap :: Lens' DiskState (Map TxId ChainIndexTx)
addressMap :: Lens' DiskState CredentialMap
assetClassMap :: Lens' DiskState AssetClassMap

-- | The data we store on disk for a given <a>ChainIndexTx</a>
fromTx :: ChainIndexTx -> DiskState

-- | Set of transaction output references for each address.
data CredentialMap
unCredentialMap :: Iso' CredentialMap (Map Credential (Set TxOutRef))

-- | Set of transaction output references for each asset class.
data AssetClassMap
unAssetClassMap :: Iso' AssetClassMap (Map AssetClass (Set TxOutRef))
diagnostics :: DiskState -> Diagnostics
instance GHC.Base.Monoid Plutus.ChainIndex.Emulator.DiskState.DiskState
instance GHC.Base.Semigroup Plutus.ChainIndex.Emulator.DiskState.DiskState
instance GHC.Generics.Generic Plutus.ChainIndex.Emulator.DiskState.DiskState
instance GHC.Show.Show Plutus.ChainIndex.Emulator.DiskState.DiskState
instance GHC.Classes.Eq Plutus.ChainIndex.Emulator.DiskState.DiskState
instance Control.Lens.At.Ixed Plutus.ChainIndex.Emulator.DiskState.AssetClassMap
instance Control.Lens.At.At Plutus.ChainIndex.Emulator.DiskState.AssetClassMap
instance GHC.Base.Semigroup Plutus.ChainIndex.Emulator.DiskState.AssetClassMap
instance GHC.Base.Monoid Plutus.ChainIndex.Emulator.DiskState.AssetClassMap
instance GHC.Generics.Generic Plutus.ChainIndex.Emulator.DiskState.AssetClassMap
instance GHC.Show.Show Plutus.ChainIndex.Emulator.DiskState.AssetClassMap
instance GHC.Classes.Eq Plutus.ChainIndex.Emulator.DiskState.AssetClassMap
instance Control.Lens.At.Ixed Plutus.ChainIndex.Emulator.DiskState.CredentialMap
instance Control.Lens.At.At Plutus.ChainIndex.Emulator.DiskState.CredentialMap
instance GHC.Base.Semigroup Plutus.ChainIndex.Emulator.DiskState.CredentialMap
instance GHC.Base.Monoid Plutus.ChainIndex.Emulator.DiskState.CredentialMap
instance GHC.Generics.Generic Plutus.ChainIndex.Emulator.DiskState.CredentialMap
instance GHC.Show.Show Plutus.ChainIndex.Emulator.DiskState.CredentialMap
instance GHC.Classes.Eq Plutus.ChainIndex.Emulator.DiskState.CredentialMap

module Plutus.ChainIndex.DbSchema
data DatumRowT f
DatumRow :: Columnar f ByteString -> Columnar f ByteString -> DatumRowT f
[_datumRowHash] :: DatumRowT f -> Columnar f ByteString
[_datumRowDatum] :: DatumRowT f -> Columnar f ByteString
type DatumRow = DatumRowT Identity
data ScriptRowT f
ScriptRow :: Columnar f ByteString -> Columnar f ByteString -> ScriptRowT f
[_scriptRowHash] :: ScriptRowT f -> Columnar f ByteString
[_scriptRowScript] :: ScriptRowT f -> Columnar f ByteString
type ScriptRow = ScriptRowT Identity
data RedeemerRowT f
RedeemerRow :: Columnar f ByteString -> Columnar f ByteString -> RedeemerRowT f
[_redeemerRowHash] :: RedeemerRowT f -> Columnar f ByteString
[_redeemerRowRedeemer] :: RedeemerRowT f -> Columnar f ByteString
type RedeemerRow = RedeemerRowT Identity
data TxRowT f
TxRow :: Columnar f ByteString -> Columnar f ByteString -> TxRowT f
[_txRowTxId] :: TxRowT f -> Columnar f ByteString
[_txRowTx] :: TxRowT f -> Columnar f ByteString
type TxRow = TxRowT Identity
data AddressRowT f
AddressRow :: Columnar f ByteString -> Columnar f ByteString -> Columnar f ByteString -> AddressRowT f
[_addressRowCred] :: AddressRowT f -> Columnar f ByteString
[_addressRowOutRef] :: AddressRowT f -> Columnar f ByteString
[_addressRowDatumHash] :: AddressRowT f -> Columnar f ByteString
type AddressRow = AddressRowT Identity
data AssetClassRowT f
AssetClassRow :: Columnar f ByteString -> Columnar f ByteString -> AssetClassRowT f
[_assetClassRowAssetClass] :: AssetClassRowT f -> Columnar f ByteString
[_assetClassRowOutRef] :: AssetClassRowT f -> Columnar f ByteString
type AssetClassRow = AssetClassRowT Identity
data TipRowT f
TipRow :: Columnar f Word64 -> Columnar f ByteString -> Columnar f Word64 -> TipRowT f
[_tipRowSlot] :: TipRowT f -> Columnar f Word64
[_tipRowBlockId] :: TipRowT f -> Columnar f ByteString
[_tipRowBlockNumber] :: TipRowT f -> Columnar f Word64
type TipRow = TipRowT Identity
data UnspentOutputRowT f
UnspentOutputRow :: PrimaryKey TipRowT f -> Columnar f ByteString -> UnspentOutputRowT f
[_unspentOutputRowTip] :: UnspentOutputRowT f -> PrimaryKey TipRowT f
[_unspentOutputRowOutRef] :: UnspentOutputRowT f -> Columnar f ByteString
type UnspentOutputRow = UnspentOutputRowT Identity
data UnmatchedInputRowT f
UnmatchedInputRow :: PrimaryKey TipRowT f -> Columnar f ByteString -> UnmatchedInputRowT f
[_unmatchedInputRowTip] :: UnmatchedInputRowT f -> PrimaryKey TipRowT f
[_unmatchedInputRowOutRef] :: UnmatchedInputRowT f -> Columnar f ByteString
type UnmatchedInputRow = UnmatchedInputRowT Identity
data UtxoRowT f
UtxoRow :: Columnar f ByteString -> Columnar f ByteString -> UtxoRowT f
[_utxoRowOutRef] :: UtxoRowT f -> Columnar f ByteString
[_utxoRowTxOut] :: UtxoRowT f -> Columnar f ByteString
type UtxoRow = UtxoRowT Identity
data Db f
Db :: f (TableEntity DatumRowT) -> f (TableEntity ScriptRowT) -> f (TableEntity RedeemerRowT) -> f (TableEntity TxRowT) -> f (TableEntity UtxoRowT) -> f (TableEntity AddressRowT) -> f (TableEntity AssetClassRowT) -> f (TableEntity TipRowT) -> f (TableEntity UnspentOutputRowT) -> f (TableEntity UnmatchedInputRowT) -> Db f
[datumRows] :: Db f -> f (TableEntity DatumRowT)
[scriptRows] :: Db f -> f (TableEntity ScriptRowT)
[redeemerRows] :: Db f -> f (TableEntity RedeemerRowT)
[txRows] :: Db f -> f (TableEntity TxRowT)
[utxoOutRefRows] :: Db f -> f (TableEntity UtxoRowT)
[addressRows] :: Db f -> f (TableEntity AddressRowT)
[assetClassRows] :: Db f -> f (TableEntity AssetClassRowT)
[tipRows] :: Db f -> f (TableEntity TipRowT)
[unspentOutputRows] :: Db f -> f (TableEntity UnspentOutputRowT)
[unmatchedInputRows] :: Db f -> f (TableEntity UnmatchedInputRowT)
type AllTables (c :: * -> Constraint) f = (c (f (TableEntity DatumRowT)), c (f (TableEntity ScriptRowT)), c (f (TableEntity RedeemerRowT)), c (f (TableEntity TxRowT)), c (f (TableEntity UtxoRowT)), c (f (TableEntity AddressRowT)), c (f (TableEntity AssetClassRowT)), c (f (TableEntity TipRowT)), c (f (TableEntity UnspentOutputRowT)), c (f (TableEntity UnmatchedInputRowT)))
db :: DatabaseSettings Sqlite Db
checkedSqliteDb :: CheckedDatabaseSettings Sqlite Db

-- | Instances of <tt>HasDbType</tt> can be converted to types that can be
--   stored in the database. <a>toDbValue</a> and <a>fromDbValue</a> must
--   be inverses of each other.
class FromBackendRow Sqlite (DbType a) => HasDbType a where {
    type family DbType a;
}
toDbValue :: HasDbType a => a -> DbType a
fromDbValue :: HasDbType a => DbType a -> a
newtype Serialisable a
Serialisable :: a -> Serialisable a
[getSerialisable] :: Serialisable a -> a
instance Database.Beam.Schema.Tables.Beamable Plutus.ChainIndex.DbSchema.DatumRowT
instance GHC.Generics.Generic (Plutus.ChainIndex.DbSchema.DatumRowT f)
instance Database.Beam.Schema.Tables.Beamable (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.DatumRowT)
instance GHC.Generics.Generic (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.DatumRowT f)
instance Database.Beam.Schema.Tables.Beamable Plutus.ChainIndex.DbSchema.ScriptRowT
instance GHC.Generics.Generic (Plutus.ChainIndex.DbSchema.ScriptRowT f)
instance Database.Beam.Schema.Tables.Beamable (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.ScriptRowT)
instance GHC.Generics.Generic (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.ScriptRowT f)
instance Database.Beam.Schema.Tables.Beamable Plutus.ChainIndex.DbSchema.RedeemerRowT
instance GHC.Generics.Generic (Plutus.ChainIndex.DbSchema.RedeemerRowT f)
instance Database.Beam.Schema.Tables.Beamable (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.RedeemerRowT)
instance GHC.Generics.Generic (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.RedeemerRowT f)
instance Database.Beam.Schema.Tables.Beamable Plutus.ChainIndex.DbSchema.TxRowT
instance GHC.Generics.Generic (Plutus.ChainIndex.DbSchema.TxRowT f)
instance Database.Beam.Schema.Tables.Beamable (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.TxRowT)
instance GHC.Generics.Generic (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.TxRowT f)
instance Database.Beam.Schema.Tables.Beamable Plutus.ChainIndex.DbSchema.AddressRowT
instance GHC.Generics.Generic (Plutus.ChainIndex.DbSchema.AddressRowT f)
instance Database.Beam.Schema.Tables.Beamable (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.AddressRowT)
instance GHC.Generics.Generic (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.AddressRowT f)
instance Database.Beam.Schema.Tables.Beamable Plutus.ChainIndex.DbSchema.AssetClassRowT
instance GHC.Generics.Generic (Plutus.ChainIndex.DbSchema.AssetClassRowT f)
instance Database.Beam.Schema.Tables.Beamable (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.AssetClassRowT)
instance GHC.Generics.Generic (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.AssetClassRowT f)
instance Database.Beam.Schema.Tables.Beamable Plutus.ChainIndex.DbSchema.TipRowT
instance GHC.Generics.Generic (Plutus.ChainIndex.DbSchema.TipRowT f)
instance Database.Beam.Schema.Tables.Beamable (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.TipRowT)
instance GHC.Generics.Generic (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.TipRowT f)
instance Database.Beam.Schema.Tables.Beamable Plutus.ChainIndex.DbSchema.UnspentOutputRowT
instance GHC.Generics.Generic (Plutus.ChainIndex.DbSchema.UnspentOutputRowT f)
instance Database.Beam.Schema.Tables.Beamable (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.UnspentOutputRowT)
instance GHC.Generics.Generic (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.UnspentOutputRowT f)
instance Database.Beam.Schema.Tables.Beamable Plutus.ChainIndex.DbSchema.UnmatchedInputRowT
instance GHC.Generics.Generic (Plutus.ChainIndex.DbSchema.UnmatchedInputRowT f)
instance Database.Beam.Schema.Tables.Beamable (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.UnmatchedInputRowT)
instance GHC.Generics.Generic (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.UnmatchedInputRowT f)
instance Database.Beam.Schema.Tables.Beamable Plutus.ChainIndex.DbSchema.UtxoRowT
instance GHC.Generics.Generic (Plutus.ChainIndex.DbSchema.UtxoRowT f)
instance Database.Beam.Schema.Tables.Beamable (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.UtxoRowT)
instance GHC.Generics.Generic (Database.Beam.Schema.Tables.PrimaryKey Plutus.ChainIndex.DbSchema.UtxoRowT f)
instance Database.Beam.Schema.Tables.Database be Plutus.ChainIndex.DbSchema.Db
instance GHC.Generics.Generic (Plutus.ChainIndex.DbSchema.Db f)
instance Plutus.ChainIndex.DbSchema.AllTables GHC.Base.Semigroup f => GHC.Base.Semigroup (Plutus.ChainIndex.DbSchema.Db f)
instance Plutus.ChainIndex.DbSchema.AllTables GHC.Base.Monoid f => GHC.Base.Monoid (Plutus.ChainIndex.DbSchema.Db f)
instance Plutus.ChainIndex.DbSchema.HasDbType Plutus.V1.Ledger.Scripts.DatumHash
instance Plutus.ChainIndex.DbSchema.HasDbType Plutus.V1.Ledger.Scripts.ValidatorHash
instance Plutus.ChainIndex.DbSchema.HasDbType Plutus.V1.Ledger.Scripts.MintingPolicyHash
instance Plutus.ChainIndex.DbSchema.HasDbType Plutus.V1.Ledger.Scripts.RedeemerHash
instance Plutus.ChainIndex.DbSchema.HasDbType Plutus.V1.Ledger.Scripts.StakeValidatorHash
instance Plutus.ChainIndex.DbSchema.HasDbType Plutus.V1.Ledger.Tx.TxId
instance Plutus.ChainIndex.DbSchema.HasDbType Ledger.Blockchain.BlockId
instance Plutus.ChainIndex.DbSchema.HasDbType Plutus.V1.Ledger.Scripts.ScriptHash
instance Plutus.ChainIndex.DbSchema.HasDbType Plutus.V1.Ledger.Scripts.Datum
instance Plutus.ChainIndex.DbSchema.HasDbType Plutus.V1.Ledger.Scripts.Redeemer
instance Plutus.ChainIndex.DbSchema.HasDbType (Plutus.Script.Utils.Scripts.Versioned Plutus.V1.Ledger.Scripts.MintingPolicy)
instance Plutus.ChainIndex.DbSchema.HasDbType (Plutus.Script.Utils.Scripts.Versioned Plutus.V1.Ledger.Scripts.StakeValidator)
instance Plutus.ChainIndex.DbSchema.HasDbType (Plutus.Script.Utils.Scripts.Versioned Plutus.V1.Ledger.Scripts.Validator)
instance Plutus.ChainIndex.DbSchema.HasDbType (Plutus.Script.Utils.Scripts.Versioned Plutus.V1.Ledger.Scripts.Script)
instance Plutus.ChainIndex.DbSchema.HasDbType Plutus.ChainIndex.Types.ChainIndexTx
instance Plutus.ChainIndex.DbSchema.HasDbType Ledger.Tx.DecoratedTxOut
instance Plutus.ChainIndex.DbSchema.HasDbType Plutus.V1.Ledger.Tx.TxOutRef
instance Plutus.ChainIndex.DbSchema.HasDbType Plutus.ChainIndex.Types.ChainIndexTxOut
instance Plutus.ChainIndex.DbSchema.HasDbType Plutus.V1.Ledger.Credential.Credential
instance Plutus.ChainIndex.DbSchema.HasDbType Plutus.V1.Ledger.Value.AssetClass
instance Codec.Serialise.Class.Serialise a => Plutus.ChainIndex.DbSchema.HasDbType (Plutus.ChainIndex.DbSchema.Serialisable a)
instance Plutus.ChainIndex.DbSchema.HasDbType Data.ByteString.Internal.ByteString
instance Plutus.ChainIndex.DbSchema.HasDbType PlutusTx.Builtins.Internal.BuiltinByteString
instance Plutus.ChainIndex.DbSchema.HasDbType Ledger.Slot.Slot
instance Plutus.ChainIndex.DbSchema.HasDbType Plutus.ChainIndex.Types.BlockNumber
instance Plutus.ChainIndex.DbSchema.HasDbType Plutus.ChainIndex.Types.Tip
instance Plutus.ChainIndex.DbSchema.HasDbType (Plutus.V1.Ledger.Scripts.DatumHash, Plutus.V1.Ledger.Scripts.Datum)
instance Plutus.ChainIndex.DbSchema.HasDbType (Plutus.V1.Ledger.Scripts.ScriptHash, Plutus.Script.Utils.Scripts.Versioned Plutus.V1.Ledger.Scripts.Script)
instance Plutus.ChainIndex.DbSchema.HasDbType (Plutus.V1.Ledger.Scripts.RedeemerHash, Plutus.V1.Ledger.Scripts.Redeemer)
instance Plutus.ChainIndex.DbSchema.HasDbType (Plutus.V1.Ledger.Tx.TxId, Plutus.ChainIndex.Types.ChainIndexTx)
instance Plutus.ChainIndex.DbSchema.HasDbType (Plutus.V1.Ledger.Credential.Credential, Plutus.V1.Ledger.Tx.TxOutRef, GHC.Maybe.Maybe Plutus.V1.Ledger.Scripts.DatumHash)
instance Plutus.ChainIndex.DbSchema.HasDbType (Plutus.V1.Ledger.Value.AssetClass, Plutus.V1.Ledger.Tx.TxOutRef)
instance Database.Beam.Schema.Tables.Table Plutus.ChainIndex.DbSchema.UtxoRowT
instance Database.Beam.Schema.Tables.Table Plutus.ChainIndex.DbSchema.UnmatchedInputRowT
instance Database.Beam.Schema.Tables.Table Plutus.ChainIndex.DbSchema.UnspentOutputRowT
instance Database.Beam.Schema.Tables.Table Plutus.ChainIndex.DbSchema.TipRowT
instance Database.Beam.Schema.Tables.Table Plutus.ChainIndex.DbSchema.AssetClassRowT
instance Database.Beam.Schema.Tables.Table Plutus.ChainIndex.DbSchema.AddressRowT
instance Database.Beam.Schema.Tables.Table Plutus.ChainIndex.DbSchema.TxRowT
instance Database.Beam.Schema.Tables.Table Plutus.ChainIndex.DbSchema.RedeemerRowT
instance Database.Beam.Schema.Tables.Table Plutus.ChainIndex.DbSchema.ScriptRowT
instance Database.Beam.Schema.Tables.Table Plutus.ChainIndex.DbSchema.DatumRowT

module Plutus.ChainIndex.Api
type API = "healthcheck" :> Description "Is the server alive?" :> Get '[JSON] NoContent :<|> "from-hash" :> FromHashAPI :<|> "tx-out" :> Description "Get a transaction output from its reference." :> ReqBody '[JSON] TxOutRef :> Post '[JSON] DecoratedTxOut :<|> "unspent-tx-out" :> Description "Get a unspent transaction output from its reference." :> ReqBody '[JSON] TxOutRef :> Post '[JSON] DecoratedTxOut :<|> "tx" :> Description "Get a transaction from its id." :> ReqBody '[JSON] TxId :> Post '[JSON] ChainIndexTx :<|> "is-utxo" :> Description "Check if the reference is an UTxO." :> ReqBody '[JSON] TxOutRef :> Post '[JSON] IsUtxoResponse :<|> "utxo-at-address" :> Description "Get all UTxOs at an address." :> ReqBody '[JSON] UtxoAtAddressRequest :> Post '[JSON] UtxosResponse :<|> "unspent-txouts-at-address" :> Description "Get all unspent transaction output at an address." :> ReqBody '[JSON] QueryAtAddressRequest :> Post '[JSON] (QueryResponse [(TxOutRef, DecoratedTxOut)]) :<|> "datums-at-address" :> Description "Get all Datums at an address." :> ReqBody '[JSON] QueryAtAddressRequest :> Post '[JSON] (QueryResponse [Datum]) :<|> "utxo-with-currency" :> Description "Get all UTxOs with a currency." :> ReqBody '[JSON] UtxoWithCurrencyRequest :> Post '[JSON] UtxosResponse :<|> "txs" :> Description "Get transactions from a list of their ids." :> ReqBody '[JSON] [TxId] :> Post '[JSON] [ChainIndexTx] :<|> "txo-at-address" :> Description "Get TxOs at an address." :> ReqBody '[JSON] TxoAtAddressRequest :> Post '[JSON] TxosResponse :<|> "tip" :> Description "Get the current synced tip." :> Get '[JSON] Tip :<|> "collect-garbage" :> Description "Collect chain index garbage to free up space." :> Put '[JSON] NoContent :<|> "diagnostics" :> Description "Get the current stats of the chain index." :> Get '[JSON] Diagnostics
type FromHashAPI = "datum" :> Description "Get a datum from its hash." :> ReqBody '[JSON] DatumHash :> Post '[JSON] Datum :<|> "validator" :> Description "Get a validator script from its hash." :> ReqBody '[JSON] ValidatorHash :> Post '[JSON] (Versioned Validator) :<|> "minting-policy" :> Description "Get a minting policy from its hash." :> ReqBody '[JSON] MintingPolicyHash :> Post '[JSON] (Versioned MintingPolicy) :<|> "stake-validator" :> Description "Get a stake validator from its hash." :> ReqBody '[JSON] StakeValidatorHash :> Post '[JSON] (Versioned StakeValidator) :<|> "redeemer" :> Description "Get a redeemer from its hash." :> ReqBody '[JSON] RedeemerHash :> Post '[JSON] Redeemer
type FullAPI = API :<|> SwaggerAPI

-- | Response type for the is-utxo endpoint.
data IsUtxoResponse
IsUtxoResponse :: Tip -> Bool -> IsUtxoResponse
[$sel:currentTip:IsUtxoResponse] :: IsUtxoResponse -> Tip
[$sel:isUtxo:IsUtxoResponse] :: IsUtxoResponse -> Bool
type SwaggerAPI = "swagger" :> SwaggerSchemaUI "swagger-ui" "swagger.json"

-- | When requesting UTxOs of a given address, you need to provide the
--   address, and optionnally the number of elements per page and the last
--   item of the last requested page.
--   
--   Here's an example for requesting the first page:
--   
--   { "credential": { "tag": <a>PubKeyCredential</a>, "contents": {
--   "getPubKeyHash":
--   "88ff402b0522f27649ac742238c697c579beeb344eb723099d1f16ce" } } }
--   
--   or
--   
--   { "pageQuery": { "pageQuerySize": { "getPageSize": 10 } },
--   "credential": { "tag": <a>PubKeyCredential</a>, "contents": {
--   "getPubKeyHash":
--   "88ff402b0522f27649ac742238c697c579beeb344eb723099d1f16ce" } } }
--   
--   Here's an example for requesting the next page:
--   
--   { "pageQuery": { "pageQuerySize": { "getPageSize": 10 },
--   "pageQueryLastItem": { "txOutRefId": { "getTxId":
--   "009b8c674b878cc68bd1d40562c5f14cdbb21be9266f605cfb68ed978e1a965b" },
--   "txOutRefIdx": 0 } }, "credential": { "tag": <a>PubKeyCredential</a>,
--   "contents": { "getPubKeyHash":
--   "88ff402b0522f27649ac742238c697c579beeb344eb723099d1f16ce" } } }
data UtxoAtAddressRequest
UtxoAtAddressRequest :: Maybe (PageQuery TxOutRef) -> Credential -> UtxoAtAddressRequest
[$sel:pageQuery:UtxoAtAddressRequest] :: UtxoAtAddressRequest -> Maybe (PageQuery TxOutRef)
[$sel:credential:UtxoAtAddressRequest] :: UtxoAtAddressRequest -> Credential

-- | Response type for the utxo-{at-address|with-currency} endpoints.
data UtxosResponse
UtxosResponse :: Tip -> Page TxOutRef -> UtxosResponse
[$sel:currentTip:UtxosResponse] :: UtxosResponse -> Tip
[$sel:page:UtxosResponse] :: UtxosResponse -> Page TxOutRef

-- | See the comment on <a>UtxoAtAddressRequest</a>.
--   
--   The difference is using <tt>currency</tt> field instead of
--   <tt>credential</tt>. { "pageQuery": { ... }, "currency": {
--   "unAssetClass": [ { "unCurrencySymbol": "" }, { "unTokenName": "" } ]
--   } }
data UtxoWithCurrencyRequest
UtxoWithCurrencyRequest :: Maybe (PageQuery TxOutRef) -> AssetClass -> UtxoWithCurrencyRequest
[$sel:pageQuery:UtxoWithCurrencyRequest] :: UtxoWithCurrencyRequest -> Maybe (PageQuery TxOutRef)
[$sel:currency:UtxoWithCurrencyRequest] :: UtxoWithCurrencyRequest -> AssetClass
swagger :: forall dir api. Server api ~ Handler Value => Server (SwaggerSchemaUI' dir api)
data TxoAtAddressRequest
TxoAtAddressRequest :: Maybe (PageQuery TxOutRef) -> Credential -> TxoAtAddressRequest
[$sel:pageQuery:TxoAtAddressRequest] :: TxoAtAddressRequest -> Maybe (PageQuery TxOutRef)
[$sel:credential:TxoAtAddressRequest] :: TxoAtAddressRequest -> Credential

-- | Response type for the txo-at-address endpoint.
data TxosResponse
TxosResponse :: Page TxOutRef -> TxosResponse
[$sel:paget:TxosResponse] :: TxosResponse -> Page TxOutRef
data QueryAtAddressRequest
QueryAtAddressRequest :: Maybe (PageQuery TxOutRef) -> Credential -> QueryAtAddressRequest
[$sel:pageQuery:QueryAtAddressRequest] :: QueryAtAddressRequest -> Maybe (PageQuery TxOutRef)
[$sel:credential:QueryAtAddressRequest] :: QueryAtAddressRequest -> Credential

-- | generic response type endpoint This type is introduced to avoid
--   querying the chain index twice to obtain the expected info. Indeed, it
--   returns the next page query if more items are available
data QueryResponse a
QueryResponse :: a -> Maybe (PageQuery TxOutRef) -> QueryResponse a
[$sel:queryResult:QueryResponse] :: QueryResponse a -> a
[$sel:nextQuery:QueryResponse] :: QueryResponse a -> Maybe (PageQuery TxOutRef)

-- | Go through each <a>Page</a>s of <a>QueryResponse</a>, and collect the
--   results.
collectQueryResponse :: Monad m => (PageQuery TxOutRef -> m (QueryResponse a)) -> m [a]
instance Data.OpenApi.Internal.Schema.ToSchema Plutus.ChainIndex.Api.UtxoAtAddressRequest
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Api.UtxoAtAddressRequest
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Api.UtxoAtAddressRequest
instance GHC.Generics.Generic Plutus.ChainIndex.Api.UtxoAtAddressRequest
instance GHC.Classes.Eq Plutus.ChainIndex.Api.UtxoAtAddressRequest
instance GHC.Show.Show Plutus.ChainIndex.Api.UtxoAtAddressRequest
instance Data.OpenApi.Internal.Schema.ToSchema Plutus.ChainIndex.Api.UtxoWithCurrencyRequest
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Api.UtxoWithCurrencyRequest
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Api.UtxoWithCurrencyRequest
instance GHC.Generics.Generic Plutus.ChainIndex.Api.UtxoWithCurrencyRequest
instance GHC.Classes.Eq Plutus.ChainIndex.Api.UtxoWithCurrencyRequest
instance GHC.Show.Show Plutus.ChainIndex.Api.UtxoWithCurrencyRequest
instance Data.OpenApi.Internal.Schema.ToSchema Plutus.ChainIndex.Api.UtxosResponse
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Api.UtxosResponse
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Api.UtxosResponse
instance GHC.Generics.Generic Plutus.ChainIndex.Api.UtxosResponse
instance GHC.Classes.Eq Plutus.ChainIndex.Api.UtxosResponse
instance GHC.Show.Show Plutus.ChainIndex.Api.UtxosResponse
instance Data.OpenApi.Internal.Schema.ToSchema Plutus.ChainIndex.Api.IsUtxoResponse
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Api.IsUtxoResponse
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Api.IsUtxoResponse
instance GHC.Generics.Generic Plutus.ChainIndex.Api.IsUtxoResponse
instance GHC.Classes.Eq Plutus.ChainIndex.Api.IsUtxoResponse
instance GHC.Show.Show Plutus.ChainIndex.Api.IsUtxoResponse
instance Data.OpenApi.Internal.Schema.ToSchema Plutus.ChainIndex.Api.TxoAtAddressRequest
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Api.TxoAtAddressRequest
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Api.TxoAtAddressRequest
instance GHC.Generics.Generic Plutus.ChainIndex.Api.TxoAtAddressRequest
instance GHC.Classes.Eq Plutus.ChainIndex.Api.TxoAtAddressRequest
instance GHC.Show.Show Plutus.ChainIndex.Api.TxoAtAddressRequest
instance Data.OpenApi.Internal.Schema.ToSchema Plutus.ChainIndex.Api.TxosResponse
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Api.TxosResponse
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Api.TxosResponse
instance GHC.Generics.Generic Plutus.ChainIndex.Api.TxosResponse
instance GHC.Classes.Eq Plutus.ChainIndex.Api.TxosResponse
instance GHC.Show.Show Plutus.ChainIndex.Api.TxosResponse
instance Data.OpenApi.Internal.Schema.ToSchema Plutus.ChainIndex.Api.QueryAtAddressRequest
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.Api.QueryAtAddressRequest
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.Api.QueryAtAddressRequest
instance GHC.Generics.Generic Plutus.ChainIndex.Api.QueryAtAddressRequest
instance GHC.Classes.Eq Plutus.ChainIndex.Api.QueryAtAddressRequest
instance GHC.Show.Show Plutus.ChainIndex.Api.QueryAtAddressRequest
instance GHC.Classes.Eq a => GHC.Classes.Eq (Plutus.ChainIndex.Api.QueryResponse a)
instance GHC.Generics.Generic (Plutus.ChainIndex.Api.QueryResponse a)
instance GHC.Show.Show a => GHC.Show.Show (Plutus.ChainIndex.Api.QueryResponse a)
instance (Data.Aeson.Types.FromJSON.FromJSON a, GHC.Generics.Generic a) => Data.Aeson.Types.FromJSON.FromJSON (Plutus.ChainIndex.Api.QueryResponse a)
instance (Data.Aeson.Types.ToJSON.ToJSON a, GHC.Generics.Generic a) => Data.Aeson.Types.ToJSON.ToJSON (Plutus.ChainIndex.Api.QueryResponse a)
instance (Data.OpenApi.Internal.Schema.ToSchema a, GHC.Generics.Generic a) => Data.OpenApi.Internal.Schema.ToSchema (Plutus.ChainIndex.Api.QueryResponse a)


-- | Freer effects for querying and updating the chain index state.
module Plutus.ChainIndex.Effects
data ChainIndexQueryEffect r

-- | Get the datum from a datum hash (if available)
[DatumFromHash] :: DatumHash -> ChainIndexQueryEffect (Maybe Datum)

-- | Get the validator from a validator hash (if available)
[ValidatorFromHash] :: ValidatorHash -> ChainIndexQueryEffect (Maybe (Versioned Validator))

-- | Get the monetary policy from an MPS hash (if available)
[MintingPolicyFromHash] :: MintingPolicyHash -> ChainIndexQueryEffect (Maybe (Versioned MintingPolicy))

-- | Get the redeemer from a redeemer hash (if available)
[RedeemerFromHash] :: RedeemerHash -> ChainIndexQueryEffect (Maybe Redeemer)

-- | Get the stake validator from a stake validator hash (if available)
[StakeValidatorFromHash] :: StakeValidatorHash -> ChainIndexQueryEffect (Maybe (Versioned StakeValidator))

-- | Get the TxOut from a TxOutRef (if available)
[UnspentTxOutFromRef] :: TxOutRef -> ChainIndexQueryEffect (Maybe DecoratedTxOut)

-- | Get the TxOut from a TxOutRef (if available)
[TxOutFromRef] :: TxOutRef -> ChainIndexQueryEffect (Maybe DecoratedTxOut)

-- | Get the transaction for a tx ID
[TxFromTxId] :: TxId -> ChainIndexQueryEffect (Maybe ChainIndexTx)

-- | Whether a tx output is part of the UTXO set
[UtxoSetMembership] :: TxOutRef -> ChainIndexQueryEffect IsUtxoResponse

-- | Unspent outputs located at addresses with the given credential.
[UtxoSetAtAddress] :: PageQuery TxOutRef -> Credential -> ChainIndexQueryEffect UtxosResponse

-- | Get the unspent txouts located at an address This is to avoid multiple
--   queries from chain-index when using utxosAt
[UnspentTxOutSetAtAddress] :: PageQuery TxOutRef -> Credential -> ChainIndexQueryEffect (QueryResponse [(TxOutRef, DecoratedTxOut)])

-- | get the datums located at addresses with the given credential.
[DatumsAtAddress] :: PageQuery TxOutRef -> Credential -> ChainIndexQueryEffect (QueryResponse [Datum])

-- | Unspent outputs containing a specific currency (<a>AssetClass</a>).
--   
--   Note that requesting unspent outputs containing Ada should not return
--   anything, as this request will always return all unspent outputs.
[UtxoSetWithCurrency] :: PageQuery TxOutRef -> AssetClass -> ChainIndexQueryEffect UtxosResponse

-- | Get the transactions for a list of tx IDs.
[TxsFromTxIds] :: [TxId] -> ChainIndexQueryEffect [ChainIndexTx]

-- | Outputs located at addresses with the given credential.
[TxoSetAtAddress] :: PageQuery TxOutRef -> Credential -> ChainIndexQueryEffect TxosResponse

-- | Get the tip of the chain index
[GetTip] :: ChainIndexQueryEffect Tip
datumFromHash :: forall effs_a2qTx. Member ChainIndexQueryEffect effs_a2qTx => DatumHash -> Eff effs_a2qTx (Maybe Datum)
validatorFromHash :: forall effs_a2qTy. Member ChainIndexQueryEffect effs_a2qTy => ValidatorHash -> Eff effs_a2qTy (Maybe (Versioned Validator))
mintingPolicyFromHash :: forall effs_a2qTz. Member ChainIndexQueryEffect effs_a2qTz => MintingPolicyHash -> Eff effs_a2qTz (Maybe (Versioned MintingPolicy))
stakeValidatorFromHash :: forall effs_a2qTB. Member ChainIndexQueryEffect effs_a2qTB => StakeValidatorHash -> Eff effs_a2qTB (Maybe (Versioned StakeValidator))
redeemerFromHash :: forall effs_a2qTA. Member ChainIndexQueryEffect effs_a2qTA => RedeemerHash -> Eff effs_a2qTA (Maybe Redeemer)
txOutFromRef :: forall effs_a2qTD. Member ChainIndexQueryEffect effs_a2qTD => TxOutRef -> Eff effs_a2qTD (Maybe DecoratedTxOut)
unspentTxOutFromRef :: forall effs_a2qTC. Member ChainIndexQueryEffect effs_a2qTC => TxOutRef -> Eff effs_a2qTC (Maybe DecoratedTxOut)
txFromTxId :: forall effs_a2qTE. Member ChainIndexQueryEffect effs_a2qTE => TxId -> Eff effs_a2qTE (Maybe ChainIndexTx)
utxoSetMembership :: forall effs_a2qTF. Member ChainIndexQueryEffect effs_a2qTF => TxOutRef -> Eff effs_a2qTF IsUtxoResponse
utxoSetAtAddress :: forall effs_a2qTG. Member ChainIndexQueryEffect effs_a2qTG => PageQuery TxOutRef -> Credential -> Eff effs_a2qTG UtxosResponse
unspentTxOutSetAtAddress :: forall effs_a2qTH. Member ChainIndexQueryEffect effs_a2qTH => PageQuery TxOutRef -> Credential -> Eff effs_a2qTH (QueryResponse [(TxOutRef, DecoratedTxOut)])
datumsAtAddress :: forall effs_a2qTI. Member ChainIndexQueryEffect effs_a2qTI => PageQuery TxOutRef -> Credential -> Eff effs_a2qTI (QueryResponse [Datum])
utxoSetWithCurrency :: forall effs_a2qTJ. Member ChainIndexQueryEffect effs_a2qTJ => PageQuery TxOutRef -> AssetClass -> Eff effs_a2qTJ UtxosResponse
txoSetAtAddress :: forall effs_a2qTL. Member ChainIndexQueryEffect effs_a2qTL => PageQuery TxOutRef -> Credential -> Eff effs_a2qTL TxosResponse
txsFromTxIds :: forall effs_a2qTK. Member ChainIndexQueryEffect effs_a2qTK => [TxId] -> Eff effs_a2qTK [ChainIndexTx]
getTip :: forall effs_a2qTM. Member ChainIndexQueryEffect effs_a2qTM => Eff effs_a2qTM Tip
data ChainIndexControlEffect r

-- | Add new blocks to the chain index.
[AppendBlocks] :: [ChainSyncBlock] -> ChainIndexControlEffect ()

-- | Roll back to a previous state (previous tip)
[Rollback] :: Point -> ChainIndexControlEffect ()

-- | Resume syncing from a certain point
[ResumeSync] :: Point -> ChainIndexControlEffect ()

-- | Delete all data that is not covered by current UTxOs.
[CollectGarbage] :: ChainIndexControlEffect ()
[GetDiagnostics] :: ChainIndexControlEffect Diagnostics
appendBlocks :: forall effs_a2r4B. Member ChainIndexControlEffect effs_a2r4B => [ChainSyncBlock] -> Eff effs_a2r4B ()
rollback :: forall effs_a2r4C. Member ChainIndexControlEffect effs_a2r4C => Point -> Eff effs_a2r4C ()
resumeSync :: forall effs_a2r4D. Member ChainIndexControlEffect effs_a2r4D => Point -> Eff effs_a2r4D ()
collectGarbage :: forall effs_a2r4E. Member ChainIndexControlEffect effs_a2r4E => Eff effs_a2r4E ()
getDiagnostics :: forall effs_a2r4F. Member ChainIndexControlEffect effs_a2r4F => Eff effs_a2r4F Diagnostics

module Plutus.ChainIndex.Client

-- | Handle <a>ChainIndexQueryEffect</a> by making HTTP calls to a remote
--   server.
handleChainIndexClient :: forall m effs. (LastMember m effs, Member (Reader ClientEnv) effs, MonadIO m, Member (Error ClientError) effs) => ChainIndexQueryEffect ~> Eff effs
healthCheck :: ClientM NoContent
collectGarbage :: ClientM NoContent
getDatum :: DatumHash -> ClientM Datum
getValidator :: ValidatorHash -> ClientM (Versioned Validator)
getMintingPolicy :: MintingPolicyHash -> ClientM (Versioned MintingPolicy)
getStakeValidator :: StakeValidatorHash -> ClientM (Versioned StakeValidator)
getRedeemer :: RedeemerHash -> ClientM Redeemer
getTxOut :: TxOutRef -> ClientM DecoratedTxOut
getTx :: TxId -> ClientM ChainIndexTx
getUnspentTxOut :: TxOutRef -> ClientM DecoratedTxOut
getIsUtxo :: TxOutRef -> ClientM IsUtxoResponse
getUtxoSetAtAddress :: UtxoAtAddressRequest -> ClientM UtxosResponse
getUnspentTxOutsAtAddress :: QueryAtAddressRequest -> ClientM (QueryResponse [(TxOutRef, DecoratedTxOut)])
getUtxoSetWithCurrency :: UtxoWithCurrencyRequest -> ClientM UtxosResponse
getTxs :: [TxId] -> ClientM [ChainIndexTx]
getTxoSetAtAddress :: TxoAtAddressRequest -> ClientM TxosResponse
getTip :: ClientM Tip

module Plutus.ChainIndex.Compatibility
fromCardanoTip :: ChainTip -> Tip
fromCardanoPoint :: ChainPoint -> Point
toCardanoPoint :: Point -> Maybe ChainPoint
tipFromCardanoBlock :: BlockInMode CardanoMode -> Tip
fromCardanoSlot :: SlotNo -> Slot
fromCardanoBlockId :: Hash BlockHeader -> BlockId
toCardanoBlockId :: BlockId -> Maybe (Hash BlockHeader)
fromCardanoBlockHeader :: BlockHeader -> Tip
fromCardanoBlockNo :: BlockNo -> BlockNumber
fromCardanoBlock :: BlockInMode CardanoMode -> [ChainIndexTx]

module Cardano.Protocol.Socket.Client
data ChainSyncHandle event
ChainSyncHandle :: IO Slot -> (event -> Slot -> IO ()) -> ChainSyncHandle event
[cshCurrentSlot] :: ChainSyncHandle event -> IO Slot
[cshHandler] :: ChainSyncHandle event -> event -> Slot -> IO ()
data ChainSyncEvent
Resume :: !ChainPoint -> ChainSyncEvent
RollForward :: !BlockInMode CardanoMode -> !ChainTip -> ChainSyncEvent
RollBackward :: !ChainPoint -> !ChainTip -> ChainSyncEvent

-- | The <a>Slot</a> parameter here represents the <tt>current</tt> slot as
--   computed from the current time. There is also the slot where the block
--   was published, which is available from the <a>ChainSyncEvent</a>.
--   
--   Currently we are using this current slot everywhere, which is why I
--   leave it here, as a parameter.
type ChainSyncCallback = ChainSyncEvent -> Slot -> IO ()
data ClientMsg
Disconnected :: Text -> ClientMsg
Resumed :: Point -> ClientMsg
RolledForward :: Tip -> ClientMsg
RolledBackward :: Point -> ClientMsg
getCurrentSlot :: forall block. ChainSyncHandle block -> IO Slot

-- | Run the chain sync protocol to get access to the current slot number.
runChainSync' :: FilePath -> SlotConfig -> NetworkId -> [ChainPoint] -> IO (ChainSyncHandle ChainSyncEvent)
runChainSync :: FilePath -> Trace IO ClientMsg -> SlotConfig -> NetworkId -> [ChainPoint] -> (ChainSyncEvent -> IO ()) -> IO (ChainSyncHandle ChainSyncEvent)

-- | The client updates the application state when the protocol state
--   changes.
chainSyncClient :: Trace IO ClientMsg -> SlotConfig -> [ChainPoint] -> ChainSyncCallback -> ChainSyncClient (BlockInMode CardanoMode) ChainPoint ChainTip IO ()
instance Cardano.BM.Data.Tracer.ToObject Cardano.Protocol.Socket.Client.ClientMsg
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Protocol.Socket.Client.ClientMsg
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Protocol.Socket.Client.ClientMsg
instance GHC.Generics.Generic Cardano.Protocol.Socket.Client.ClientMsg
instance GHC.Show.Show Cardano.Protocol.Socket.Client.ClientMsg
instance GHC.Classes.Eq Cardano.Protocol.Socket.Client.ClientMsg

module Plutus.ChainIndex.ChainIndexLog
data ChainIndexLog
InsertionSuccess :: Tip -> InsertUtxoPosition -> ChainIndexLog
ConversionFailed :: FromCardanoError -> ChainIndexLog
RollbackSuccess :: Tip -> ChainIndexLog
Err :: ChainIndexError -> ChainIndexLog
TxNotFound :: TxId -> ChainIndexLog
TxOutNotFound :: TxOutRef -> ChainIndexLog
TipIsGenesis :: ChainIndexLog
NoDatumScriptAddr :: ChainIndexTxOut -> ChainIndexLog
BeamLogItem :: BeamLog -> ChainIndexLog

-- | Outcome of inserting a <tt>UtxoState</tt> into the utxo index
data InsertUtxoPosition

-- | The utxo state was added to the end. Returns the new index
InsertAtEnd :: InsertUtxoPosition

-- | The utxo state was added somewhere before the end. Returns the new
--   index and the tip
InsertBeforeEnd :: InsertUtxoPosition
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.ChainIndexLog.InsertUtxoPosition
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.ChainIndexLog.InsertUtxoPosition
instance GHC.Generics.Generic Plutus.ChainIndex.ChainIndexLog.InsertUtxoPosition
instance GHC.Show.Show Plutus.ChainIndex.ChainIndexLog.InsertUtxoPosition
instance GHC.Classes.Ord Plutus.ChainIndex.ChainIndexLog.InsertUtxoPosition
instance GHC.Classes.Eq Plutus.ChainIndex.ChainIndexLog.InsertUtxoPosition
instance Cardano.BM.Data.Tracer.ToObject Plutus.ChainIndex.ChainIndexLog.ChainIndexLog
instance Data.Aeson.Types.ToJSON.ToJSON Plutus.ChainIndex.ChainIndexLog.ChainIndexLog
instance Data.Aeson.Types.FromJSON.FromJSON Plutus.ChainIndex.ChainIndexLog.ChainIndexLog
instance GHC.Generics.Generic Plutus.ChainIndex.ChainIndexLog.ChainIndexLog
instance GHC.Show.Show Plutus.ChainIndex.ChainIndexLog.ChainIndexLog
instance GHC.Classes.Eq Plutus.ChainIndex.ChainIndexLog.ChainIndexLog
instance Prettyprinter.Internal.Pretty Plutus.ChainIndex.ChainIndexLog.ChainIndexLog
instance Prettyprinter.Internal.Pretty Plutus.ChainIndex.ChainIndexLog.InsertUtxoPosition


-- | The UTXO state, kept in memory by the chain index.
module Plutus.ChainIndex.UtxoState

-- | UTXO / ledger state, kept in memory. We are only interested in the
--   UTXO set, everything else is stored on disk. This is OK because we
--   don't need to validate transactions when they come in.
data UtxoState a
UtxoState :: a -> Tip -> UtxoState a
[_usTxUtxoData] :: UtxoState a -> a

-- | Tip of our chain sync client
[_usTip] :: UtxoState a -> Tip
usTxUtxoData :: forall a_a2zQj a_a2A2e. Lens (UtxoState a_a2zQj) (UtxoState a_a2A2e) a_a2zQj a_a2A2e
usTip :: forall a_a2zQj. Lens' (UtxoState a_a2zQj) Tip
type UtxoIndex a = FingerTree (BlockCount, UtxoState a) (UtxoState a)
utxoState :: Monoid a => UtxoIndex a -> UtxoState a
utxoBlockCount :: Monoid a => UtxoIndex a -> Int
tip :: UtxoState a -> Tip
viewTip :: Monoid a => UtxoIndex a -> Tip

-- | Is the given point earlier than the provided tip. Yes, if the point is
--   the genersis point, no if the tip is the genesis point, otherwise,
--   just compare the slots.
pointLessThanTip :: Point -> Tip -> Bool

-- | Outcome of inserting a <tt>UtxoState</tt> into the utxo index
data InsertUtxoPosition

-- | The utxo state was added to the end. Returns the new index
InsertAtEnd :: InsertUtxoPosition

-- | The utxo state was added somewhere before the end. Returns the new
--   index and the tip
InsertBeforeEnd :: InsertUtxoPosition
data InsertUtxoSuccess a
InsertUtxoSuccess :: UtxoIndex a -> InsertUtxoPosition -> InsertUtxoSuccess a
[newIndex] :: InsertUtxoSuccess a -> UtxoIndex a
[insertPosition] :: InsertUtxoSuccess a -> InsertUtxoPosition

-- | UTXO state could not be inserted into the chain index
data InsertUtxoFailed

-- | Insertion failed as there was already a block with the given number
DuplicateBlock :: Tip -> InsertUtxoFailed

-- | The <tt>_usTip</tt> field of the argument was 'Last Nothing'
InsertUtxoNoTip :: InsertUtxoFailed

-- | Insert a <a>UtxoState</a> into the index
insert :: (Monoid a, Eq a) => UtxoState a -> UtxoIndex a -> Either InsertUtxoFailed (InsertUtxoSuccess a)

-- | Reason why the <tt>rollback</tt> operation failed
data RollbackFailed

-- | Rollback failed because the utxo index had no tip (not synchronised)
RollbackNoTip :: RollbackFailed

-- | Unable to roll back to <tt>expectedTip</tt> because the tip at that
--   position was different
TipMismatch :: Tip -> Point -> RollbackFailed
[foundTip] :: RollbackFailed -> Tip
[targetPoint] :: RollbackFailed -> Point

-- | Unable to find the old tip
OldPointNotFound :: Point -> RollbackFailed
data RollbackResult a
RollbackResult :: Tip -> UtxoIndex a -> RollbackResult a
[newTip] :: RollbackResult a -> Tip
[rolledBackIndex] :: RollbackResult a -> UtxoIndex a

-- | Perform a rollback on the utxo index, with a callback to calculate the
--   new index.
rollbackWith :: Monoid a => (UtxoIndex a -> UtxoIndex a -> UtxoIndex a) -> Point -> UtxoIndex a -> Either RollbackFailed (RollbackResult a)
data ReduceBlockCountResult a
BlockCountNotReduced :: ReduceBlockCountResult a
ReduceBlockCountResult :: UtxoIndex a -> UtxoState a -> ReduceBlockCountResult a
[reducedIndex] :: ReduceBlockCountResult a -> UtxoIndex a
[combinedState] :: ReduceBlockCountResult a -> UtxoState a

-- | Reduce the number of <a>UtxoState</a>s. The given number is the
--   minimum, the index is reduced when it larger than twice that size. The
--   new index is prefixed with one <a>UtxoState</a> that contains the
--   combined state of the removed <a>UtxoState</a>s.
reduceBlockCount :: Monoid a => Depth -> UtxoIndex a -> ReduceBlockCountResult a
newtype BlockCount
BlockCount :: Int -> BlockCount
[getBlockCount] :: BlockCount -> Int
instance GHC.Base.Monoid Plutus.ChainIndex.UtxoState.BlockCount
instance GHC.Base.Semigroup Plutus.ChainIndex.UtxoState.BlockCount
instance GHC.Base.Monoid a => GHC.Base.Monoid (Plutus.ChainIndex.UtxoState.UtxoState a)
instance Prettyprinter.Internal.Pretty (Plutus.ChainIndex.UtxoState.InsertUtxoSuccess a)
instance GHC.Base.Monoid a => Data.FingerTree.Measured (Plutus.ChainIndex.UtxoState.BlockCount, Plutus.ChainIndex.UtxoState.UtxoState a) (Plutus.ChainIndex.UtxoState.UtxoState a)
instance GHC.Base.Semigroup a => GHC.Base.Semigroup (Plutus.ChainIndex.UtxoState.UtxoState a)
instance GHC.Classes.Eq a => GHC.Classes.Ord (Plutus.ChainIndex.UtxoState.UtxoState a)
instance Data.Aeson.Types.ToJSON.ToJSON a => Data.Aeson.Types.ToJSON.ToJSON (Plutus.ChainIndex.UtxoState.UtxoState a)
instance Data.Aeson.Types.FromJSON.FromJSON a => Data.Aeson.Types.FromJSON.FromJSON (Plutus.ChainIndex.UtxoState.UtxoState a)
instance GHC.Generics.Generic (Plutus.ChainIndex.UtxoState.UtxoState a)
instance GHC.Show.Show a => GHC.Show.Show (Plutus.ChainIndex.UtxoState.UtxoState a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Plutus.ChainIndex.UtxoState.UtxoState a)

module Plutus.ChainIndex.TxUtxoBalance
fromTx :: ChainIndexTx -> TxUtxoBalance

-- | Whether a <a>TxOutRef</a> is a member of the UTXO set (ie. unspent)
isUnspentOutput :: TxOutRef -> UtxoState TxUtxoBalance -> Bool

-- | The UTXO set
unspentOutputs :: UtxoState TxUtxoBalance -> Set TxOutRef

-- | <a>UtxoIndex</a> for a single block
fromBlock :: Tip -> [ChainIndexTx] -> UtxoState TxUtxoBalance

-- | Perform a rollback on the utxo index
rollback :: Point -> UtxoIndex TxUtxoBalance -> Either RollbackFailed (RollbackResult TxUtxoBalance)

module Plutus.ChainIndex.TxIdState

-- | Increase the depth of a tentatively confirmed transaction
increaseDepth :: TxStatus -> TxStatus

-- | The <a>TxStatus</a> of a transaction right after it was added to the
--   chain
initialStatus :: OnChainTx -> TxStatus

-- | Given the current block, compute the status for the given transaction
--   by checking to see if it has been deleted.
transactionStatus :: BlockNumber -> TxIdState -> TxId -> Either TxStatusFailure TxStatus
fromTx :: BlockNumber -> ChainIndexTx -> TxIdState
fromBlock :: Tip -> [ChainIndexTx] -> UtxoState TxIdState
rollback :: Point -> UtxoIndex TxIdState -> Either RollbackFailed (RollbackResult TxIdState)

-- | The depth (in blocks) after which a transaction cannot be rolled back
--   anymore
chainConstant :: Depth

-- | Drop everything older than <a>BlockNumber</a> in the index.
dropOlder :: Monoid a => BlockNumber -> UtxoIndex a -> UtxoIndex a

module Plutus.ChainIndex.TxOutBalance

-- | Given the current block, compute the status for the given transaction
--   output by getting the state of the transaction that produced it and
--   checking if the output is spent or unspent.
transactionOutputStatus :: BlockNumber -> TxIdState -> TxOutBalance -> TxOutRef -> Either TxStatusFailure TxOutStatus
transactionOutputState :: TxOutBalance -> TxOutRef -> Maybe TxOutState
fromTx :: ChainIndexTx -> TxOutBalance

-- | Whether a <a>TxOutRef</a> is a member of the UTXO set (ie. unspent)
isUnspentOutput :: TxOutRef -> UtxoState TxOutBalance -> Bool

-- | The UTXO set
unspentOutputs :: UtxoState TxOutBalance -> Set TxOutRef

-- | Whether a <a>TxOutRef</a> is a member of the spent tx output set.
isSpentOutput :: TxOutRef -> UtxoState TxOutBalance -> Bool

-- | The spent output set
spentOutputs :: UtxoState TxOutBalance -> Set TxOutRef

-- | <a>UtxoIndex</a> for a single block
fromBlock :: Tip -> [ChainIndexTx] -> UtxoState TxOutBalance

-- | Perform a rollback on the utxo index
rollback :: Point -> UtxoIndex TxOutBalance -> Either RollbackFailed (RollbackResult TxOutBalance)


-- | Handlers for the <a>ChainIndexQueryEffect</a> and the
--   <a>ChainIndexControlEffect</a>
module Plutus.ChainIndex.Handlers
handleQuery :: (Member (State ChainIndexState) effs, Member (BeamEffect Sqlite) effs, Member (Error ChainIndexError) effs, Member (LogMsg ChainIndexLog) effs) => ChainIndexQueryEffect ~> Eff effs
handleControl :: forall effs. (Member (State ChainIndexState) effs, Member (Reader Depth) effs, Member (BeamEffect Sqlite) effs, Member (Error ChainIndexError) effs, Member (LogMsg ChainIndexLog) effs) => ChainIndexControlEffect ~> Eff effs
restoreStateFromDb :: Member (BeamEffect Sqlite) effs => Eff effs ChainIndexState
getResumePoints :: Member (BeamEffect Sqlite) effs => Eff effs [ChainPoint]
type ChainIndexState = UtxoIndex TxUtxoBalance
instance GHC.Base.Semigroup (Plutus.ChainIndex.Handlers.InsertRows te)
instance Control.Monad.Freer.Extras.Beam.Common.BeamableDb Database.Beam.Sqlite.Connection.Sqlite t => GHC.Base.Monoid (Plutus.ChainIndex.Handlers.InsertRows (Database.Beam.Schema.Tables.TableEntity t))


-- | Handlers for the <a>ChainIndexQueryEffect</a> and the
--   <a>ChainIndexControlEffect</a> in the emulator
module Plutus.ChainIndex.Emulator.Handlers
handleQuery :: forall effs. (Member (State ChainIndexEmulatorState) effs, Member (Error ChainIndexError) effs, Member (LogMsg ChainIndexLog) effs) => ChainIndexQueryEffect ~> Eff effs
handleControl :: forall effs. (Member (State ChainIndexEmulatorState) effs, Member (Error ChainIndexError) effs, Member (LogMsg ChainIndexLog) effs) => ChainIndexControlEffect ~> Eff effs
data ChainIndexEmulatorState
ChainIndexEmulatorState :: DiskState -> UtxoIndex TxUtxoBalance -> ChainIndexEmulatorState
[_diskState] :: ChainIndexEmulatorState -> DiskState
[_utxoIndex] :: ChainIndexEmulatorState -> UtxoIndex TxUtxoBalance
diskState :: Lens' ChainIndexEmulatorState DiskState
utxoIndex :: Lens' ChainIndexEmulatorState (UtxoIndex TxUtxoBalance)
instance GHC.Base.Monoid Plutus.ChainIndex.Emulator.Handlers.ChainIndexEmulatorState
instance GHC.Base.Semigroup Plutus.ChainIndex.Emulator.Handlers.ChainIndexEmulatorState
instance GHC.Generics.Generic Plutus.ChainIndex.Emulator.Handlers.ChainIndexEmulatorState
instance GHC.Show.Show Plutus.ChainIndex.Emulator.Handlers.ChainIndexEmulatorState
instance GHC.Classes.Eq Plutus.ChainIndex.Emulator.Handlers.ChainIndexEmulatorState

module Plutus.Monitoring.Util

-- | Handle the <a>LogMsg</a> effect by logging messages to a <a>Trace</a>
handleLogMsgTrace :: forall a m effs. (LastMember m effs, MonadIO m) => Trace m a -> LogMsg a ~> Eff effs

-- | Handle the <a>LogMsg</a> effect by logging messages to a mapped
--   <a>Trace</a>
handleLogMsgTraceMap :: forall b a m effs. (LastMember m effs, MonadIO m) => (b -> a) -> Trace m a -> LogMsg b ~> Eff effs

-- | Handle the <a>LogObserve</a> effect using the <a>Monadic</a> observer
--   functions
handleObserveTrace :: forall effs m a. (LastMember m effs, MonadIO m, MonadCatch m) => Configuration -> Trace m a -> Eff (LogObserve (LogMessage Text) : effs) ~> Eff effs
runLogEffects :: forall m l. MonadIO m => Trace m l -> Eff '[LogMsg l, m] ~> m

-- | Convert tracer structured log data
convertLog :: (a -> b) -> Trace m b -> Trace m a
toSeverity :: LogLevel -> Severity

-- | A <a>ToObject</a> instance that uses <a>Pretty</a> as its
--   <a>textTransformer</a>
newtype PrettyObject t
PrettyObject :: t -> PrettyObject t
[unPrettyObject] :: PrettyObject t -> t
instance Data.Aeson.Types.FromJSON.FromJSON t => Data.Aeson.Types.FromJSON.FromJSON (Plutus.Monitoring.Util.PrettyObject t)
instance Data.Aeson.Types.ToJSON.ToJSON t => Data.Aeson.Types.ToJSON.ToJSON (Plutus.Monitoring.Util.PrettyObject t)
instance Prettyprinter.Internal.Pretty t => Cardano.BM.Data.Tracer.ToObject (Plutus.Monitoring.Util.PrettyObject t)
instance Prettyprinter.Internal.Pretty t => Data.Text.Class.ToText (Plutus.Monitoring.Util.PrettyObject t)

module Plutus.ChainIndex

-- | Run the chain index effects.
runChainIndexEffects :: RunRequirements -> Eff '[ChainIndexQueryEffect, ChainIndexControlEffect, BeamEffect Sqlite] a -> IO (Either ChainIndexError a)

-- | Handle the chain index effects from the set of all effects.
handleChainIndexEffects :: (LastMember IO effs, Member (LogMsg ChainIndexLog) effs) => RunRequirements -> Eff (ChainIndexQueryEffect : (ChainIndexControlEffect : (BeamEffect Sqlite : effs))) a -> Eff effs (Either ChainIndexError a)

-- | The required arguments to run the chain index effects.
data RunRequirements
RunRequirements :: Trace IO (PrettyObject ChainIndexLog) -> TVar ChainIndexState -> Pool Connection -> Int -> RunRequirements
[trace] :: RunRequirements -> Trace IO (PrettyObject ChainIndexLog)
[stateTVar] :: RunRequirements -> TVar ChainIndexState
[pool] :: RunRequirements -> Pool Connection
[securityParam] :: RunRequirements -> Int

-- | A cryptocurrency value. This is a map from <a>CurrencySymbol</a>s to a
--   quantity of that currency.
--   
--   Operations on currencies are usually implemented <i>pointwise</i>.
--   That is, we apply the operation to the quantities for each currency in
--   turn. So when we add two <a>Value</a>s the resulting <a>Value</a> has,
--   for each currency, the sum of the quantities of <i>that particular</i>
--   currency in the argument <a>Value</a>. The effect of this is that the
--   currencies in the <a>Value</a> are "independent", and are operated on
--   separately.
--   
--   Whenever we need to get the quantity of a currency in a <a>Value</a>
--   where there is no explicit quantity of that currency in the
--   <a>Value</a>, then the quantity is taken to be zero.
--   
--   See note [Currencies] for more details.
newtype Value
Value :: Map CurrencySymbol (Map TokenName Integer) -> Value
[getValue] :: Value -> Map CurrencySymbol (Map TokenName Integer)

-- | Given a <a>Set</a>, request the <a>Page</a> with the given
--   <a>PageQuery</a>.
pageOf :: Eq a => PageQuery a -> Set a -> Page a

-- | Query parameters for pagination.
data PageQuery a
PageQuery :: PageSize -> Maybe a -> PageQuery a

-- | Number of items per page.
[pageQuerySize] :: PageQuery a -> PageSize

-- | Last item of the queried page.
[pageQueryLastItem] :: PageQuery a -> Maybe a
newtype PageSize
PageSize :: Natural -> PageSize
[getPageSize] :: PageSize -> Natural

-- | Part of a collection.
data Page a
Page :: PageQuery a -> Maybe (PageQuery a) -> [a] -> Page a

-- | The <a>PageQuery</a> which was used to request this <a>Page</a>.
[currentPageQuery] :: Page a -> PageQuery a

-- | The <a>PageQuery</a> to use to request the next <a>Page</a>. Nothing
--   if we requested the last page.
[nextPageQuery] :: Page a -> Maybe (PageQuery a)

-- | Items in the current <a>Page</a>.
[pageItems] :: Page a -> [a]

-- | Block identifier (usually a hash)
newtype BlockId
BlockId :: ByteString -> BlockId
[getBlockId] :: BlockId -> ByteString

-- | Address with two kinds of credentials, normal and staking.
data Address
Address :: Credential -> Maybe StakingCredential -> Address
[addressCredential] :: Address -> Credential
[addressStakingCredential] :: Address -> Maybe StakingCredential

-- | The datum attached to an output: either nothing; a datum hash; or the
--   datum itself (an "inline datum").
data OutputDatum
NoOutputDatum :: OutputDatum
OutputDatumHash :: DatumHash -> OutputDatum
OutputDatum :: Datum -> OutputDatum

-- | List of outputs of a transaction. There is only an optional collateral
--   output if the transaction is invalid.
data ChainIndexTxOutputs

-- | The transaction is invalid so there is maybe a collateral output.
InvalidTx :: Maybe ChainIndexTxOut -> ChainIndexTxOutputs
ValidTx :: [ChainIndexTxOut] -> ChainIndexTxOutputs
data ChainIndexTxOut
ChainIndexTxOut :: CardanoAddress -> Value -> OutputDatum -> ReferenceScript -> ChainIndexTxOut

-- | We can't use AddressInAnyEra here because of missing FromJson instance
--   for Byron era
[citoAddress] :: ChainIndexTxOut -> CardanoAddress
[citoValue] :: ChainIndexTxOut -> Value
[citoDatum] :: ChainIndexTxOut -> OutputDatum
[citoRefScript] :: ChainIndexTxOut -> ReferenceScript
data ReferenceScript
ReferenceScriptNone :: ReferenceScript
ReferenceScriptInAnyLang :: ScriptInAnyLang -> ReferenceScript
fromReferenceScript :: ReferenceScript -> Maybe (Versioned Script)
data ChainIndexTx
ChainIndexTx :: TxId -> [TxIn] -> ChainIndexTxOutputs -> !SlotRange -> Map DatumHash Datum -> Redeemers -> Map ScriptHash (Versioned Script) -> Maybe SomeCardanoApiTx -> ChainIndexTx

-- | The id of this transaction.
[_citxTxId] :: ChainIndexTx -> TxId

-- | The inputs to this transaction.
[_citxInputs] :: ChainIndexTx -> [TxIn]

-- | The outputs of this transaction, ordered so they can be referenced by
--   index.
[_citxOutputs] :: ChainIndexTx -> ChainIndexTxOutputs

-- | The <a>SlotRange</a> during which this transaction may be validated.
[_citxValidRange] :: ChainIndexTx -> !SlotRange

-- | Datum objects recorded on this transaction.
[_citxData] :: ChainIndexTx -> Map DatumHash Datum

-- | Redeemers of the minting scripts.
[_citxRedeemers] :: ChainIndexTx -> Redeemers

-- | The scripts (validator, stake validator or minting) part of cardano
--   tx.
[_citxScripts] :: ChainIndexTx -> Map ScriptHash (Versioned Script)

-- | The full Cardano API tx which was used to populate the rest of the
--   <a>ChainIndexTx</a> fields. Useful because <a>ChainIndexTx</a> doesn't
--   have all the details of the tx, so we keep it as a safety net. Might
--   be Nothing if we are in the emulator.
[_citxCardanoTx] :: ChainIndexTx -> Maybe SomeCardanoApiTx
_InvalidTx :: Prism' ChainIndexTxOutputs (Maybe ChainIndexTxOut)
_ValidTx :: Prism' ChainIndexTxOutputs [ChainIndexTxOut]

-- | The tip of the chain index.
data Tip
TipAtGenesis :: Tip
Tip :: Slot -> BlockId -> BlockNumber -> Tip

-- | Last slot
[tipSlot] :: Tip -> Slot

-- | Last block ID
[tipBlockId] :: Tip -> BlockId

-- | Last block number
[tipBlockNo] :: Tip -> BlockNumber
newtype BlockNumber
BlockNumber :: Word64 -> BlockNumber
[unBlockNumber] :: BlockNumber -> Word64
citxCardanoTx :: Lens' ChainIndexTx (Maybe SomeCardanoApiTx)
citxData :: Lens' ChainIndexTx (Map DatumHash Datum)
citxInputs :: Lens' ChainIndexTx [TxIn]
citxOutputs :: Lens' ChainIndexTx ChainIndexTxOutputs
citxRedeemers :: Lens' ChainIndexTx Redeemers
citxScripts :: Lens' ChainIndexTx (Map ScriptHash (Versioned Script))
citxTxId :: Lens' ChainIndexTx TxId
citxValidRange :: Lens' ChainIndexTx SlotRange

-- | Compute a hash of the block's contents.
blockId :: Block -> BlockId

-- | When performing a rollback the chain sync protocol does not provide a
--   block number where to resume from.
data Point
PointAtGenesis :: Point
Point :: Slot -> BlockId -> Point

-- | Slot number
[pointSlot] :: Point -> Slot

-- | Block number
[pointBlockId] :: Point -> BlockId

-- | The effect of a transaction (or a number of them) on the tx output
--   set.
data TxOutBalance
TxOutBalance :: Set TxOutRef -> Map TxOutRef TxId -> TxOutBalance

-- | Outputs newly added by the transaction(s)
[_tobUnspentOutputs] :: TxOutBalance -> Set TxOutRef

-- | Outputs spent by the transaction(s) along with the tx id that spent it
[_tobSpentOutputs] :: TxOutBalance -> Map TxOutRef TxId
data TxConfirmedState
TxConfirmedState :: Sum Int -> Last BlockNumber -> Last TxValidity -> TxConfirmedState
[timesConfirmed] :: TxConfirmedState -> Sum Int
[blockAdded] :: TxConfirmedState -> Last BlockNumber
[validity] :: TxConfirmedState -> Last TxValidity
data TxIdState
TxIdState :: Map TxId TxConfirmedState -> Map TxId (Sum Int) -> TxIdState

-- | Number of times this transaction has been added as well as other
--   necessary metadata.
[txnsConfirmed] :: TxIdState -> Map TxId TxConfirmedState

-- | Number of times this transaction has been deleted.
[txnsDeleted] :: TxIdState -> Map TxId (Sum Int)

-- | Datatype returned when we couldn't get the state of a tx or a tx
--   output.
data TxStatusFailure

-- | We couldn't return the status because the <a>TxIdState</a> was in a
--   ... state ... that we didn't know how to decode in
--   <a>transactionStatus</a>.
TxIdStateInvalid :: BlockNumber -> TxId -> TxIdState -> TxStatusFailure

-- | We couldn't return the status because the <a>TxOutBalance</a> does not
--   contain the target tx output.
TxOutBalanceStateInvalid :: BlockNumber -> TxOutRef -> TxOutBalance -> TxStatusFailure
InvalidRollbackAttempt :: BlockNumber -> TxId -> TxIdState -> TxStatusFailure
data Diagnostics
Diagnostics :: Integer -> Integer -> Integer -> Integer -> Int -> Int -> [TxId] -> [ChainIndexTxOut] -> Diagnostics
[numTransactions] :: Diagnostics -> Integer
[numScripts] :: Diagnostics -> Integer
[numAddresses] :: Diagnostics -> Integer
[numAssetClasses] :: Diagnostics -> Integer
[numUnspentOutputs] :: Diagnostics -> Int
[numUnmatchedInputs] :: Diagnostics -> Int
[someTransactions] :: Diagnostics -> [TxId]
[unspentTxOuts] :: Diagnostics -> [ChainIndexTxOut]
data TxOutState
Spent :: TxId -> TxOutState
Unspent :: TxOutState
type TxOutStatus = RollbackState TxOutState

-- | The rollback state of a Cardano transaction
data RollbackState a

-- | The transaction is not on the chain. That's all we can say.
Unknown :: RollbackState a

-- | The transaction is on the chain, n blocks deep. It can still be rolled
--   back.
TentativelyConfirmed :: Depth -> TxValidity -> a -> RollbackState a

-- | The transaction is on the chain. It cannot be rolled back anymore.
Committed :: TxValidity -> a -> RollbackState a

-- | The status of a Cardano transaction
type TxStatus = RollbackState ()

-- | How many blocks deep the tx is on the chain
newtype Depth
Depth :: Int -> Depth
[unDepth] :: Depth -> Int

-- | Validity of a transaction that has been added to the ledger
data TxValidity
TxValid :: TxValidity
TxInvalid :: TxValidity
UnknownValidity :: TxValidity
_PointAtGenesis :: Prism' Point ()
_Point :: Prism' Point (Slot, BlockId)
tipAsPoint :: Tip -> Point
pointsToTip :: Point -> Tip -> Bool

-- | Maybe extract the <a>TxOutState</a> (Spent or Unspent) of a
--   <a>TxOutStatus</a>.
txOutStatusTxOutState :: TxOutStatus -> Maybe TxOutState

-- | Converts a <a>TxOutStatus</a> to a <a>TxStatus</a>. Possible since a
--   transaction output belongs to a transaction.
--   
--   Note, however, that we can't convert a <a>TxStatus</a> to a
--   <a>TxOutStatus</a>.
liftTxOutStatus :: TxOutStatus -> TxStatus

-- | The effect of a transaction (or a number of them) on the utxo set.
data TxUtxoBalance
TxUtxoBalance :: Set TxOutRef -> Set TxOutRef -> TxUtxoBalance

-- | Outputs newly added by the transaction(s)
[_tubUnspentOutputs] :: TxUtxoBalance -> Set TxOutRef

-- | Outputs spent by the transaction(s) that have no matching unspent
--   output
[_tubUnmatchedSpentInputs] :: TxUtxoBalance -> Set TxOutRef
tobSpentOutputs :: Lens' TxOutBalance (Map TxOutRef TxId)
tobUnspentOutputs :: Lens' TxOutBalance (Set TxOutRef)

-- | A block of transactions to be synced.
data ChainSyncBlock
Block :: Tip -> [(ChainIndexTx, TxProcessOption)] -> ChainSyncBlock
[blockTip] :: ChainSyncBlock -> Tip
[blockTxs] :: ChainSyncBlock -> [(ChainIndexTx, TxProcessOption)]

-- | User-customizable options to process a transaction. See #73 for more
--   motivations.
newtype TxProcessOption
TxProcessOption :: Bool -> TxProcessOption

-- | Should the chain index store this transaction or not. If not, only
--   handle the UTXOs. This, for example, allows applications to skip
--   unwanted pre-Alonzo transactions.
[tpoStoreTx] :: TxProcessOption -> Bool
tubUnmatchedSpentInputs :: Lens' TxUtxoBalance (Set TxOutRef)
tubUnspentOutputs :: Lens' TxUtxoBalance (Set TxOutRef)

-- | Reason why the <tt>rollback</tt> operation failed
data RollbackFailed

-- | Rollback failed because the utxo index had no tip (not synchronised)
RollbackNoTip :: RollbackFailed

-- | Unable to roll back to <tt>expectedTip</tt> because the tip at that
--   position was different
TipMismatch :: Tip -> Point -> RollbackFailed
[foundTip] :: RollbackFailed -> Tip
[targetPoint] :: RollbackFailed -> Point

-- | Unable to find the old tip
OldPointNotFound :: Point -> RollbackFailed

-- | UTXO state could not be inserted into the chain index
data InsertUtxoFailed

-- | Insertion failed as there was already a block with the given number
DuplicateBlock :: Tip -> InsertUtxoFailed

-- | The <tt>_usTip</tt> field of the argument was 'Last Nothing'
InsertUtxoNoTip :: InsertUtxoFailed
data ChainIndexError
InsertionFailed :: InsertUtxoFailed -> ChainIndexError
RollbackFailed :: RollbackFailed -> ChainIndexError
ResumeNotSupported :: ChainIndexError

-- | Query failed because the chain index does not have a tip (not
--   synchronised with node)
QueryFailedNoTip :: ChainIndexError
BeamEffectError :: BeamError -> ChainIndexError

-- | Get tx outputs from tx.
txOuts :: ChainIndexTx -> [ChainIndexTxOut]

-- | Get tx output references from tx.
txOutRefs :: ChainIndexTx -> [TxOutRef]

-- | Get tx output references and tx outputs from tx.
txOutsWithRef :: ChainIndexTx -> [(ChainIndexTxOut, TxOutRef)]

-- | Get <a>Map</a> of tx outputs references to tx.
txOutRefMap :: ChainIndexTx -> Map TxOutRef (ChainIndexTxOut, ChainIndexTx)

-- | Get <a>Map</a> of tx outputs from tx for a specific address.
txOutRefMapForAddr :: CardanoAddress -> ChainIndexTx -> Map TxOutRef (ChainIndexTxOut, ChainIndexTx)
validityFromChainIndex :: ChainIndexTx -> TxValidity

-- | Convert a <a>OnChainTx</a> to a <a>ChainIndexTx</a>. An invalid
--   <a>OnChainTx</a> will not produce any <a>ChainIndexTx</a> outputs and
--   the collateral inputs of the <a>OnChainTx</a> will be the inputs of
--   the <a>ChainIndexTx</a>.
fromOnChainTx :: OnChainTx -> ChainIndexTx
txRedeemersWithHash :: ChainIndexTx -> Map RedeemerHash Redeemer
data ChainIndexQueryEffect r

-- | Get the datum from a datum hash (if available)
[DatumFromHash] :: DatumHash -> ChainIndexQueryEffect (Maybe Datum)

-- | Get the validator from a validator hash (if available)
[ValidatorFromHash] :: ValidatorHash -> ChainIndexQueryEffect (Maybe (Versioned Validator))

-- | Get the monetary policy from an MPS hash (if available)
[MintingPolicyFromHash] :: MintingPolicyHash -> ChainIndexQueryEffect (Maybe (Versioned MintingPolicy))

-- | Get the redeemer from a redeemer hash (if available)
[RedeemerFromHash] :: RedeemerHash -> ChainIndexQueryEffect (Maybe Redeemer)

-- | Get the stake validator from a stake validator hash (if available)
[StakeValidatorFromHash] :: StakeValidatorHash -> ChainIndexQueryEffect (Maybe (Versioned StakeValidator))

-- | Get the TxOut from a TxOutRef (if available)
[UnspentTxOutFromRef] :: TxOutRef -> ChainIndexQueryEffect (Maybe DecoratedTxOut)

-- | Get the TxOut from a TxOutRef (if available)
[TxOutFromRef] :: TxOutRef -> ChainIndexQueryEffect (Maybe DecoratedTxOut)

-- | Get the transaction for a tx ID
[TxFromTxId] :: TxId -> ChainIndexQueryEffect (Maybe ChainIndexTx)

-- | Whether a tx output is part of the UTXO set
[UtxoSetMembership] :: TxOutRef -> ChainIndexQueryEffect IsUtxoResponse

-- | Unspent outputs located at addresses with the given credential.
[UtxoSetAtAddress] :: PageQuery TxOutRef -> Credential -> ChainIndexQueryEffect UtxosResponse

-- | Get the unspent txouts located at an address This is to avoid multiple
--   queries from chain-index when using utxosAt
[UnspentTxOutSetAtAddress] :: PageQuery TxOutRef -> Credential -> ChainIndexQueryEffect (QueryResponse [(TxOutRef, DecoratedTxOut)])

-- | get the datums located at addresses with the given credential.
[DatumsAtAddress] :: PageQuery TxOutRef -> Credential -> ChainIndexQueryEffect (QueryResponse [Datum])

-- | Unspent outputs containing a specific currency (<a>AssetClass</a>).
--   
--   Note that requesting unspent outputs containing Ada should not return
--   anything, as this request will always return all unspent outputs.
[UtxoSetWithCurrency] :: PageQuery TxOutRef -> AssetClass -> ChainIndexQueryEffect UtxosResponse

-- | Get the transactions for a list of tx IDs.
[TxsFromTxIds] :: [TxId] -> ChainIndexQueryEffect [ChainIndexTx]

-- | Outputs located at addresses with the given credential.
[TxoSetAtAddress] :: PageQuery TxOutRef -> Credential -> ChainIndexQueryEffect TxosResponse

-- | Get the tip of the chain index
[GetTip] :: ChainIndexQueryEffect Tip
data ChainIndexControlEffect r

-- | Add new blocks to the chain index.
[AppendBlocks] :: [ChainSyncBlock] -> ChainIndexControlEffect ()

-- | Roll back to a previous state (previous tip)
[Rollback] :: Point -> ChainIndexControlEffect ()

-- | Resume syncing from a certain point
[ResumeSync] :: Point -> ChainIndexControlEffect ()

-- | Delete all data that is not covered by current UTxOs.
[CollectGarbage] :: ChainIndexControlEffect ()
[GetDiagnostics] :: ChainIndexControlEffect Diagnostics
datumFromHash :: forall effs_a2qTx. Member ChainIndexQueryEffect effs_a2qTx => DatumHash -> Eff effs_a2qTx (Maybe Datum)
validatorFromHash :: forall effs_a2qTy. Member ChainIndexQueryEffect effs_a2qTy => ValidatorHash -> Eff effs_a2qTy (Maybe (Versioned Validator))
mintingPolicyFromHash :: forall effs_a2qTz. Member ChainIndexQueryEffect effs_a2qTz => MintingPolicyHash -> Eff effs_a2qTz (Maybe (Versioned MintingPolicy))
redeemerFromHash :: forall effs_a2qTA. Member ChainIndexQueryEffect effs_a2qTA => RedeemerHash -> Eff effs_a2qTA (Maybe Redeemer)
stakeValidatorFromHash :: forall effs_a2qTB. Member ChainIndexQueryEffect effs_a2qTB => StakeValidatorHash -> Eff effs_a2qTB (Maybe (Versioned StakeValidator))
unspentTxOutFromRef :: forall effs_a2qTC. Member ChainIndexQueryEffect effs_a2qTC => TxOutRef -> Eff effs_a2qTC (Maybe DecoratedTxOut)
txOutFromRef :: forall effs_a2qTD. Member ChainIndexQueryEffect effs_a2qTD => TxOutRef -> Eff effs_a2qTD (Maybe DecoratedTxOut)
txFromTxId :: forall effs_a2qTE. Member ChainIndexQueryEffect effs_a2qTE => TxId -> Eff effs_a2qTE (Maybe ChainIndexTx)
utxoSetMembership :: forall effs_a2qTF. Member ChainIndexQueryEffect effs_a2qTF => TxOutRef -> Eff effs_a2qTF IsUtxoResponse
utxoSetAtAddress :: forall effs_a2qTG. Member ChainIndexQueryEffect effs_a2qTG => PageQuery TxOutRef -> Credential -> Eff effs_a2qTG UtxosResponse
unspentTxOutSetAtAddress :: forall effs_a2qTH. Member ChainIndexQueryEffect effs_a2qTH => PageQuery TxOutRef -> Credential -> Eff effs_a2qTH (QueryResponse [(TxOutRef, DecoratedTxOut)])
datumsAtAddress :: forall effs_a2qTI. Member ChainIndexQueryEffect effs_a2qTI => PageQuery TxOutRef -> Credential -> Eff effs_a2qTI (QueryResponse [Datum])
utxoSetWithCurrency :: forall effs_a2qTJ. Member ChainIndexQueryEffect effs_a2qTJ => PageQuery TxOutRef -> AssetClass -> Eff effs_a2qTJ UtxosResponse
txsFromTxIds :: forall effs_a2qTK. Member ChainIndexQueryEffect effs_a2qTK => [TxId] -> Eff effs_a2qTK [ChainIndexTx]
txoSetAtAddress :: forall effs_a2qTL. Member ChainIndexQueryEffect effs_a2qTL => PageQuery TxOutRef -> Credential -> Eff effs_a2qTL TxosResponse
getTip :: forall effs_a2qTM. Member ChainIndexQueryEffect effs_a2qTM => Eff effs_a2qTM Tip
appendBlocks :: forall effs_a2r4B. Member ChainIndexControlEffect effs_a2r4B => [ChainSyncBlock] -> Eff effs_a2r4B ()
rollback :: forall effs_a2r4C. Member ChainIndexControlEffect effs_a2r4C => Point -> Eff effs_a2r4C ()
resumeSync :: forall effs_a2r4D. Member ChainIndexControlEffect effs_a2r4D => Point -> Eff effs_a2r4D ()
collectGarbage :: forall effs_a2r4E. Member ChainIndexControlEffect effs_a2r4E => Eff effs_a2r4E ()
getDiagnostics :: forall effs_a2r4F. Member ChainIndexControlEffect effs_a2r4F => Eff effs_a2r4F Diagnostics

-- | Outcome of inserting a <tt>UtxoState</tt> into the utxo index
data InsertUtxoPosition

-- | The utxo state was added to the end. Returns the new index
InsertAtEnd :: InsertUtxoPosition

-- | The utxo state was added somewhere before the end. Returns the new
--   index and the tip
InsertBeforeEnd :: InsertUtxoPosition
data ChainIndexLog
InsertionSuccess :: Tip -> InsertUtxoPosition -> ChainIndexLog
ConversionFailed :: FromCardanoError -> ChainIndexLog
RollbackSuccess :: Tip -> ChainIndexLog
Err :: ChainIndexError -> ChainIndexLog
TxNotFound :: TxId -> ChainIndexLog
TxOutNotFound :: TxOutRef -> ChainIndexLog
TipIsGenesis :: ChainIndexLog
NoDatumScriptAddr :: ChainIndexTxOut -> ChainIndexLog
BeamLogItem :: BeamLog -> ChainIndexLog

-- | UTXO / ledger state, kept in memory. We are only interested in the
--   UTXO set, everything else is stored on disk. This is OK because we
--   don't need to validate transactions when they come in.
data UtxoState a
UtxoState :: a -> Tip -> UtxoState a
[_usTxUtxoData] :: UtxoState a -> a

-- | Tip of our chain sync client
[_usTip] :: UtxoState a -> Tip
data ReduceBlockCountResult a
BlockCountNotReduced :: ReduceBlockCountResult a
ReduceBlockCountResult :: UtxoIndex a -> UtxoState a -> ReduceBlockCountResult a
[reducedIndex] :: ReduceBlockCountResult a -> UtxoIndex a
[combinedState] :: ReduceBlockCountResult a -> UtxoState a
data RollbackResult a
RollbackResult :: Tip -> UtxoIndex a -> RollbackResult a
[newTip] :: RollbackResult a -> Tip
[rolledBackIndex] :: RollbackResult a -> UtxoIndex a
data InsertUtxoSuccess a
InsertUtxoSuccess :: UtxoIndex a -> InsertUtxoPosition -> InsertUtxoSuccess a
[newIndex] :: InsertUtxoSuccess a -> UtxoIndex a
[insertPosition] :: InsertUtxoSuccess a -> InsertUtxoPosition
type UtxoIndex a = FingerTree (BlockCount, UtxoState a) (UtxoState a)
newtype BlockCount
BlockCount :: Int -> BlockCount
[getBlockCount] :: BlockCount -> Int
usTip :: forall a_a2zQj. Lens' (UtxoState a_a2zQj) Tip
usTxUtxoData :: forall a_a2zQj a_a2A2e. Lens (UtxoState a_a2zQj) (UtxoState a_a2A2e) a_a2zQj a_a2A2e
utxoState :: Monoid a => UtxoIndex a -> UtxoState a
utxoBlockCount :: Monoid a => UtxoIndex a -> Int
tip :: UtxoState a -> Tip
viewTip :: Monoid a => UtxoIndex a -> Tip

-- | Insert a <a>UtxoState</a> into the index
insert :: (Monoid a, Eq a) => UtxoState a -> UtxoIndex a -> Either InsertUtxoFailed (InsertUtxoSuccess a)

-- | Perform a rollback on the utxo index, with a callback to calculate the
--   new index.
rollbackWith :: Monoid a => (UtxoIndex a -> UtxoIndex a -> UtxoIndex a) -> Point -> UtxoIndex a -> Either RollbackFailed (RollbackResult a)

-- | Reduce the number of <a>UtxoState</a>s. The given number is the
--   minimum, the index is reduced when it larger than twice that size. The
--   new index is prefixed with one <a>UtxoState</a> that contains the
--   combined state of the removed <a>UtxoState</a>s.
reduceBlockCount :: Monoid a => Depth -> UtxoIndex a -> ReduceBlockCountResult a

-- | Is the given point earlier than the provided tip. Yes, if the point is
--   the genersis point, no if the tip is the genesis point, otherwise,
--   just compare the slots.
pointLessThanTip :: Point -> Tip -> Bool

-- | The <a>TxStatus</a> of a transaction right after it was added to the
--   chain
initialStatus :: OnChainTx -> TxStatus

-- | Increase the depth of a tentatively confirmed transaction
increaseDepth :: TxStatus -> TxStatus

-- | The depth (in blocks) after which a transaction cannot be rolled back
--   anymore
chainConstant :: Depth

-- | Drop everything older than <a>BlockNumber</a> in the index.
dropOlder :: Monoid a => BlockNumber -> UtxoIndex a -> UtxoIndex a

-- | Given the current block, compute the status for the given transaction
--   by checking to see if it has been deleted.
transactionStatus :: BlockNumber -> TxIdState -> TxId -> Either TxStatusFailure TxStatus

-- | Given the current block, compute the status for the given transaction
--   output by getting the state of the transaction that produced it and
--   checking if the output is spent or unspent.
transactionOutputStatus :: BlockNumber -> TxIdState -> TxOutBalance -> TxOutRef -> Either TxStatusFailure TxOutStatus
transactionOutputState :: TxOutBalance -> TxOutRef -> Maybe TxOutState

-- | The UTXO set
unspentOutputs :: UtxoState TxOutBalance -> Set TxOutRef

-- | The spent output set
spentOutputs :: UtxoState TxOutBalance -> Set TxOutRef
type ChainIndexState = UtxoIndex TxUtxoBalance
getResumePoints :: Member (BeamEffect Sqlite) effs => Eff effs [ChainPoint]
handleQuery :: (Member (State ChainIndexState) effs, Member (BeamEffect Sqlite) effs, Member (Error ChainIndexError) effs, Member (LogMsg ChainIndexLog) effs) => ChainIndexQueryEffect ~> Eff effs
handleControl :: forall effs. (Member (State ChainIndexState) effs, Member (Reader Depth) effs, Member (BeamEffect Sqlite) effs, Member (Error ChainIndexError) effs, Member (LogMsg ChainIndexLog) effs) => ChainIndexControlEffect ~> Eff effs
restoreStateFromDb :: Member (BeamEffect Sqlite) effs => Eff effs ChainIndexState

module Plutus.ChainIndex.Server
serveChainIndexQueryServer :: Int -> RunRequirements -> IO ()
serveChainIndex :: forall effs. (Member (Error ServerError) effs, Member ChainIndexQueryEffect effs, Member ChainIndexControlEffect effs) => ServerT API (Eff effs)

module Plutus.ChainIndex.Emulator.Server
serveChainIndexQueryServer :: Int -> TVar ChainIndexEmulatorState -> IO ()
serveChainIndex :: forall effs. (Member (Error ServerError) effs, Member ChainIndexQueryEffect effs, Member ChainIndexControlEffect effs) => ServerT API (Eff effs)

module Plutus.ChainIndex.Emulator

-- | Block identifier (usually a hash)
newtype BlockId
BlockId :: ByteString -> BlockId
[getBlockId] :: BlockId -> ByteString

-- | List of outputs of a transaction. There is only an optional collateral
--   output if the transaction is invalid.
data ChainIndexTxOutputs

-- | The transaction is invalid so there is maybe a collateral output.
InvalidTx :: Maybe ChainIndexTxOut -> ChainIndexTxOutputs
ValidTx :: [ChainIndexTxOut] -> ChainIndexTxOutputs
data ChainIndexTxOut
ChainIndexTxOut :: CardanoAddress -> Value -> OutputDatum -> ReferenceScript -> ChainIndexTxOut

-- | We can't use AddressInAnyEra here because of missing FromJson instance
--   for Byron era
[citoAddress] :: ChainIndexTxOut -> CardanoAddress
[citoValue] :: ChainIndexTxOut -> Value
[citoDatum] :: ChainIndexTxOut -> OutputDatum
[citoRefScript] :: ChainIndexTxOut -> ReferenceScript
data ReferenceScript
ReferenceScriptNone :: ReferenceScript
ReferenceScriptInAnyLang :: ScriptInAnyLang -> ReferenceScript
fromReferenceScript :: ReferenceScript -> Maybe (Versioned Script)
data ChainIndexTx
ChainIndexTx :: TxId -> [TxIn] -> ChainIndexTxOutputs -> !SlotRange -> Map DatumHash Datum -> Redeemers -> Map ScriptHash (Versioned Script) -> Maybe SomeCardanoApiTx -> ChainIndexTx

-- | The id of this transaction.
[_citxTxId] :: ChainIndexTx -> TxId

-- | The inputs to this transaction.
[_citxInputs] :: ChainIndexTx -> [TxIn]

-- | The outputs of this transaction, ordered so they can be referenced by
--   index.
[_citxOutputs] :: ChainIndexTx -> ChainIndexTxOutputs

-- | The <a>SlotRange</a> during which this transaction may be validated.
[_citxValidRange] :: ChainIndexTx -> !SlotRange

-- | Datum objects recorded on this transaction.
[_citxData] :: ChainIndexTx -> Map DatumHash Datum

-- | Redeemers of the minting scripts.
[_citxRedeemers] :: ChainIndexTx -> Redeemers

-- | The scripts (validator, stake validator or minting) part of cardano
--   tx.
[_citxScripts] :: ChainIndexTx -> Map ScriptHash (Versioned Script)

-- | The full Cardano API tx which was used to populate the rest of the
--   <a>ChainIndexTx</a> fields. Useful because <a>ChainIndexTx</a> doesn't
--   have all the details of the tx, so we keep it as a safety net. Might
--   be Nothing if we are in the emulator.
[_citxCardanoTx] :: ChainIndexTx -> Maybe SomeCardanoApiTx
_InvalidTx :: Prism' ChainIndexTxOutputs (Maybe ChainIndexTxOut)
_ValidTx :: Prism' ChainIndexTxOutputs [ChainIndexTxOut]

-- | The tip of the chain index.
data Tip
TipAtGenesis :: Tip
Tip :: Slot -> BlockId -> BlockNumber -> Tip

-- | Last slot
[tipSlot] :: Tip -> Slot

-- | Last block ID
[tipBlockId] :: Tip -> BlockId

-- | Last block number
[tipBlockNo] :: Tip -> BlockNumber
newtype BlockNumber
BlockNumber :: Word64 -> BlockNumber
[unBlockNumber] :: BlockNumber -> Word64
citxCardanoTx :: Lens' ChainIndexTx (Maybe SomeCardanoApiTx)
citxData :: Lens' ChainIndexTx (Map DatumHash Datum)
citxInputs :: Lens' ChainIndexTx [TxIn]
citxOutputs :: Lens' ChainIndexTx ChainIndexTxOutputs
citxRedeemers :: Lens' ChainIndexTx Redeemers
citxScripts :: Lens' ChainIndexTx (Map ScriptHash (Versioned Script))
citxTxId :: Lens' ChainIndexTx TxId
citxValidRange :: Lens' ChainIndexTx SlotRange

-- | Compute a hash of the block's contents.
blockId :: Block -> BlockId

-- | When performing a rollback the chain sync protocol does not provide a
--   block number where to resume from.
data Point
PointAtGenesis :: Point
Point :: Slot -> BlockId -> Point

-- | Slot number
[pointSlot] :: Point -> Slot

-- | Block number
[pointBlockId] :: Point -> BlockId

-- | The effect of a transaction (or a number of them) on the tx output
--   set.
data TxOutBalance
TxOutBalance :: Set TxOutRef -> Map TxOutRef TxId -> TxOutBalance

-- | Outputs newly added by the transaction(s)
[_tobUnspentOutputs] :: TxOutBalance -> Set TxOutRef

-- | Outputs spent by the transaction(s) along with the tx id that spent it
[_tobSpentOutputs] :: TxOutBalance -> Map TxOutRef TxId
data TxConfirmedState
TxConfirmedState :: Sum Int -> Last BlockNumber -> Last TxValidity -> TxConfirmedState
[timesConfirmed] :: TxConfirmedState -> Sum Int
[blockAdded] :: TxConfirmedState -> Last BlockNumber
[validity] :: TxConfirmedState -> Last TxValidity
data TxIdState
TxIdState :: Map TxId TxConfirmedState -> Map TxId (Sum Int) -> TxIdState

-- | Number of times this transaction has been added as well as other
--   necessary metadata.
[txnsConfirmed] :: TxIdState -> Map TxId TxConfirmedState

-- | Number of times this transaction has been deleted.
[txnsDeleted] :: TxIdState -> Map TxId (Sum Int)

-- | Datatype returned when we couldn't get the state of a tx or a tx
--   output.
data TxStatusFailure

-- | We couldn't return the status because the <a>TxIdState</a> was in a
--   ... state ... that we didn't know how to decode in
--   <a>transactionStatus</a>.
TxIdStateInvalid :: BlockNumber -> TxId -> TxIdState -> TxStatusFailure

-- | We couldn't return the status because the <a>TxOutBalance</a> does not
--   contain the target tx output.
TxOutBalanceStateInvalid :: BlockNumber -> TxOutRef -> TxOutBalance -> TxStatusFailure
InvalidRollbackAttempt :: BlockNumber -> TxId -> TxIdState -> TxStatusFailure
data Diagnostics
Diagnostics :: Integer -> Integer -> Integer -> Integer -> Int -> Int -> [TxId] -> [ChainIndexTxOut] -> Diagnostics
[numTransactions] :: Diagnostics -> Integer
[numScripts] :: Diagnostics -> Integer
[numAddresses] :: Diagnostics -> Integer
[numAssetClasses] :: Diagnostics -> Integer
[numUnspentOutputs] :: Diagnostics -> Int
[numUnmatchedInputs] :: Diagnostics -> Int
[someTransactions] :: Diagnostics -> [TxId]
[unspentTxOuts] :: Diagnostics -> [ChainIndexTxOut]
data TxOutState
Spent :: TxId -> TxOutState
Unspent :: TxOutState
type TxOutStatus = RollbackState TxOutState

-- | The rollback state of a Cardano transaction
data RollbackState a

-- | The transaction is not on the chain. That's all we can say.
Unknown :: RollbackState a

-- | The transaction is on the chain, n blocks deep. It can still be rolled
--   back.
TentativelyConfirmed :: Depth -> TxValidity -> a -> RollbackState a

-- | The transaction is on the chain. It cannot be rolled back anymore.
Committed :: TxValidity -> a -> RollbackState a

-- | The status of a Cardano transaction
type TxStatus = RollbackState ()

-- | How many blocks deep the tx is on the chain
newtype Depth
Depth :: Int -> Depth
[unDepth] :: Depth -> Int

-- | Validity of a transaction that has been added to the ledger
data TxValidity
TxValid :: TxValidity
TxInvalid :: TxValidity
UnknownValidity :: TxValidity
_PointAtGenesis :: Prism' Point ()
_Point :: Prism' Point (Slot, BlockId)
tipAsPoint :: Tip -> Point
pointsToTip :: Point -> Tip -> Bool

-- | Maybe extract the <a>TxOutState</a> (Spent or Unspent) of a
--   <a>TxOutStatus</a>.
txOutStatusTxOutState :: TxOutStatus -> Maybe TxOutState

-- | Converts a <a>TxOutStatus</a> to a <a>TxStatus</a>. Possible since a
--   transaction output belongs to a transaction.
--   
--   Note, however, that we can't convert a <a>TxStatus</a> to a
--   <a>TxOutStatus</a>.
liftTxOutStatus :: TxOutStatus -> TxStatus

-- | The effect of a transaction (or a number of them) on the utxo set.
data TxUtxoBalance
TxUtxoBalance :: Set TxOutRef -> Set TxOutRef -> TxUtxoBalance

-- | Outputs newly added by the transaction(s)
[_tubUnspentOutputs] :: TxUtxoBalance -> Set TxOutRef

-- | Outputs spent by the transaction(s) that have no matching unspent
--   output
[_tubUnmatchedSpentInputs] :: TxUtxoBalance -> Set TxOutRef
tobSpentOutputs :: Lens' TxOutBalance (Map TxOutRef TxId)
tobUnspentOutputs :: Lens' TxOutBalance (Set TxOutRef)

-- | A block of transactions to be synced.
data ChainSyncBlock
Block :: Tip -> [(ChainIndexTx, TxProcessOption)] -> ChainSyncBlock
[blockTip] :: ChainSyncBlock -> Tip
[blockTxs] :: ChainSyncBlock -> [(ChainIndexTx, TxProcessOption)]

-- | User-customizable options to process a transaction. See #73 for more
--   motivations.
newtype TxProcessOption
TxProcessOption :: Bool -> TxProcessOption

-- | Should the chain index store this transaction or not. If not, only
--   handle the UTXOs. This, for example, allows applications to skip
--   unwanted pre-Alonzo transactions.
[tpoStoreTx] :: TxProcessOption -> Bool
tubUnmatchedSpentInputs :: Lens' TxUtxoBalance (Set TxOutRef)
tubUnspentOutputs :: Lens' TxUtxoBalance (Set TxOutRef)

-- | Reason why the <tt>rollback</tt> operation failed
data RollbackFailed

-- | Rollback failed because the utxo index had no tip (not synchronised)
RollbackNoTip :: RollbackFailed

-- | Unable to roll back to <tt>expectedTip</tt> because the tip at that
--   position was different
TipMismatch :: Tip -> Point -> RollbackFailed
[foundTip] :: RollbackFailed -> Tip
[targetPoint] :: RollbackFailed -> Point

-- | Unable to find the old tip
OldPointNotFound :: Point -> RollbackFailed

-- | UTXO state could not be inserted into the chain index
data InsertUtxoFailed

-- | Insertion failed as there was already a block with the given number
DuplicateBlock :: Tip -> InsertUtxoFailed

-- | The <tt>_usTip</tt> field of the argument was 'Last Nothing'
InsertUtxoNoTip :: InsertUtxoFailed
data ChainIndexError
InsertionFailed :: InsertUtxoFailed -> ChainIndexError
RollbackFailed :: RollbackFailed -> ChainIndexError
ResumeNotSupported :: ChainIndexError

-- | Query failed because the chain index does not have a tip (not
--   synchronised with node)
QueryFailedNoTip :: ChainIndexError
BeamEffectError :: BeamError -> ChainIndexError

-- | Set of transaction output references for each address.
data CredentialMap

-- | Set of transaction output references for each asset class.
data AssetClassMap
unCredentialMap :: Iso' CredentialMap (Map Credential (Set TxOutRef))

-- | Data that we keep on disk. (This type is used for testing only - we
--   need other structures for the disk-backed storage)
data DiskState
unAssetClassMap :: Iso' AssetClassMap (Map AssetClass (Set TxOutRef))
addressMap :: Lens' DiskState CredentialMap
assetClassMap :: Lens' DiskState AssetClassMap
dataMap :: Lens' DiskState (Map DatumHash Datum)
redeemerMap :: Lens' DiskState (Map RedeemerHash Redeemer)
scriptMap :: Lens' DiskState (Map ScriptHash (Versioned Script))
txMap :: Lens' DiskState (Map TxId ChainIndexTx)
diagnostics :: DiskState -> Diagnostics
data ChainIndexQueryEffect r

-- | Get the datum from a datum hash (if available)
[DatumFromHash] :: DatumHash -> ChainIndexQueryEffect (Maybe Datum)

-- | Get the validator from a validator hash (if available)
[ValidatorFromHash] :: ValidatorHash -> ChainIndexQueryEffect (Maybe (Versioned Validator))

-- | Get the monetary policy from an MPS hash (if available)
[MintingPolicyFromHash] :: MintingPolicyHash -> ChainIndexQueryEffect (Maybe (Versioned MintingPolicy))

-- | Get the redeemer from a redeemer hash (if available)
[RedeemerFromHash] :: RedeemerHash -> ChainIndexQueryEffect (Maybe Redeemer)

-- | Get the stake validator from a stake validator hash (if available)
[StakeValidatorFromHash] :: StakeValidatorHash -> ChainIndexQueryEffect (Maybe (Versioned StakeValidator))

-- | Get the TxOut from a TxOutRef (if available)
[UnspentTxOutFromRef] :: TxOutRef -> ChainIndexQueryEffect (Maybe DecoratedTxOut)

-- | Get the TxOut from a TxOutRef (if available)
[TxOutFromRef] :: TxOutRef -> ChainIndexQueryEffect (Maybe DecoratedTxOut)

-- | Get the transaction for a tx ID
[TxFromTxId] :: TxId -> ChainIndexQueryEffect (Maybe ChainIndexTx)

-- | Whether a tx output is part of the UTXO set
[UtxoSetMembership] :: TxOutRef -> ChainIndexQueryEffect IsUtxoResponse

-- | Unspent outputs located at addresses with the given credential.
[UtxoSetAtAddress] :: PageQuery TxOutRef -> Credential -> ChainIndexQueryEffect UtxosResponse

-- | Get the unspent txouts located at an address This is to avoid multiple
--   queries from chain-index when using utxosAt
[UnspentTxOutSetAtAddress] :: PageQuery TxOutRef -> Credential -> ChainIndexQueryEffect (QueryResponse [(TxOutRef, DecoratedTxOut)])

-- | get the datums located at addresses with the given credential.
[DatumsAtAddress] :: PageQuery TxOutRef -> Credential -> ChainIndexQueryEffect (QueryResponse [Datum])

-- | Unspent outputs containing a specific currency (<a>AssetClass</a>).
--   
--   Note that requesting unspent outputs containing Ada should not return
--   anything, as this request will always return all unspent outputs.
[UtxoSetWithCurrency] :: PageQuery TxOutRef -> AssetClass -> ChainIndexQueryEffect UtxosResponse

-- | Get the transactions for a list of tx IDs.
[TxsFromTxIds] :: [TxId] -> ChainIndexQueryEffect [ChainIndexTx]

-- | Outputs located at addresses with the given credential.
[TxoSetAtAddress] :: PageQuery TxOutRef -> Credential -> ChainIndexQueryEffect TxosResponse

-- | Get the tip of the chain index
[GetTip] :: ChainIndexQueryEffect Tip
data ChainIndexControlEffect r

-- | Add new blocks to the chain index.
[AppendBlocks] :: [ChainSyncBlock] -> ChainIndexControlEffect ()

-- | Roll back to a previous state (previous tip)
[Rollback] :: Point -> ChainIndexControlEffect ()

-- | Resume syncing from a certain point
[ResumeSync] :: Point -> ChainIndexControlEffect ()

-- | Delete all data that is not covered by current UTxOs.
[CollectGarbage] :: ChainIndexControlEffect ()
[GetDiagnostics] :: ChainIndexControlEffect Diagnostics
datumFromHash :: forall effs_a2qTx. Member ChainIndexQueryEffect effs_a2qTx => DatumHash -> Eff effs_a2qTx (Maybe Datum)
validatorFromHash :: forall effs_a2qTy. Member ChainIndexQueryEffect effs_a2qTy => ValidatorHash -> Eff effs_a2qTy (Maybe (Versioned Validator))
mintingPolicyFromHash :: forall effs_a2qTz. Member ChainIndexQueryEffect effs_a2qTz => MintingPolicyHash -> Eff effs_a2qTz (Maybe (Versioned MintingPolicy))
redeemerFromHash :: forall effs_a2qTA. Member ChainIndexQueryEffect effs_a2qTA => RedeemerHash -> Eff effs_a2qTA (Maybe Redeemer)
stakeValidatorFromHash :: forall effs_a2qTB. Member ChainIndexQueryEffect effs_a2qTB => StakeValidatorHash -> Eff effs_a2qTB (Maybe (Versioned StakeValidator))
unspentTxOutFromRef :: forall effs_a2qTC. Member ChainIndexQueryEffect effs_a2qTC => TxOutRef -> Eff effs_a2qTC (Maybe DecoratedTxOut)
txOutFromRef :: forall effs_a2qTD. Member ChainIndexQueryEffect effs_a2qTD => TxOutRef -> Eff effs_a2qTD (Maybe DecoratedTxOut)
txFromTxId :: forall effs_a2qTE. Member ChainIndexQueryEffect effs_a2qTE => TxId -> Eff effs_a2qTE (Maybe ChainIndexTx)
utxoSetMembership :: forall effs_a2qTF. Member ChainIndexQueryEffect effs_a2qTF => TxOutRef -> Eff effs_a2qTF IsUtxoResponse
utxoSetAtAddress :: forall effs_a2qTG. Member ChainIndexQueryEffect effs_a2qTG => PageQuery TxOutRef -> Credential -> Eff effs_a2qTG UtxosResponse
unspentTxOutSetAtAddress :: forall effs_a2qTH. Member ChainIndexQueryEffect effs_a2qTH => PageQuery TxOutRef -> Credential -> Eff effs_a2qTH (QueryResponse [(TxOutRef, DecoratedTxOut)])
datumsAtAddress :: forall effs_a2qTI. Member ChainIndexQueryEffect effs_a2qTI => PageQuery TxOutRef -> Credential -> Eff effs_a2qTI (QueryResponse [Datum])
utxoSetWithCurrency :: forall effs_a2qTJ. Member ChainIndexQueryEffect effs_a2qTJ => PageQuery TxOutRef -> AssetClass -> Eff effs_a2qTJ UtxosResponse
txsFromTxIds :: forall effs_a2qTK. Member ChainIndexQueryEffect effs_a2qTK => [TxId] -> Eff effs_a2qTK [ChainIndexTx]
txoSetAtAddress :: forall effs_a2qTL. Member ChainIndexQueryEffect effs_a2qTL => PageQuery TxOutRef -> Credential -> Eff effs_a2qTL TxosResponse
getTip :: forall effs_a2qTM. Member ChainIndexQueryEffect effs_a2qTM => Eff effs_a2qTM Tip
appendBlocks :: forall effs_a2r4B. Member ChainIndexControlEffect effs_a2r4B => [ChainSyncBlock] -> Eff effs_a2r4B ()
rollback :: forall effs_a2r4C. Member ChainIndexControlEffect effs_a2r4C => Point -> Eff effs_a2r4C ()
resumeSync :: forall effs_a2r4D. Member ChainIndexControlEffect effs_a2r4D => Point -> Eff effs_a2r4D ()
collectGarbage :: forall effs_a2r4E. Member ChainIndexControlEffect effs_a2r4E => Eff effs_a2r4E ()
getDiagnostics :: forall effs_a2r4F. Member ChainIndexControlEffect effs_a2r4F => Eff effs_a2r4F Diagnostics

-- | Outcome of inserting a <tt>UtxoState</tt> into the utxo index
data InsertUtxoPosition

-- | The utxo state was added to the end. Returns the new index
InsertAtEnd :: InsertUtxoPosition

-- | The utxo state was added somewhere before the end. Returns the new
--   index and the tip
InsertBeforeEnd :: InsertUtxoPosition
data ChainIndexLog
InsertionSuccess :: Tip -> InsertUtxoPosition -> ChainIndexLog
ConversionFailed :: FromCardanoError -> ChainIndexLog
RollbackSuccess :: Tip -> ChainIndexLog
Err :: ChainIndexError -> ChainIndexLog
TxNotFound :: TxId -> ChainIndexLog
TxOutNotFound :: TxOutRef -> ChainIndexLog
TipIsGenesis :: ChainIndexLog
NoDatumScriptAddr :: ChainIndexTxOut -> ChainIndexLog
BeamLogItem :: BeamLog -> ChainIndexLog
data ChainIndexEmulatorState
ChainIndexEmulatorState :: DiskState -> UtxoIndex TxUtxoBalance -> ChainIndexEmulatorState
[_diskState] :: ChainIndexEmulatorState -> DiskState
[_utxoIndex] :: ChainIndexEmulatorState -> UtxoIndex TxUtxoBalance
diskState :: Lens' ChainIndexEmulatorState DiskState
utxoIndex :: Lens' ChainIndexEmulatorState (UtxoIndex TxUtxoBalance)
handleQuery :: forall effs. (Member (State ChainIndexEmulatorState) effs, Member (Error ChainIndexError) effs, Member (LogMsg ChainIndexLog) effs) => ChainIndexQueryEffect ~> Eff effs
handleControl :: forall effs. (Member (State ChainIndexEmulatorState) effs, Member (Error ChainIndexError) effs, Member (LogMsg ChainIndexLog) effs) => ChainIndexControlEffect ~> Eff effs
serveChainIndex :: forall effs. (Member (Error ServerError) effs, Member ChainIndexQueryEffect effs, Member ChainIndexControlEffect effs) => ServerT API (Eff effs)
serveChainIndexQueryServer :: Int -> TVar ChainIndexEmulatorState -> IO ()

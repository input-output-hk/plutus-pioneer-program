-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Ledger Constraints
--   
--   Plutus transaction constraints library
@package plutus-ledger-constraints
@version 1.1.0.0

module Ledger.Constraints.ValidityInterval

-- | <a>ValidityInterval</a> is a half open interval. Closed (inclusive) on
--   the bottom, open (exclusive) on the top. A <a>Nothing</a> on the
--   bottom is negative infinity, and a <a>Nothing</a> on the top is
--   positive infinity.
data ValidityInterval a
ValidityInterval :: !Maybe a -> !Maybe a -> ValidityInterval a

-- | Inclusive lower bound or negative infinity
[invalidBefore] :: ValidityInterval a -> !Maybe a

-- | Exclusive upper bound or positive infinity
[invalidHereafter] :: ValidityInterval a -> !Maybe a

-- | <tt>interval a b</tt> includes all values that are greater than or
--   equal to <tt>a</tt> and smaller than <tt>b</tt>. In math. notation:
--   [a,b)
interval :: a -> a -> ValidityInterval a

-- | <tt>from a</tt> is an <a>ValidityInterval</a> that includes all values
--   that are greater than or equal to <tt>a</tt>. In math. notation:
--   [a,+∞]
from :: a -> ValidityInterval a

-- | <tt>lessThan a</tt> is an <a>ValidityInterval</a> that includes all
--   values that are smaller than <tt>a</tt>. In math. notation: [-∞,a)
lessThan :: a -> ValidityInterval a
fromLowerBound :: Enum a => LowerBound a -> Maybe a
fromUpperBound :: Enum a => UpperBound a -> Maybe a
fromPlutusInterval :: Enum a => Interval a -> ValidityInterval a
toLowerBound :: Maybe a -> LowerBound a
toUpperBound :: Maybe a -> UpperBound a
toPlutusInterval :: ValidityInterval a -> Interval a
instance Data.Aeson.Types.FromJSON.FromJSON a => Data.Aeson.Types.FromJSON.FromJSON (Ledger.Constraints.ValidityInterval.ValidityInterval a)
instance Data.Aeson.Types.ToJSON.ToJSON a => Data.Aeson.Types.ToJSON.ToJSON (Ledger.Constraints.ValidityInterval.ValidityInterval a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Ledger.Constraints.ValidityInterval.ValidityInterval a)
instance GHC.Generics.Generic (Ledger.Constraints.ValidityInterval.ValidityInterval a)
instance GHC.Show.Show a => GHC.Show.Show (Ledger.Constraints.ValidityInterval.ValidityInterval a)
instance PlutusTx.Functor.Functor Ledger.Constraints.ValidityInterval.ValidityInterval


-- | Constraints for transactions
module Ledger.Constraints.TxConstraints

-- | How tx outs datum are embedded in a a Tx
--   
--   We do not use <a>TxOutDatum</a> from cardano-node to provide easier to
--   handel type (we don't type witnesses) and to have a distinction at the
--   type leve between constraints that require a Datum and constraints
--   (like <tt>MustPayToOtherScript</tt>) with an optional datum (like
--   <tt>MustPayToPubKeyAddress</tt>).
data TxOutDatum datum

-- | A datum specified in a transaction output using only it's hash, i.e.
--   the datum is not inlined nor is it added in the transaction body.
TxOutDatumHash :: datum -> TxOutDatum datum

-- | A datum specified in a transaction output using it's hash, while also
--   adding the actual datum in the transaction body.
TxOutDatumInTx :: datum -> TxOutDatum datum

-- | A datum inlined in a transaction output. It is *not* added in the
--   transaction body.
TxOutDatumInline :: datum -> TxOutDatum datum
getTxOutDatum :: TxOutDatum d -> d
isTxOutDatumHash :: TxOutDatum d -> Bool
isTxOutDatumInTx :: TxOutDatum d -> Bool
isTxOutDatumInline :: TxOutDatum d -> Bool

-- | Constraints on transactions that want to spend script outputs
data TxConstraint

-- | The provided <a>DatumHash</a> and <a>Datum</a> must be included in the
--   transaction body. Like <a>MustIncludeDatumInTx</a>, but useful when
--   you already have a <a>DatumHash</a> and want to make sure that is is
--   the actual hash of the <a>Datum</a>.
MustIncludeDatumInTxWithHash :: DatumHash -> Datum -> TxConstraint

-- | Like <tt>MustHashDatum</tt>, but the hash of the <a>Datum</a> is
--   computed automatically.
MustIncludeDatumInTx :: Datum -> TxConstraint

-- | The transaction's validity range must be set with the given
--   <a>POSIXTimeRange</a>.
MustValidateInTimeRange :: !ValidityInterval POSIXTime -> TxConstraint

-- | The transaction must add the given <a>PaymentPubKeyHash</a> in its
--   signatories.
MustBeSignedBy :: PaymentPubKeyHash -> TxConstraint

-- | The sum of the transaction's input <a>Value</a>s must be at least as
--   much as the given <a>Value</a>.
MustSpendAtLeast :: Value -> TxConstraint

-- | The sum of the transaction's output <a>Value</a>s must be at least as
--   much as the given <a>Value</a>.
MustProduceAtLeast :: Value -> TxConstraint

-- | The transaction must spend the given unspent transaction public key
--   output.
MustSpendPubKeyOutput :: TxOutRef -> TxConstraint

-- | The transaction must spend the given unspent transaction script
--   output.
MustSpendScriptOutput :: TxOutRef -> Redeemer -> Maybe TxOutRef -> TxConstraint

-- | The transaction must include the utxo as collateral input.
MustUseOutputAsCollateral :: TxOutRef -> TxConstraint

-- | The transaction must reference (not spend) the given unspent
--   transaction output.
MustReferenceOutput :: TxOutRef -> TxConstraint

-- | The transaction must mint the given token and amount.
MustMintValue :: MintingPolicyHash -> Redeemer -> TokenName -> Integer -> Maybe TxOutRef -> TxConstraint

-- | The transaction must create a transaction output.
MustPayToAddress :: Address -> Maybe (TxOutDatum Datum) -> Maybe ScriptHash -> Value -> TxConstraint

-- | The transaction must satisfy constraints given as an alternative of
--   conjuctions (DNF), that is `check (MustSatisfyAnyOf xs) = any (all
--   check) xs`
MustSatisfyAnyOf :: [[TxConstraint]] -> TxConstraint

-- | Constraints on transactions that contain functions. These don't
--   support conversion to and from JSON.
data TxConstraintFun

-- | The transaction must spend a script output from the given script
--   address which matches the <tt>Datum</tt> and <tt>Value</tt>
--   predicates.
MustSpendScriptOutputWithMatchingDatumAndValue :: ValidatorHash -> (Datum -> Bool) -> (Value -> Bool) -> Redeemer -> TxConstraintFun
newtype TxConstraintFuns
TxConstraintFuns :: [TxConstraintFun] -> TxConstraintFuns

-- | Constraint which specifies that the transaction must spend a
--   transaction output from a target script.
data ScriptInputConstraint a
ScriptInputConstraint :: a -> TxOutRef -> Maybe TxOutRef -> ScriptInputConstraint a

-- | The typed <a>Redeemer</a> to be used with the target script
[icRedeemer] :: ScriptInputConstraint a -> a

-- | The UTXO to be spent by the target script
[icTxOutRef] :: ScriptInputConstraint a -> TxOutRef

-- | Optionally use a reference script as witness
[icReferenceTxOutRef] :: ScriptInputConstraint a -> Maybe TxOutRef

-- | <tt>mustSpendOutputFromTheScript txOutRef red</tt> spends the
--   transaction output <tt>txOutRef</tt> with a script address using the
--   redeemer <tt>red</tt>.
--   
--   If used in <a>OffChain</a>, this constraint spends a script output
--   <tt>txOutRef</tt> with redeemer <tt>red</tt>. The script address is
--   derived from the typed validator that is provided in the
--   <a>ScriptLookups</a> with <a>typedValidatorLookups</a>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the spend
--   script transaction output with <tt>red</tt> is part of the
--   transaction's inputs.
mustSpendOutputFromTheScript :: TxOutRef -> i -> TxConstraints i o
data ScriptOutputConstraint a
ScriptOutputConstraint :: TxOutDatum a -> Value -> Maybe ScriptHash -> ScriptOutputConstraint a

-- | Typed datum to be used with the target script
[ocDatum] :: ScriptOutputConstraint a -> TxOutDatum a
[ocValue] :: ScriptOutputConstraint a -> Value
[ocReferenceScriptHash] :: ScriptOutputConstraint a -> Maybe ScriptHash

-- | Restrictions placed on the allocation of funds to outputs of
--   transactions.
data TxConstraints i o
TxConstraints :: [TxConstraint] -> TxConstraintFuns -> [ScriptInputConstraint i] -> [ScriptOutputConstraint o] -> TxConstraints i o
[txConstraints] :: TxConstraints i o -> [TxConstraint]
[txConstraintFuns] :: TxConstraints i o -> TxConstraintFuns
[txOwnInputs] :: TxConstraints i o -> [ScriptInputConstraint i]
[txOwnOutputs] :: TxConstraints i o -> [ScriptOutputConstraint o]
type UntypedConstraints = TxConstraints BuiltinData BuiltinData
singleton :: TxConstraint -> TxConstraints i o

-- | <tt>mustValidateIn r</tt> requires the transaction's validity time
--   range to be contained in POSIXTimeRange <tt>r</tt>.
--   
--   If used in <a>OffChain</a>, this constraint sets the transaction's
--   validity time range to <tt>r</tt>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the time
--   range <tt>r</tt> is entirely contained in the transaction's validity
--   time range.

-- | <i>Deprecated: Please use mustValidateInTimeRange or
--   mustValidateInSlotRange instead</i>
mustValidateIn :: forall i o. POSIXTimeRange -> TxConstraints i o

-- | <tt>mustValidateInTimeRange r</tt> requires the transaction's validity
--   time range to be contained in POSIXTime range <tt>r</tt>.
--   
--   If used in <a>OffChain</a>, this constraint sets the transaction's
--   validity time range to <tt>r</tt>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the time
--   range <tt>r</tt> is entirely contained in the transaction's validity
--   time range.
mustValidateInTimeRange :: forall i o. ValidityInterval POSIXTime -> TxConstraints i o

-- | <tt>mustValidateInSlotRange r</tt> requires the transaction's validity
--   slot range to be contained in Slot range <tt>r</tt>.
--   
--   If used in <a>OffChain</a>, this constraint sets the transaction's
--   validity slot range to <tt>r</tt>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the slot
--   range <tt>r</tt> is entirely contained in the transaction's validity
--   time range.
mustValidateInSlotRange :: forall i o. ValidityInterval Slot -> TxConstraints i o

-- | <tt>mustBeSignedBy pk</tt> requires the transaction to be signed by
--   the public key <tt>pk</tt>.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>pk</tt> in the
--   transaction's public key witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>pk</tt>
--   is part of the transaction's public key witness set.
mustBeSignedBy :: forall i o. PaymentPubKeyHash -> TxConstraints i o

-- | <tt>mustIncludeDatumInTxWithHash dh d</tt> requires the transaction
--   body to include the datum hash <tt>dh</tt> and actual datum
--   <tt>d</tt>.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>dh</tt> and
--   <tt>d</tt> in the transaction's body.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>dh</tt>
--   and <tt>d</tt> are part of the transaction's body.
mustIncludeDatumInTxWithHash :: DatumHash -> Datum -> TxConstraints i o

-- | <tt>mustIncludeDatumInTx d</tt> requires the transaction body to
--   include the datum <tt>d</tt>.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>d</tt> in the
--   transaction's body alongside it's hash (which is computed
--   automatically).
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the transaction's body.
mustIncludeDatumInTx :: forall i o. Datum -> TxConstraints i o

-- | <i>Deprecated: Use mustPayToTheScriptWithDatumHash instead</i>
mustPayToTheScript :: o -> Value -> TxConstraints i o

-- | <tt>mustPayToTheScriptWithDatumHash d v</tt> locks the value
--   <tt>v</tt> with a script alongside a datum <tt>d</tt> which is
--   included in the transaction body.
--   
--   If used in <a>OffChain</a>, this constraint creates a script output
--   with <tt>dt</tt> and <tt>vl</tt> and adds <tt>dt</tt> in the
--   transaction's datum witness set. The script address is derived from
--   the typed validator that is provided in the <a>ScriptLookups</a> with
--   <a>typedValidatorLookups</a>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the new script transaction
--   output with <tt>dt</tt> and <tt>vt</tt> is part of the transaction's
--   outputs.
mustPayToTheScriptWithDatumHash :: o -> Value -> TxConstraints i o
mustPayToTheScriptWithDatumInTx :: o -> Value -> TxConstraints i o
mustPayToTheScriptWithInlineDatum :: o -> Value -> TxConstraints i o

-- | <tt>mustPayToPubKey pkh v</tt> is the same as
--   <a>mustPayToPubKeyAddressWithDatumHash</a>, but without any staking
--   key hash and datum.
mustPayToPubKey :: forall i o. PaymentPubKeyHash -> Value -> TxConstraints i o

-- | <tt>mustPayToPubKeyAddress pkh skh v</tt> is the same as
--   <a>mustPayToPubKeyAddressWithDatumHash</a>, but without any datum.
mustPayToPubKeyAddress :: forall i o. PaymentPubKeyHash -> StakingCredential -> Value -> TxConstraints i o

-- | <i>Deprecated: Use mustPayToPubKeyWithDatumHash instead</i>
mustPayWithDatumToPubKey :: forall i o. PaymentPubKeyHash -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToPubKeyWithDatumHash pkh d v</tt> is the same as
--   <a>mustPayToPubKeyAddressWithDatumHash</a>, but without the staking
--   key hash.
mustPayToPubKeyWithDatumHash :: forall i o. PaymentPubKeyHash -> Datum -> Value -> TxConstraints i o

-- | <i>Deprecated: Use mustPayToPubKeyWithDatumInTx instead</i>
mustPayWithDatumInTxToPubKey :: forall i o. PaymentPubKeyHash -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToPubKeyWithDatumInTx pkh d v</tt> is the same as
--   <a>mustPayToPubKeyAddressWithDatumHash</a>, but with an inline datum
--   and without the staking key hash.
mustPayToPubKeyWithDatumInTx :: forall i o. PaymentPubKeyHash -> Datum -> Value -> TxConstraints i o

-- | <i>Deprecated: Use mustPayToPubKeyWithInlineDatum instead</i>
mustPayWithInlineDatumToPubKey :: forall i o. PaymentPubKeyHash -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToPubKeyWithInlineDatum pkh d v</tt> is the same as
--   <a>mustPayToPubKeyAddressWithDatumHash</a>, but with an inline datum
--   and without the staking key hash.
mustPayToPubKeyWithInlineDatum :: forall i o. PaymentPubKeyHash -> Datum -> Value -> TxConstraints i o

-- | <i>Deprecated: Use mustPayToPubKeyAddressWithDatumHash instead</i>
mustPayWithDatumToPubKeyAddress :: forall i o. PaymentPubKeyHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToPubKeyAddressWithDatumHash pkh skh d v</tt> locks a
--   transaction output with a public key address.
--   
--   If used in <a>OffChain</a>, this constraint creates a public key
--   output with <tt>pkh</tt>, <tt>skh</tt>, <tt>d</tt> and <tt>v</tt> and
--   maybe adds <tt>d</tt> in the transaction's datum witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the public key transaction
--   output with <tt>pkh</tt>, <tt>skh</tt>, <tt>d</tt> and <tt>v</tt> is
--   part of the transaction's outputs.
mustPayToPubKeyAddressWithDatumHash :: forall i o. PaymentPubKeyHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <i>Deprecated: Use mustPayToPubKeyAddressWithDatumInTx instead</i>
mustPayWithDatumInTxToPubKeyAddress :: forall i o. PaymentPubKeyHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToPubKeyAddressWithDatumInTx pkh d v</tt> is the same as
--   <a>mustPayToPubKeyAddressWithDatumHash</a>, but the datum is also
--   added in the transaction body.
mustPayToPubKeyAddressWithDatumInTx :: forall i o. PaymentPubKeyHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <i>Deprecated: Use mustPayToPubKeyAddressWithInlineDatum instead</i>
mustPayWithInlineDatumToPubKeyAddress :: forall i o. PaymentPubKeyHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayWithInlineInlineDatumToPubKeyAddress pkh d v</tt> is the
--   same as <a>mustPayToPubKeyAddressWithInlineDatum</a>, but the datum is
--   inline in the Tx.
mustPayToPubKeyAddressWithInlineDatum :: forall i o. PaymentPubKeyHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToAddressWithReferenceValidator</tt> is a helper that calls
--   <tt>mustPayToAddressWithReferenceScript</tt>.
mustPayToAddressWithReferenceValidator :: forall i o. Address -> ValidatorHash -> Maybe (TxOutDatum Datum) -> Value -> TxConstraints i o

-- | <tt>mustPayToAddressWithReferenceMintingPolicy</tt> is a helper that
--   calls <tt>mustPayToAddressWithReferenceScript</tt>.
mustPayToAddressWithReferenceMintingPolicy :: forall i o. Address -> MintingPolicyHash -> Maybe (TxOutDatum Datum) -> Value -> TxConstraints i o

-- | <tt>mustPayToAddressWithReferenceScript addr scriptHash d v</tt>
--   creates a transaction output with an reference script. This allows the
--   script to be used as a reference script.
--   
--   If used in <a>OffChain</a>, this constraint creates an output with
--   <tt>addr</tt>, <tt>scriptHash</tt>, <tt>d</tt> and <tt>v</tt> and
--   maybe adds <tt>d</tt> in the transaction's datum witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the transaction output with
--   <tt>addr</tt>, <tt>scriptHash</tt>, <tt>d</tt> and <tt>v</tt> is part
--   of the transaction's outputs.
mustPayToAddressWithReferenceScript :: forall i o. Address -> ScriptHash -> Maybe (TxOutDatum Datum) -> Value -> TxConstraints i o

-- | <i>Deprecated: Use mustPayToOtherScriptWithDatumHash instead</i>
mustPayToOtherScript :: forall i o. ValidatorHash -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToOtherScriptWithDatumHash vh d v</tt> is the same as
--   <a>mustPayToOtherScriptAddressWithDatumHash</a>, but without the
--   staking key hash.
mustPayToOtherScriptWithDatumHash :: forall i o. ValidatorHash -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToOtherScriptWithDatumInTx vh d v</tt> is the same as
--   <a>mustPayToOtherScriptAddressWithDatumHash</a>, but without the
--   staking key hash.
mustPayToOtherScriptWithDatumInTx :: forall i o. ValidatorHash -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToOtherScriptWithInlineDatum vh d v</tt> is the same as
--   <a>mustPayToOtherScriptAddressWithDatumHash</a>, but with an inline
--   datum and without the staking key hash.
mustPayToOtherScriptWithInlineDatum :: forall i o. ValidatorHash -> Datum -> Value -> TxConstraints i o

-- | <i>Deprecated: Use mustPayToOtherScriptAddressWithDatumHash
--   instead</i>
mustPayToOtherScriptAddress :: forall i o. ValidatorHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToOtherScriptAddressWithDatumHash vh svh d v</tt> locks the
--   value <tt>v</tt> with the given script hash <tt>vh</tt> alonside a
--   datum <tt>d</tt>.
--   
--   If used in <a>OffChain</a>, this constraint creates a script output
--   with <tt>vh</tt>, <tt>svh</tt>, <tt>d</tt> and <tt>v</tt> and adds
--   <tt>d</tt> in the transaction's datum witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the script transaction output
--   with <tt>vh</tt>, <tt>svh</tt>, <tt>d</tt> and <tt>v</tt> is part of
--   the transaction's outputs. For <tt>v</tt>, this means that the
--   transactions output must be at least the given value. The output can
--   contain more, or different tokens, but the requested value <tt>v</tt>
--   must be present.
mustPayToOtherScriptAddressWithDatumHash :: forall i o. ValidatorHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToOtherScriptAddressWithDatumInTx vh svh d v</tt> locks the
--   value <tt>v</tt> with the given script hash <tt>vh</tt> alonside a
--   datum <tt>d</tt>.
--   
--   If used in <a>OffChain</a>, this constraint creates a script output
--   with <tt>vh</tt>, <tt>svh</tt>, <tt>d</tt> and <tt>v</tt> and adds
--   <tt>d</tt> in the transaction's datum witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the script transaction output
--   with <tt>vh</tt>, <tt>svh</tt>, <tt>d</tt> and <tt>v</tt> is part of
--   the transaction's outputs. For <tt>v</tt>, this means that the
--   transactions output must be at least the given value. The output can
--   contain more, or different tokens, but the requested value <tt>v</tt>
--   must be present.
mustPayToOtherScriptAddressWithDatumInTx :: forall i o. ValidatorHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToOtherScriptAddressInlineDatum vh d v</tt> is the same as
--   <a>mustPayToOtherScriptAddressWithDatumHash</a>, but with an inline
--   datum.
mustPayToOtherScriptAddressWithInlineDatum :: forall i o. ValidatorHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToAddress addr v</tt> locks the value <tt>v</tt> at the
--   given address <tt>addr</tt>.
--   
--   If used in <a>OffChain</a>, this constraint creates a script output
--   with <tt>addr</tt> and <tt>v</tt>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the script
--   transaction output with <tt>addr</tt> and <tt>v</tt> is part of the
--   transaction's outputs.
mustPayToAddress :: forall i o. Address -> Value -> TxConstraints i o

-- | <i>Deprecated: Use mustPayToAddressWithDatumHash instead</i>
mustPayToAddressWithDatum :: forall i o. Address -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToAddress addr d v</tt> locks the value <tt>v</tt> at the
--   given address <tt>addr</tt> alonside a datum <tt>d</tt>.
--   
--   If used in <a>OffChain</a>, this constraint creates a script output
--   with <tt>addr</tt>, <tt>d</tt> and <tt>v</tt> and adds <tt>d</tt> in
--   the transaction's datum witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the script transaction output
--   with <tt>addr</tt>, <tt>d</tt> and <tt>v</tt> is part of the
--   transaction's outputs.
mustPayToAddressWithDatumHash :: forall i o. Address -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToAddressWithDatumInTx addr d v</tt> locks the value
--   <tt>v</tt> at the given address <tt>addr</tt> alonside a datum
--   <tt>d</tt>.
--   
--   If used in <a>OffChain</a>, this constraint creates a script output
--   with <tt>addr</tt>, <tt>d</tt> and <tt>v</tt> and adds <tt>d</tt> in
--   the transaction's datum witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the script transaction output
--   with <tt>addr</tt>, <tt>d</tt> and <tt>v</tt> as part of the
--   transaction's outputs.
mustPayToAddressWithDatumInTx :: forall i o. Address -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToAddressWithInlineDatum vh d v</tt> is the same as
--   <a>mustPayToAddress</a>, but with an inline datum.
mustPayToAddressWithInlineDatum :: forall i o. Address -> Datum -> Value -> TxConstraints i o

-- | Same as <a>mustMintValueWithRedeemer</a>, but sets the redeemer to the
--   unit redeemer.
mustMintValue :: forall i o. Value -> TxConstraints i o

-- | Same as <a>mustMintValueWithRedeemerAndReference</a>, but sets the
--   redeemer to the unit redeemer.
mustMintValueWithReference :: forall i o. TxOutRef -> Value -> TxConstraints i o

-- | Same as <a>mustMintValueWithRedeemerAndReference</a>, but sets the
--   reference to <a>Nothing</a>.
mustMintValueWithRedeemer :: forall i o. Redeemer -> Value -> TxConstraints i o

-- | Same as <a>mustMintCurrencyWithRedeemerAndReference</a>, but uses the
--   minting policy hash, token name and amount provided by <a>Value</a>.
--   
--   Note that we can derive the <a>MintingPolicyHash</a> from the
--   <a>Value</a>'s currency symbol.
mustMintValueWithRedeemerAndReference :: forall i o. Redeemer -> Maybe TxOutRef -> Value -> TxConstraints i o

-- | Same as <a>mustMintCurrencyWithRedeemer</a>, but sets the redeemer to
--   the unit redeemer.
mustMintCurrency :: forall i o. MintingPolicyHash -> TokenName -> Integer -> TxConstraints i o

-- | Same as <a>mustMintCurrencyWithRedeemerAndReference</a>, but sets the
--   redeemer to the unit redeemer.
mustMintCurrencyWithReference :: forall i o. TxOutRef -> MintingPolicyHash -> TokenName -> Integer -> TxConstraints i o

-- | Same as <a>mustMintCurrencyWithRedeemerAndReference</a>, but sets the
--   reference to <a>Nothing</a>.
mustMintCurrencyWithRedeemer :: forall i o. MintingPolicyHash -> Redeemer -> TokenName -> Integer -> TxConstraints i o

-- | <tt>mustMintCurrencyWithRedeemerAndReference mref mph r tn a</tt>
--   creates the given amount <tt>a</tt> of the currency specified with
--   <tt>mph</tt>, <tt>r</tt> and <tt>tn</tt>. The minting policy script
--   can be specified with a reference script <tt>mref</tt>.
--   
--   If used in <a>OffChain</a>, this constraint mints a currency using
--   <tt>mref</tt>, <tt>mph</tt>, <tt>r</tt>, <tt>tn</tt> and <tt>a</tt>,
--   adds <tt>mph</tt> in the transaction's minting policy witness set and
--   adds <tt>r</tt> in the transaction's redeemer witness set. The minting
--   policy must be provided in the <a>ScriptLookups</a> with
--   <a>typedValidatorLookups</a> or <a>plutusV1MintingPolicy</a>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the minted
--   currenty <tt>mref</tt>, <tt>mph</tt>, <tt>tn</tt> and <tt>a</tt> is
--   part of the transaction's minting information.
mustMintCurrencyWithRedeemerAndReference :: forall i o. Maybe TxOutRef -> MintingPolicyHash -> Redeemer -> TokenName -> Integer -> TxConstraints i o

-- | <tt>mustSpendAtLeast v</tt> requires the sum of the transaction's
--   inputs value to be at least <tt>v</tt>.
--   
--   If used in <a>OffChain</a>, this constraint checks if at least the
--   given value is spent in the transaction. When the transaction is
--   created, a <a>DeclaredInputMismatch</a> error is raised if it is not
--   the case.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the sum of
--   the transaction's inputs value to be at least <tt>v</tt>.
mustSpendAtLeast :: forall i o. Value -> TxConstraints i o

-- | <tt>mustProduceAtLeast v</tt> requires the sum of the transaction's
--   outputs value to be at least <tt>v</tt>.
--   
--   If used in <a>OffChain</a>, this constraint checks if at least the
--   given value is produced in the transaction. When the transaction is
--   created, a <a>DeclaredOutputMismatch</a> error is raised if it is not
--   the case.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the sum of
--   the transaction's outputs value to be at least <tt>v</tt>.
mustProduceAtLeast :: forall i o. Value -> TxConstraints i o

-- | <tt>mustSpendPubKeyOutput utxo</tt> must spend the given unspent
--   transaction public key output.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>utxo</tt> as an
--   input to the transaction. Information about this <tt>utxo</tt> must be
--   provided in the <a>ScriptLookups</a> with <a>unspentOutputs</a>.
--   
--   If several calls to <a>mustSpendPubKeyOutput</a> are performed for the
--   same <a>TxOutRef</a>, only one instance of the constraint is kept when
--   the transaction is created.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the
--   transaction spends this <tt>utxo</tt>.
mustSpendPubKeyOutput :: forall i o. TxOutRef -> TxConstraints i o

-- | <tt>mustSpendScriptOutput utxo red</tt> must spend the given unspent
--   transaction script output.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>utxo</tt> and
--   <tt>red</tt> as an input to the transaction. Information about this
--   <tt>utxo</tt> must be provided in the <a>ScriptLookups</a> with
--   <a>unspentOutputs</a>. The validator must be either provided by
--   <a>unspentOutputs</a> or through <a>otherScript</a> . The datum must
--   be either provided by <a>unspentOutputs</a> or through
--   <a>otherData</a>.
--   
--   If several calls to <a>mustSpendScriptOutput</a> are performed for the
--   same <a>TxOutRef</a>, if the two constraints have different redeemers,
--   an error will be thrown when the transaction is created. Otherwise,
--   only one instance of the constraint is kept. If combined with
--   <a>mustSpendScriptOutputWithReference</a> for the same
--   <a>TxOutRef</a>, see <a>mustSpendScriptOutputWithReference</a>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the
--   transaction spends this <tt>utxo</tt>.
mustSpendScriptOutput :: forall i o. TxOutRef -> Redeemer -> TxConstraints i o

-- | <tt>mustSpendScriptOutputWithReference utxo red refTxOutref</tt> must
--   spend the given unspent transaction script output, using a script
--   reference as witness.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>utxo</tt> and
--   <tt>red</tt> as an input to the transaction, and <tt>refTxOutref</tt>
--   as reference input. Information about <tt>utxo</tt> and
--   <tt>refTxOutref</tt> must be provided in the <a>ScriptLookups</a> with
--   <a>unspentOutputs</a>. The datum must be either provided by
--   <a>unspentOutputs</a> or through <a>otherData</a>.
--   
--   If several calls to <a>mustSpendScriptOutputWithReference</a> are
--   performed for the same <a>TxOutRef</a>, if the two constraints have
--   different redeemers, or if the two constraints use a different
--   <a>TxOutRef</a> as a TxOutRef, an error will be thrown when the
--   transaction is created. Otherwise, only one instance of the constraint
--   is kept.
--   
--   If combined with <a>mustSpendScriptOutput</a> for the same
--   <a>TxOutRef</a>, an error is throw if they have a different redeemer.
--   Otherwise, only one instance of the
--   <a>mustSpendScriptOutputWithReference</a> constraint is kept, the
--   <a>mustSpendScriptOutput</a> constraints are ignored.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the
--   transaction spends this <tt>utxo</tt>.
mustSpendScriptOutputWithReference :: TxOutRef -> Redeemer -> TxOutRef -> TxConstraints i o

-- | <tt>mustSpendScriptOutputWithMatchingDatumAndValue validatorHash
--   datumPredicate valuePredicate redeemer</tt> must spend an output
--   locked by the given validator script hash, which includes a
--   <tt>Datum</tt> that matches the given datum predicate and a
--   <tt>Value</tt> that matches the given value predicate.
--   
--   If used in <a>OffChain</a>, this constraint checks that there's
--   exactly one output that matches the requirements, and then adds this
--   as an input to the transaction with the given redeemer.
--   
--   The outputs that will be considered need to be privided in the
--   <a>ScriptLookups</a> with <a>unspentOutputs</a>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that there's at
--   least one input that matches the requirements.
mustSpendScriptOutputWithMatchingDatumAndValue :: forall i o. ValidatorHash -> (Datum -> Bool) -> (Value -> Bool) -> Redeemer -> TxConstraints i o

-- | <tt>mustUseOutputAsCollateral utxo</tt> must use the given unspent
--   transaction output reference as collateral input.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>utxo</tt> as a
--   collateral input to the transaction.
--   
--   In <a>OnChain</a> this constraint has no effect, since no information
--   about collateral inputs is passed to the scripts.
mustUseOutputAsCollateral :: forall i o. TxOutRef -> TxConstraints i o

-- | <tt>mustReferenceOutput utxo</tt> must reference (not spend!) the
--   given unspent transaction output reference.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>utxo</tt> as a
--   reference input to the transaction.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the
--   transaction references this <tt>utxo</tt>.
mustReferenceOutput :: forall i o. TxOutRef -> TxConstraints i o
mustSatisfyAnyOf :: forall i o. [TxConstraints i o] -> TxConstraints i o

-- | Are the constraints satisfiable?
isSatisfiable :: forall i o. TxConstraints i o -> Bool
pubKeyPayments :: forall i o. TxConstraints i o -> [(PaymentPubKeyHash, Value)]

-- | The minimum <a>Value</a> that satisfies all <a>MustSpendAtLeast</a>
--   constraints
mustSpendAtLeastTotal :: forall i o. TxConstraints i o -> Value

-- | The minimum <a>Value</a> that satisfies all <a>MustProduceAtLeast</a>
--   constraints
mustProduceAtLeastTotal :: forall i o. TxConstraints i o -> Value
requiredSignatories :: forall i o. TxConstraints i o -> [PaymentPubKeyHash]
requiredMonetaryPolicies :: forall i o. TxConstraints i o -> [MintingPolicyHash]
requiredDatums :: forall i o. TxConstraints i o -> [Datum]

-- | Check whether every transaction that satisfies the constraints has to
--   modify the UTXO set.
modifiesUtxoSet :: forall i o. TxConstraints i o -> Bool

-- | A set of constraints for a transaction that collects PlutusV1 script
--   outputs from the address of the given validator script, using the same
--   redeemer script for all outputs.
collectFromPlutusV1Script :: Map Address (Map TxOutRef DecoratedTxOut) -> Validator -> Redeemer -> UntypedConstraints
collectFromPlutusV1ScriptFilter :: (TxOutRef -> DecoratedTxOut -> Bool) -> Map Address (Map TxOutRef DecoratedTxOut) -> Validator -> Redeemer -> UntypedConstraints

-- | Given the pay to script address of the <a>Validator</a>, collect from
--   it all the outputs that match a predicate, using the
--   <tt>RedeemerValue</tt>.
collectFromTheScriptFilter :: forall i o. (TxOutRef -> DecoratedTxOut -> Bool) -> Map TxOutRef DecoratedTxOut -> i -> TxConstraints i o

-- | A version of <tt>collectFromScript</tt> that selects all outputs at
--   the address
collectFromTheScript :: forall i o. Map TxOutRef DecoratedTxOut -> i -> TxConstraints i o

-- | A set of constraints for a transaction that collects PlutusV2 script
--   outputs from the address of the given validator script, using the same
--   redeemer script for all outputs.
collectFromPlutusV2Script :: Map Address (Map TxOutRef DecoratedTxOut) -> Validator -> Redeemer -> UntypedConstraints
collectFromPlutusV2ScriptFilter :: (TxOutRef -> DecoratedTxOut -> Bool) -> Map Address (Map TxOutRef DecoratedTxOut) -> Validator -> Redeemer -> UntypedConstraints
instance Data.Aeson.Types.FromJSON.FromJSON datum => Data.Aeson.Types.FromJSON.FromJSON (Ledger.Constraints.TxConstraints.TxOutDatum datum)
instance Data.Aeson.Types.ToJSON.ToJSON datum => Data.Aeson.Types.ToJSON.ToJSON (Ledger.Constraints.TxConstraints.TxOutDatum datum)
instance GHC.Base.Functor Ledger.Constraints.TxConstraints.TxOutDatum
instance GHC.Classes.Eq datum => GHC.Classes.Eq (Ledger.Constraints.TxConstraints.TxOutDatum datum)
instance GHC.Generics.Generic (Ledger.Constraints.TxConstraints.TxOutDatum datum)
instance GHC.Show.Show datum => GHC.Show.Show (Ledger.Constraints.TxConstraints.TxOutDatum datum)
instance Data.Aeson.Types.FromJSON.FromJSON Ledger.Constraints.TxConstraints.TxConstraint
instance Data.Aeson.Types.ToJSON.ToJSON Ledger.Constraints.TxConstraints.TxConstraint
instance GHC.Classes.Eq Ledger.Constraints.TxConstraints.TxConstraint
instance GHC.Generics.Generic Ledger.Constraints.TxConstraints.TxConstraint
instance GHC.Show.Show Ledger.Constraints.TxConstraints.TxConstraint
instance PlutusTx.Monoid.Monoid Ledger.Constraints.TxConstraints.TxConstraintFuns
instance PlutusTx.Semigroup.Semigroup Ledger.Constraints.TxConstraints.TxConstraintFuns
instance GHC.Generics.Generic Ledger.Constraints.TxConstraints.TxConstraintFuns
instance GHC.Show.Show Ledger.Constraints.TxConstraints.TxConstraintFuns
instance GHC.Base.Functor Ledger.Constraints.TxConstraints.ScriptInputConstraint
instance GHC.Generics.Generic (Ledger.Constraints.TxConstraints.ScriptInputConstraint a)
instance GHC.Show.Show a => GHC.Show.Show (Ledger.Constraints.TxConstraints.ScriptInputConstraint a)
instance GHC.Base.Functor Ledger.Constraints.TxConstraints.ScriptOutputConstraint
instance GHC.Generics.Generic (Ledger.Constraints.TxConstraints.ScriptOutputConstraint a)
instance GHC.Show.Show a => GHC.Show.Show (Ledger.Constraints.TxConstraints.ScriptOutputConstraint a)
instance GHC.Generics.Generic (Ledger.Constraints.TxConstraints.TxConstraints i o)
instance (GHC.Show.Show i, GHC.Show.Show o) => GHC.Show.Show (Ledger.Constraints.TxConstraints.TxConstraints i o)
instance Data.Aeson.Types.ToJSON.ToJSON a => Data.Aeson.Types.ToJSON.ToJSON (Ledger.Constraints.TxConstraints.ScriptInputConstraint a)
instance Data.Aeson.Types.FromJSON.FromJSON a => Data.Aeson.Types.FromJSON.FromJSON (Ledger.Constraints.TxConstraints.ScriptInputConstraint a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Ledger.Constraints.TxConstraints.ScriptInputConstraint a)
instance Data.Aeson.Types.ToJSON.ToJSON a => Data.Aeson.Types.ToJSON.ToJSON (Ledger.Constraints.TxConstraints.ScriptOutputConstraint a)
instance Data.Aeson.Types.FromJSON.FromJSON a => Data.Aeson.Types.FromJSON.FromJSON (Ledger.Constraints.TxConstraints.ScriptOutputConstraint a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Ledger.Constraints.TxConstraints.ScriptOutputConstraint a)
instance (Data.Aeson.Types.ToJSON.ToJSON i, Data.Aeson.Types.ToJSON.ToJSON o) => Data.Aeson.Types.ToJSON.ToJSON (Ledger.Constraints.TxConstraints.TxConstraints i o)
instance (Data.Aeson.Types.FromJSON.FromJSON i, Data.Aeson.Types.FromJSON.FromJSON o) => Data.Aeson.Types.FromJSON.FromJSON (Ledger.Constraints.TxConstraints.TxConstraints i o)
instance Data.Bifunctor.Bifunctor Ledger.Constraints.TxConstraints.TxConstraints
instance PlutusTx.Semigroup.Semigroup (Ledger.Constraints.TxConstraints.TxConstraints i o)
instance GHC.Base.Semigroup (Ledger.Constraints.TxConstraints.TxConstraints i o)
instance PlutusTx.Monoid.Monoid (Ledger.Constraints.TxConstraints.TxConstraints i o)
instance GHC.Base.Monoid (Ledger.Constraints.TxConstraints.TxConstraints i o)
instance Prettyprinter.Internal.Pretty a => Prettyprinter.Internal.Pretty (Ledger.Constraints.TxConstraints.ScriptOutputConstraint a)
instance Prettyprinter.Internal.Pretty a => Prettyprinter.Internal.Pretty (Ledger.Constraints.TxConstraints.ScriptInputConstraint a)
instance Data.Aeson.Types.ToJSON.ToJSON Ledger.Constraints.TxConstraints.TxConstraintFuns
instance Data.Aeson.Types.FromJSON.FromJSON Ledger.Constraints.TxConstraints.TxConstraintFuns
instance GHC.Show.Show Ledger.Constraints.TxConstraints.TxConstraintFun
instance Prettyprinter.Internal.Pretty Ledger.Constraints.TxConstraints.TxConstraintFun
instance Prettyprinter.Internal.Pretty Ledger.Constraints.TxConstraints.TxConstraint
instance PlutusTx.Eq.Eq d => PlutusTx.Eq.Eq (Ledger.Constraints.TxConstraints.TxOutDatum d)
instance PlutusTx.Functor.Functor Ledger.Constraints.TxConstraints.TxOutDatum
instance Prettyprinter.Internal.Pretty d => Prettyprinter.Internal.Pretty (Ledger.Constraints.TxConstraints.TxOutDatum d)

module Ledger.Constraints.OnChain.V2

-- | Does the <a>ScriptContext</a> satisfy the constraints?
checkScriptContext :: forall i o. (ToData i, ToData o) => TxConstraints i o -> ScriptContext -> Bool
checkOwnInputConstraint :: ToData i => ScriptContext -> ScriptInputConstraint i -> Bool
checkOwnOutputConstraint :: ToData o => ScriptContext -> ScriptOutputConstraint o -> Bool

module Ledger.Constraints.OnChain.V1

-- | Does the <a>ScriptContext</a> satisfy the constraints?
checkScriptContext :: forall i o. (ToData i, ToData o) => TxConstraints i o -> ScriptContext -> Bool
checkOwnInputConstraint :: ToData i => ScriptContext -> ScriptInputConstraint i -> Bool
checkOwnOutputConstraint :: ToData o => ScriptContext -> ScriptOutputConstraint o -> Bool

module Ledger.Constraints.OffChain
data ScriptLookups a
ScriptLookups :: Map TxOutRef DecoratedTxOut -> Map ScriptHash (Versioned Script) -> Map DatumHash Datum -> Set PaymentPubKeyHash -> Maybe (TypedValidator a) -> Maybe PaymentPubKeyHash -> Maybe StakingCredential -> ScriptLookups a

-- | Unspent outputs that the script may want to spend
[slTxOutputs] :: ScriptLookups a -> Map TxOutRef DecoratedTxOut

-- | Scripts other than "our script"
[slOtherScripts] :: ScriptLookups a -> Map ScriptHash (Versioned Script)

-- | Datums that we might need
[slOtherData] :: ScriptLookups a -> Map DatumHash Datum

-- | Public keys that we might need
[slPaymentPubKeyHashes] :: ScriptLookups a -> Set PaymentPubKeyHash

-- | The script instance with the typed validator hash &amp; actual
--   compiled program
[slTypedValidator] :: ScriptLookups a -> Maybe (TypedValidator a)

-- | The contract's payment public key hash, used for depositing tokens
--   etc.
[slOwnPaymentPubKeyHash] :: ScriptLookups a -> Maybe PaymentPubKeyHash

-- | The contract's staking credentials (optional)
[slOwnStakingCredential] :: ScriptLookups a -> Maybe StakingCredential

-- | A script lookups value with a script instance. For convenience this
--   also includes the minting policy script that forwards all checks to
--   the instance's validator.
--   
--   If called multiple times, only the first typed validator is kept:
--   
--   <pre>
--   typedValidatorLookups tv1 &lt;&gt; typedValidatorLookups tv2 &lt;&gt; ...
--       == typedValidatorLookups tv1
--   </pre>
typedValidatorLookups :: TypedValidator a -> ScriptLookups a
generalise :: ScriptLookups a -> ScriptLookups Any

-- | A script lookups value that uses the map of unspent outputs to resolve
--   input constraints.
unspentOutputs :: Map TxOutRef DecoratedTxOut -> ScriptLookups a

-- | A script lookups value with a versioned minting policy script.
mintingPolicy :: Versioned MintingPolicy -> ScriptLookups a

-- | A script lookups value with a PlutusV1 minting policy script.
plutusV1MintingPolicy :: MintingPolicy -> ScriptLookups a

-- | A script lookups value with a PlutusV2 minting policy script.
plutusV2MintingPolicy :: MintingPolicy -> ScriptLookups a

-- | A script lookups value with a versioned validator script.
otherScript :: Versioned Validator -> ScriptLookups a

-- | A script lookups value with a PlutusV1 validator script.
plutusV1OtherScript :: Validator -> ScriptLookups a

-- | A script lookups value with a PlutusV2 validator script.
plutusV2OtherScript :: Validator -> ScriptLookups a

-- | A script lookups value with a datum.
otherData :: Datum -> ScriptLookups a

-- | A script lookups value with a payment public key hash.
--   
--   If called multiple times, only the first payment public key hash is
--   kept:
--   
--   <pre>
--   ownPaymentPubKeyHash pkh1 &lt;&gt; ownPaymentPubKeyHash pkh2 &lt;&gt; ...
--       == ownPaymentPubKeyHash pkh1
--   </pre>

-- | <i>Deprecated: Shouldn't be meaningful due to change in
--   MustSpendAtLeast and MustProduceAtLeast offchain code</i>
ownPaymentPubKeyHash :: PaymentPubKeyHash -> ScriptLookups a

-- | A script lookups value with staking credentials.
--   
--   If called multiple times, only the first staking credential is kept:
--   
--   <pre>
--   ownStakingCredential skh1 &lt;&gt; ownStakingCredential skh2 &lt;&gt; ...
--       == ownStakingCredential skh1
--   </pre>

-- | <i>Deprecated: Shouldn't be meaningful due to change in
--   MustSpendAtLeast and MustProduceAtLeast offchain code</i>
ownStakingCredential :: StakingCredential -> ScriptLookups a

-- | A script lookups value with a payment public key
paymentPubKey :: PaymentPubKey -> ScriptLookups a

-- | A script lookups value with a payment public key
paymentPubKeyHash :: PaymentPubKeyHash -> ScriptLookups a

-- | Some typed <a>TxConstraints</a> and the <a>ScriptLookups</a> needed to
--   turn them into an <a>UnbalancedTx</a>.
data SomeLookupsAndConstraints
[SomeLookupsAndConstraints] :: forall a. (FromData (DatumType a), ToData (DatumType a), ToData (RedeemerType a)) => ScriptLookups a -> TxConstraints (RedeemerType a) (DatumType a) -> SomeLookupsAndConstraints

-- | An unbalanced transaction. It needs to be balanced and signed before
--   it can be submitted to the ledger. See note [Submitting transactions
--   from Plutus contracts] in <a>Wallet</a>.
data UnbalancedTx
UnbalancedEmulatorTx :: Tx -> Set PaymentPubKeyHash -> Map TxOutRef TxOut -> UnbalancedTx
[unBalancedEmulatorTx] :: UnbalancedTx -> Tx

-- | These are all the payment public keys that should be used to request
--   the signatories from the user's wallet. The signatories are what is
--   required to sign the transaction before submitting it to the
--   blockchain. Transaction validation will fail if the transaction is not
--   signed by the required wallet.
[unBalancedTxRequiredSignatories] :: UnbalancedTx -> Set PaymentPubKeyHash

-- | Utxo lookups that are used for adding inputs to the
--   <a>UnbalancedTx</a>. Simply refers to <a>slTxOutputs</a> of
--   <a>ScriptLookups</a>.
[unBalancedTxUtxoIndex] :: UnbalancedTx -> Map TxOutRef TxOut
UnbalancedCardanoTx :: CardanoBuildTx -> Map TxOutRef TxOut -> UnbalancedTx
[unBalancedCardanoBuildTx] :: UnbalancedTx -> CardanoBuildTx

-- | Utxo lookups that are used for adding inputs to the
--   <a>UnbalancedTx</a>. Simply refers to <a>slTxOutputs</a> of
--   <a>ScriptLookups</a>.
[unBalancedTxUtxoIndex] :: UnbalancedTx -> Map TxOutRef TxOut
unBalancedTxTx :: UnbalancedTx -> Either CardanoBuildTx Tx
cardanoTx :: Traversal' UnbalancedTx CardanoBuildTx
tx :: Traversal' UnbalancedTx Tx
requiredSignatories :: Traversal' UnbalancedTx (Set PaymentPubKeyHash)
utxoIndex :: Lens' UnbalancedTx (Map TxOutRef TxOut)
emptyUnbalancedTx :: UnbalancedTx

-- | Each transaction output should contain a minimum amount of Ada (this
--   is a restriction on the real Cardano network).
adjustUnbalancedTx :: PParams -> UnbalancedTx -> Either ToCardanoError ([Ada], UnbalancedTx)

-- | Adjust a single transaction output so it contains at least the minimum
--   amount of Ada and return the adjustment (if any) and the updated
--   TxOut.
adjustTxOut :: PParams (BabbageEra StandardCrypto) -> TxOut -> Either ToCardanoError ([Ada], TxOut)
data MkTxError
TypeCheckFailed :: ConnectionError -> MkTxError
ToCardanoError :: ToCardanoError -> MkTxError
TxOutRefNotFound :: TxOutRef -> MkTxError
TxOutRefWrongType :: TxOutRef -> MkTxError
TxOutRefNoReferenceScript :: TxOutRef -> MkTxError
DatumNotFound :: DatumHash -> MkTxError
DeclaredInputMismatch :: Value -> MkTxError
DeclaredOutputMismatch :: Value -> MkTxError
MintingPolicyNotFound :: MintingPolicyHash -> MkTxError
ScriptHashNotFound :: ScriptHash -> MkTxError
TypedValidatorMissing :: MkTxError
DatumWrongHash :: DatumHash -> Datum -> MkTxError
CannotSatisfyAny :: MkTxError
NoMatchingOutputFound :: ValidatorHash -> MkTxError
MultipleMatchingOutputsFound :: ValidatorHash -> MkTxError
AmbiguousRedeemer :: TxOutRef -> [Redeemer] -> MkTxError
AmbiguousReferenceScript :: TxOutRef -> [TxOutRef] -> MkTxError
_TypeCheckFailed :: AsMkTxError r_a1HY0 => Prism' r_a1HY0 ConnectionError
_ToCardanoError :: AsMkTxError r_a1HY0 => Prism' r_a1HY0 ToCardanoError
_TxOutRefNotFound :: AsMkTxError r_a1HY0 => Prism' r_a1HY0 TxOutRef
_TxOutRefWrongType :: AsMkTxError r_a1HY0 => Prism' r_a1HY0 TxOutRef
_TxOutRefNoReferenceScript :: AsMkTxError r_a1HY0 => Prism' r_a1HY0 TxOutRef
_DatumNotFound :: AsMkTxError r_a1HY0 => Prism' r_a1HY0 DatumHash
_DeclaredInputMismatch :: AsMkTxError r_a1HY0 => Prism' r_a1HY0 Value
_MintingPolicyNotFound :: AsMkTxError r_a1HY0 => Prism' r_a1HY0 MintingPolicyHash
_ScriptHashNotFound :: AsMkTxError r_a1HY0 => Prism' r_a1HY0 ScriptHash
_TypedValidatorMissing :: AsMkTxError r_a1HY0 => Prism' r_a1HY0 ()
_DatumWrongHash :: AsMkTxError r_a1HY0 => Prism' r_a1HY0 (DatumHash, Datum)
_CannotSatisfyAny :: AsMkTxError r_a1HY0 => Prism' r_a1HY0 ()
_NoMatchingOutputFound :: AsMkTxError r_a1HY0 => Prism' r_a1HY0 ValidatorHash
_MultipleMatchingOutputsFound :: AsMkTxError r_a1HY0 => Prism' r_a1HY0 ValidatorHash

-- | Turn a <a>TxConstraints</a> value into an unbalanced transaction that
--   satisfies the constraints. To use this in a contract, see
--   <a>submitTxConstraints</a> and related functions. Uses default
--   <a>Params</a> which is probably not what you want, use
--   <a>mkTxWithParams</a> instead.

-- | <i>Deprecated: Use mkTxWithParams instead</i>
mkTx :: (FromData (DatumType a), ToData (DatumType a), ToData (RedeemerType a)) => ScriptLookups a -> TxConstraints (RedeemerType a) (DatumType a) -> Either MkTxError UnbalancedTx

-- | Turn a <a>TxConstraints</a> value into an unbalanced transaction that
--   satisfies the constraints. To use this in a contract, see
--   <a>submitTxConstraints</a> and related functions.
mkTxWithParams :: (FromData (DatumType a), ToData (DatumType a), ToData (RedeemerType a)) => Params -> ScriptLookups a -> TxConstraints (RedeemerType a) (DatumType a) -> Either MkTxError UnbalancedTx

-- | Given a list of <a>SomeLookupsAndConstraints</a> describing the
--   constraints for several scripts, build a single transaction that runs
--   all the scripts.
mkSomeTx :: Params -> [SomeLookupsAndConstraints] -> Either MkTxError UnbalancedTx

-- | The balances we track for computing the missing <a>Value</a> (if any)
--   that needs to be added to the transaction. See note [Balance of value
--   spent].
data ValueSpentBalances
ValueSpentBalances :: Value -> Value -> ValueSpentBalances

-- | Required value spent by the transaction.
[vbsRequired] :: ValueSpentBalances -> Value

-- | Value provided by an input or output of the transaction.
[vbsProvided] :: ValueSpentBalances -> Value
provided :: Value -> ValueSpentBalances
required :: Value -> ValueSpentBalances
missingValueSpent :: ValueSpentBalances -> Value
data ConstraintProcessingState
ConstraintProcessingState :: UnbalancedTx -> ValueSpentBalances -> ValueSpentBalances -> Params -> ConstraintProcessingState

-- | The unbalanced transaction that we're building
[cpsUnbalancedTx] :: ConstraintProcessingState -> UnbalancedTx

-- | Balance of the values given and required for the transaction's inputs
[cpsValueSpentBalancesInputs] :: ConstraintProcessingState -> ValueSpentBalances

-- | Balance of the values produced and required for the transaction's
--   outputs
[cpsValueSpentBalancesOutputs] :: ConstraintProcessingState -> ValueSpentBalances
[cpsParams] :: ConstraintProcessingState -> Params
unbalancedTx :: Lens' ConstraintProcessingState UnbalancedTx
valueSpentInputs :: Lens' ConstraintProcessingState ValueSpentBalances
valueSpentOutputs :: Lens' ConstraintProcessingState ValueSpentBalances
paramsL :: Lens' ConstraintProcessingState Params
processConstraintFun :: (MonadReader (ScriptLookups a) m, MonadError MkTxError m, MonadState ConstraintProcessingState m) => TxConstraintFun -> m ()

-- | Add a typed input, checking the type of the output it spends. Return
--   the value of the spent output.
addOwnInput :: (MonadReader (ScriptLookups a) m, MonadError MkTxError m, MonadState ConstraintProcessingState m, FromData (DatumType a), ToData (DatumType a), ToData (RedeemerType a)) => ScriptInputConstraint (RedeemerType a) -> m ()

-- | Convert a <tt>ScriptOutputConstraint</tt> into a
--   <tt>TxConstraint</tt>.
addOwnOutput :: (MonadReader (ScriptLookups a) m, MonadError MkTxError m, ToData (DatumType a)) => ScriptOutputConstraint (DatumType a) -> m [TxConstraint]
updateUtxoIndex :: (MonadReader (ScriptLookups a) m, MonadState ConstraintProcessingState m, MonadError MkTxError m) => m ()
lookupTxOutRef :: (MonadReader (ScriptLookups a) m, MonadError MkTxError m) => TxOutRef -> m DecoratedTxOut
lookupMintingPolicy :: (MonadReader (ScriptLookups a) m, MonadError MkTxError m) => MintingPolicyHash -> m (Versioned MintingPolicy)
lookupScript :: (MonadReader (ScriptLookups a) m, MonadError MkTxError m) => ScriptHash -> m (Versioned Script)
lookupScriptAsReferenceScript :: (MonadReader (ScriptLookups a) m, MonadError MkTxError m) => Maybe ScriptHash -> m ReferenceScript
prepareConstraints :: (ToData (DatumType a), MonadReader (ScriptLookups a) m, MonadError MkTxError m) => [ScriptOutputConstraint (DatumType a)] -> [TxConstraint] -> m [TxConstraint]
resolveScriptTxOut :: (MonadReader (ScriptLookups a) m, MonadError MkTxError m) => DecoratedTxOut -> m (Maybe (Versioned Validator, DatumWithOrigin, Value))
resolveScriptTxOutValidator :: (MonadReader (ScriptLookups a) m, MonadError MkTxError m) => DecoratedTxOut -> m (Maybe (Versioned Validator))
resolveScriptTxOutDatumAndValue :: (MonadReader (ScriptLookups a) m, MonadError MkTxError m) => DecoratedTxOut -> m (Maybe (DatumWithOrigin, Value))
data DatumWithOrigin
DatumInTx :: Datum -> DatumWithOrigin
[getDatum] :: DatumWithOrigin -> Datum
DatumInline :: Datum -> DatumWithOrigin
[getDatum] :: DatumWithOrigin -> Datum
datumWitness :: DatumWithOrigin -> Maybe Datum
checkValueSpent :: (MonadReader (ScriptLookups a) m, MonadState ConstraintProcessingState m, MonadError MkTxError m) => m ()
instance Ledger.Constraints.OffChain.AsMkTxError Ledger.Constraints.OffChain.MkTxError
instance Prettyprinter.Internal.Pretty Ledger.Constraints.OffChain.MkTxError
instance Data.Aeson.Types.FromJSON.FromJSON Ledger.Constraints.OffChain.MkTxError
instance Data.Aeson.Types.ToJSON.ToJSON Ledger.Constraints.OffChain.MkTxError
instance GHC.Generics.Generic Ledger.Constraints.OffChain.MkTxError
instance GHC.Show.Show Ledger.Constraints.OffChain.MkTxError
instance GHC.Classes.Eq Ledger.Constraints.OffChain.MkTxError
instance GHC.Generics.Generic Ledger.Constraints.OffChain.ValueSpentBalances
instance GHC.Show.Show Ledger.Constraints.OffChain.ValueSpentBalances
instance GHC.Base.Semigroup Ledger.Constraints.OffChain.ValueSpentBalances
instance Prettyprinter.Internal.Pretty Ledger.Constraints.OffChain.UnbalancedTx
instance Data.Aeson.Types.FromJSON.FromJSON (Ledger.Constraints.OffChain.ScriptLookups a)
instance Data.Aeson.Types.ToJSON.ToJSON (Ledger.Constraints.OffChain.ScriptLookups a)
instance GHC.Generics.Generic (Ledger.Constraints.OffChain.ScriptLookups a)
instance GHC.Show.Show (Ledger.Constraints.OffChain.ScriptLookups a)
instance Data.OpenApi.Internal.Schema.ToSchema Ledger.Constraints.OffChain.UnbalancedTx
instance Data.Aeson.Types.ToJSON.ToJSON Ledger.Constraints.OffChain.UnbalancedTx
instance Data.Aeson.Types.FromJSON.FromJSON Ledger.Constraints.OffChain.UnbalancedTx
instance GHC.Show.Show Ledger.Constraints.OffChain.UnbalancedTx
instance GHC.Generics.Generic Ledger.Constraints.OffChain.UnbalancedTx
instance GHC.Classes.Eq Ledger.Constraints.OffChain.UnbalancedTx
instance GHC.Base.Semigroup (Ledger.Constraints.OffChain.ScriptLookups a)
instance GHC.Base.Monoid (Ledger.Constraints.OffChain.ScriptLookups a)


-- | Constraints for transactions
module Ledger.Constraints

-- | Restrictions placed on the allocation of funds to outputs of
--   transactions.
data TxConstraints i o
TxConstraints :: [TxConstraint] -> TxConstraintFuns -> [ScriptInputConstraint i] -> [ScriptOutputConstraint o] -> TxConstraints i o
[txConstraints] :: TxConstraints i o -> [TxConstraint]
[txConstraintFuns] :: TxConstraints i o -> TxConstraintFuns
[txOwnInputs] :: TxConstraints i o -> [ScriptInputConstraint i]
[txOwnOutputs] :: TxConstraints i o -> [ScriptOutputConstraint o]

-- | Constraints on transactions that want to spend script outputs
data TxConstraint

-- | The provided <a>DatumHash</a> and <a>Datum</a> must be included in the
--   transaction body. Like <a>MustIncludeDatumInTx</a>, but useful when
--   you already have a <a>DatumHash</a> and want to make sure that is is
--   the actual hash of the <a>Datum</a>.
MustIncludeDatumInTxWithHash :: DatumHash -> Datum -> TxConstraint

-- | Like <tt>MustHashDatum</tt>, but the hash of the <a>Datum</a> is
--   computed automatically.
MustIncludeDatumInTx :: Datum -> TxConstraint

-- | The transaction's validity range must be set with the given
--   <a>POSIXTimeRange</a>.
MustValidateInTimeRange :: !ValidityInterval POSIXTime -> TxConstraint

-- | The transaction must add the given <a>PaymentPubKeyHash</a> in its
--   signatories.
MustBeSignedBy :: PaymentPubKeyHash -> TxConstraint

-- | The sum of the transaction's input <a>Value</a>s must be at least as
--   much as the given <a>Value</a>.
MustSpendAtLeast :: Value -> TxConstraint

-- | The sum of the transaction's output <a>Value</a>s must be at least as
--   much as the given <a>Value</a>.
MustProduceAtLeast :: Value -> TxConstraint

-- | The transaction must spend the given unspent transaction public key
--   output.
MustSpendPubKeyOutput :: TxOutRef -> TxConstraint

-- | The transaction must spend the given unspent transaction script
--   output.
MustSpendScriptOutput :: TxOutRef -> Redeemer -> Maybe TxOutRef -> TxConstraint

-- | The transaction must include the utxo as collateral input.
MustUseOutputAsCollateral :: TxOutRef -> TxConstraint

-- | The transaction must reference (not spend) the given unspent
--   transaction output.
MustReferenceOutput :: TxOutRef -> TxConstraint

-- | The transaction must mint the given token and amount.
MustMintValue :: MintingPolicyHash -> Redeemer -> TokenName -> Integer -> Maybe TxOutRef -> TxConstraint

-- | The transaction must create a transaction output.
MustPayToAddress :: Address -> Maybe (TxOutDatum Datum) -> Maybe ScriptHash -> Value -> TxConstraint

-- | The transaction must satisfy constraints given as an alternative of
--   conjuctions (DNF), that is `check (MustSatisfyAnyOf xs) = any (all
--   check) xs`
MustSatisfyAnyOf :: [[TxConstraint]] -> TxConstraint

-- | Constraint which specifies that the transaction must spend a
--   transaction output from a target script.
data ScriptInputConstraint a
ScriptInputConstraint :: a -> TxOutRef -> Maybe TxOutRef -> ScriptInputConstraint a

-- | The typed <a>Redeemer</a> to be used with the target script
[icRedeemer] :: ScriptInputConstraint a -> a

-- | The UTXO to be spent by the target script
[icTxOutRef] :: ScriptInputConstraint a -> TxOutRef

-- | Optionally use a reference script as witness
[icReferenceTxOutRef] :: ScriptInputConstraint a -> Maybe TxOutRef
data ScriptOutputConstraint a
ScriptOutputConstraint :: TxOutDatum a -> Value -> Maybe ScriptHash -> ScriptOutputConstraint a

-- | Typed datum to be used with the target script
[ocDatum] :: ScriptOutputConstraint a -> TxOutDatum a
[ocValue] :: ScriptOutputConstraint a -> Value
[ocReferenceScriptHash] :: ScriptOutputConstraint a -> Maybe ScriptHash

-- | How tx outs datum are embedded in a a Tx
--   
--   We do not use <a>TxOutDatum</a> from cardano-node to provide easier to
--   handel type (we don't type witnesses) and to have a distinction at the
--   type leve between constraints that require a Datum and constraints
--   (like <tt>MustPayToOtherScript</tt>) with an optional datum (like
--   <tt>MustPayToPubKeyAddress</tt>).
data TxOutDatum datum

-- | A datum specified in a transaction output using only it's hash, i.e.
--   the datum is not inlined nor is it added in the transaction body.
TxOutDatumHash :: datum -> TxOutDatum datum

-- | A datum specified in a transaction output using it's hash, while also
--   adding the actual datum in the transaction body.
TxOutDatumInTx :: datum -> TxOutDatum datum

-- | A datum inlined in a transaction output. It is *not* added in the
--   transaction body.
TxOutDatumInline :: datum -> TxOutDatum datum

-- | <tt>mustPayToTheScriptWithDatumHash d v</tt> locks the value
--   <tt>v</tt> with a script alongside a datum <tt>d</tt> which is
--   included in the transaction body.
--   
--   If used in <a>OffChain</a>, this constraint creates a script output
--   with <tt>dt</tt> and <tt>vl</tt> and adds <tt>dt</tt> in the
--   transaction's datum witness set. The script address is derived from
--   the typed validator that is provided in the <a>ScriptLookups</a> with
--   <a>typedValidatorLookups</a>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the new script transaction
--   output with <tt>dt</tt> and <tt>vt</tt> is part of the transaction's
--   outputs.
mustPayToTheScriptWithDatumHash :: o -> Value -> TxConstraints i o
mustPayToTheScriptWithDatumInTx :: o -> Value -> TxConstraints i o
mustPayToTheScriptWithInlineDatum :: o -> Value -> TxConstraints i o

-- | <tt>mustPayToAddress addr v</tt> locks the value <tt>v</tt> at the
--   given address <tt>addr</tt>.
--   
--   If used in <a>OffChain</a>, this constraint creates a script output
--   with <tt>addr</tt> and <tt>v</tt>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the script
--   transaction output with <tt>addr</tt> and <tt>v</tt> is part of the
--   transaction's outputs.
mustPayToAddress :: forall i o. Address -> Value -> TxConstraints i o

-- | <tt>mustPayToAddress addr d v</tt> locks the value <tt>v</tt> at the
--   given address <tt>addr</tt> alonside a datum <tt>d</tt>.
--   
--   If used in <a>OffChain</a>, this constraint creates a script output
--   with <tt>addr</tt>, <tt>d</tt> and <tt>v</tt> and adds <tt>d</tt> in
--   the transaction's datum witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the script transaction output
--   with <tt>addr</tt>, <tt>d</tt> and <tt>v</tt> is part of the
--   transaction's outputs.
mustPayToAddressWithDatumHash :: forall i o. Address -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToAddressWithDatumInTx addr d v</tt> locks the value
--   <tt>v</tt> at the given address <tt>addr</tt> alonside a datum
--   <tt>d</tt>.
--   
--   If used in <a>OffChain</a>, this constraint creates a script output
--   with <tt>addr</tt>, <tt>d</tt> and <tt>v</tt> and adds <tt>d</tt> in
--   the transaction's datum witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the script transaction output
--   with <tt>addr</tt>, <tt>d</tt> and <tt>v</tt> as part of the
--   transaction's outputs.
mustPayToAddressWithDatumInTx :: forall i o. Address -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToAddressWithInlineDatum vh d v</tt> is the same as
--   <a>mustPayToAddress</a>, but with an inline datum.
mustPayToAddressWithInlineDatum :: forall i o. Address -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToAddressWithReferenceScript addr scriptHash d v</tt>
--   creates a transaction output with an reference script. This allows the
--   script to be used as a reference script.
--   
--   If used in <a>OffChain</a>, this constraint creates an output with
--   <tt>addr</tt>, <tt>scriptHash</tt>, <tt>d</tt> and <tt>v</tt> and
--   maybe adds <tt>d</tt> in the transaction's datum witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the transaction output with
--   <tt>addr</tt>, <tt>scriptHash</tt>, <tt>d</tt> and <tt>v</tt> is part
--   of the transaction's outputs.
mustPayToAddressWithReferenceScript :: forall i o. Address -> ScriptHash -> Maybe (TxOutDatum Datum) -> Value -> TxConstraints i o

-- | <tt>mustPayToAddressWithReferenceValidator</tt> is a helper that calls
--   <tt>mustPayToAddressWithReferenceScript</tt>.
mustPayToAddressWithReferenceValidator :: forall i o. Address -> ValidatorHash -> Maybe (TxOutDatum Datum) -> Value -> TxConstraints i o

-- | <tt>mustPayToAddressWithReferenceMintingPolicy</tt> is a helper that
--   calls <tt>mustPayToAddressWithReferenceScript</tt>.
mustPayToAddressWithReferenceMintingPolicy :: forall i o. Address -> MintingPolicyHash -> Maybe (TxOutDatum Datum) -> Value -> TxConstraints i o

-- | Same as <a>mustMintCurrencyWithRedeemer</a>, but sets the redeemer to
--   the unit redeemer.
mustMintCurrency :: forall i o. MintingPolicyHash -> TokenName -> Integer -> TxConstraints i o

-- | Same as <a>mustMintCurrencyWithRedeemerAndReference</a>, but sets the
--   reference to <a>Nothing</a>.
mustMintCurrencyWithRedeemer :: forall i o. MintingPolicyHash -> Redeemer -> TokenName -> Integer -> TxConstraints i o

-- | Same as <a>mustMintValueWithRedeemer</a>, but sets the redeemer to the
--   unit redeemer.
mustMintValue :: forall i o. Value -> TxConstraints i o

-- | Same as <a>mustMintValueWithRedeemerAndReference</a>, but sets the
--   reference to <a>Nothing</a>.
mustMintValueWithRedeemer :: forall i o. Redeemer -> Value -> TxConstraints i o

-- | <tt>mustSpendAtLeast v</tt> requires the sum of the transaction's
--   inputs value to be at least <tt>v</tt>.
--   
--   If used in <a>OffChain</a>, this constraint checks if at least the
--   given value is spent in the transaction. When the transaction is
--   created, a <a>DeclaredInputMismatch</a> error is raised if it is not
--   the case.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the sum of
--   the transaction's inputs value to be at least <tt>v</tt>.
mustSpendAtLeast :: forall i o. Value -> TxConstraints i o

-- | <tt>mustSpendPubKeyOutput utxo</tt> must spend the given unspent
--   transaction public key output.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>utxo</tt> as an
--   input to the transaction. Information about this <tt>utxo</tt> must be
--   provided in the <a>ScriptLookups</a> with <a>unspentOutputs</a>.
--   
--   If several calls to <a>mustSpendPubKeyOutput</a> are performed for the
--   same <a>TxOutRef</a>, only one instance of the constraint is kept when
--   the transaction is created.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the
--   transaction spends this <tt>utxo</tt>.
mustSpendPubKeyOutput :: forall i o. TxOutRef -> TxConstraints i o

-- | <tt>mustSpendOutputFromTheScript txOutRef red</tt> spends the
--   transaction output <tt>txOutRef</tt> with a script address using the
--   redeemer <tt>red</tt>.
--   
--   If used in <a>OffChain</a>, this constraint spends a script output
--   <tt>txOutRef</tt> with redeemer <tt>red</tt>. The script address is
--   derived from the typed validator that is provided in the
--   <a>ScriptLookups</a> with <a>typedValidatorLookups</a>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the spend
--   script transaction output with <tt>red</tt> is part of the
--   transaction's inputs.
mustSpendOutputFromTheScript :: TxOutRef -> i -> TxConstraints i o

-- | <tt>mustSpendScriptOutput utxo red</tt> must spend the given unspent
--   transaction script output.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>utxo</tt> and
--   <tt>red</tt> as an input to the transaction. Information about this
--   <tt>utxo</tt> must be provided in the <a>ScriptLookups</a> with
--   <a>unspentOutputs</a>. The validator must be either provided by
--   <a>unspentOutputs</a> or through <a>otherScript</a> . The datum must
--   be either provided by <a>unspentOutputs</a> or through
--   <a>otherData</a>.
--   
--   If several calls to <a>mustSpendScriptOutput</a> are performed for the
--   same <a>TxOutRef</a>, if the two constraints have different redeemers,
--   an error will be thrown when the transaction is created. Otherwise,
--   only one instance of the constraint is kept. If combined with
--   <a>mustSpendScriptOutputWithReference</a> for the same
--   <a>TxOutRef</a>, see <a>mustSpendScriptOutputWithReference</a>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the
--   transaction spends this <tt>utxo</tt>.
mustSpendScriptOutput :: forall i o. TxOutRef -> Redeemer -> TxConstraints i o

-- | <tt>mustSpendScriptOutputWithReference utxo red refTxOutref</tt> must
--   spend the given unspent transaction script output, using a script
--   reference as witness.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>utxo</tt> and
--   <tt>red</tt> as an input to the transaction, and <tt>refTxOutref</tt>
--   as reference input. Information about <tt>utxo</tt> and
--   <tt>refTxOutref</tt> must be provided in the <a>ScriptLookups</a> with
--   <a>unspentOutputs</a>. The datum must be either provided by
--   <a>unspentOutputs</a> or through <a>otherData</a>.
--   
--   If several calls to <a>mustSpendScriptOutputWithReference</a> are
--   performed for the same <a>TxOutRef</a>, if the two constraints have
--   different redeemers, or if the two constraints use a different
--   <a>TxOutRef</a> as a TxOutRef, an error will be thrown when the
--   transaction is created. Otherwise, only one instance of the constraint
--   is kept.
--   
--   If combined with <a>mustSpendScriptOutput</a> for the same
--   <a>TxOutRef</a>, an error is throw if they have a different redeemer.
--   Otherwise, only one instance of the
--   <a>mustSpendScriptOutputWithReference</a> constraint is kept, the
--   <a>mustSpendScriptOutput</a> constraints are ignored.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the
--   transaction spends this <tt>utxo</tt>.
mustSpendScriptOutputWithReference :: TxOutRef -> Redeemer -> TxOutRef -> TxConstraints i o

-- | <tt>mustSpendScriptOutputWithMatchingDatumAndValue validatorHash
--   datumPredicate valuePredicate redeemer</tt> must spend an output
--   locked by the given validator script hash, which includes a
--   <tt>Datum</tt> that matches the given datum predicate and a
--   <tt>Value</tt> that matches the given value predicate.
--   
--   If used in <a>OffChain</a>, this constraint checks that there's
--   exactly one output that matches the requirements, and then adds this
--   as an input to the transaction with the given redeemer.
--   
--   The outputs that will be considered need to be privided in the
--   <a>ScriptLookups</a> with <a>unspentOutputs</a>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that there's at
--   least one input that matches the requirements.
mustSpendScriptOutputWithMatchingDatumAndValue :: forall i o. ValidatorHash -> (Datum -> Bool) -> (Value -> Bool) -> Redeemer -> TxConstraints i o

-- | <tt>mustUseOutputAsCollateral utxo</tt> must use the given unspent
--   transaction output reference as collateral input.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>utxo</tt> as a
--   collateral input to the transaction.
--   
--   In <a>OnChain</a> this constraint has no effect, since no information
--   about collateral inputs is passed to the scripts.
mustUseOutputAsCollateral :: forall i o. TxOutRef -> TxConstraints i o

-- | <tt>mustReferenceOutput utxo</tt> must reference (not spend!) the
--   given unspent transaction output reference.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>utxo</tt> as a
--   reference input to the transaction.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the
--   transaction references this <tt>utxo</tt>.
mustReferenceOutput :: forall i o. TxOutRef -> TxConstraints i o

-- | <tt>mustValidateInTimeRange r</tt> requires the transaction's validity
--   time range to be contained in POSIXTime range <tt>r</tt>.
--   
--   If used in <a>OffChain</a>, this constraint sets the transaction's
--   validity time range to <tt>r</tt>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the time
--   range <tt>r</tt> is entirely contained in the transaction's validity
--   time range.
mustValidateInTimeRange :: forall i o. ValidityInterval POSIXTime -> TxConstraints i o

-- | <tt>mustValidateInSlotRange r</tt> requires the transaction's validity
--   slot range to be contained in Slot range <tt>r</tt>.
--   
--   If used in <a>OffChain</a>, this constraint sets the transaction's
--   validity slot range to <tt>r</tt>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the slot
--   range <tt>r</tt> is entirely contained in the transaction's validity
--   time range.
mustValidateInSlotRange :: forall i o. ValidityInterval Slot -> TxConstraints i o

-- | <tt>mustBeSignedBy pk</tt> requires the transaction to be signed by
--   the public key <tt>pk</tt>.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>pk</tt> in the
--   transaction's public key witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>pk</tt>
--   is part of the transaction's public key witness set.
mustBeSignedBy :: forall i o. PaymentPubKeyHash -> TxConstraints i o

-- | <tt>mustProduceAtLeast v</tt> requires the sum of the transaction's
--   outputs value to be at least <tt>v</tt>.
--   
--   If used in <a>OffChain</a>, this constraint checks if at least the
--   given value is produced in the transaction. When the transaction is
--   created, a <a>DeclaredOutputMismatch</a> error is raised if it is not
--   the case.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the sum of
--   the transaction's outputs value to be at least <tt>v</tt>.
mustProduceAtLeast :: forall i o. Value -> TxConstraints i o

-- | <tt>mustIncludeDatumInTxWithHash dh d</tt> requires the transaction
--   body to include the datum hash <tt>dh</tt> and actual datum
--   <tt>d</tt>.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>dh</tt> and
--   <tt>d</tt> in the transaction's body.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>dh</tt>
--   and <tt>d</tt> are part of the transaction's body.
mustIncludeDatumInTxWithHash :: DatumHash -> Datum -> TxConstraints i o

-- | <tt>mustIncludeDatumInTx d</tt> requires the transaction body to
--   include the datum <tt>d</tt>.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>d</tt> in the
--   transaction's body alongside it's hash (which is computed
--   automatically).
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the transaction's body.
mustIncludeDatumInTx :: forall i o. Datum -> TxConstraints i o
mustSatisfyAnyOf :: forall i o. [TxConstraints i o] -> TxConstraints i o

-- | <tt>mustPayToPubKey pkh v</tt> is the same as
--   <a>mustPayToPubKeyAddressWithDatumHash</a>, but without any staking
--   key hash and datum.
mustPayToPubKey :: forall i o. PaymentPubKeyHash -> Value -> TxConstraints i o

-- | <tt>mustPayToPubKeyAddress pkh skh v</tt> is the same as
--   <a>mustPayToPubKeyAddressWithDatumHash</a>, but without any datum.
mustPayToPubKeyAddress :: forall i o. PaymentPubKeyHash -> StakingCredential -> Value -> TxConstraints i o

-- | <tt>mustPayToPubKeyWithDatumHash pkh d v</tt> is the same as
--   <a>mustPayToPubKeyAddressWithDatumHash</a>, but without the staking
--   key hash.
mustPayToPubKeyWithDatumHash :: forall i o. PaymentPubKeyHash -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToPubKeyAddressWithDatumHash pkh skh d v</tt> locks a
--   transaction output with a public key address.
--   
--   If used in <a>OffChain</a>, this constraint creates a public key
--   output with <tt>pkh</tt>, <tt>skh</tt>, <tt>d</tt> and <tt>v</tt> and
--   maybe adds <tt>d</tt> in the transaction's datum witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the public key transaction
--   output with <tt>pkh</tt>, <tt>skh</tt>, <tt>d</tt> and <tt>v</tt> is
--   part of the transaction's outputs.
mustPayToPubKeyAddressWithDatumHash :: forall i o. PaymentPubKeyHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToPubKeyWithDatumInTx pkh d v</tt> is the same as
--   <a>mustPayToPubKeyAddressWithDatumHash</a>, but with an inline datum
--   and without the staking key hash.
mustPayToPubKeyWithDatumInTx :: forall i o. PaymentPubKeyHash -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToPubKeyAddressWithDatumInTx pkh d v</tt> is the same as
--   <a>mustPayToPubKeyAddressWithDatumHash</a>, but the datum is also
--   added in the transaction body.
mustPayToPubKeyAddressWithDatumInTx :: forall i o. PaymentPubKeyHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToPubKeyWithInlineDatum pkh d v</tt> is the same as
--   <a>mustPayToPubKeyAddressWithDatumHash</a>, but with an inline datum
--   and without the staking key hash.
mustPayToPubKeyWithInlineDatum :: forall i o. PaymentPubKeyHash -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayWithInlineInlineDatumToPubKeyAddress pkh d v</tt> is the
--   same as <a>mustPayToPubKeyAddressWithInlineDatum</a>, but the datum is
--   inline in the Tx.
mustPayToPubKeyAddressWithInlineDatum :: forall i o. PaymentPubKeyHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToOtherScriptWithDatumHash vh d v</tt> is the same as
--   <a>mustPayToOtherScriptAddressWithDatumHash</a>, but without the
--   staking key hash.
mustPayToOtherScriptWithDatumHash :: forall i o. ValidatorHash -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToOtherScriptWithDatumInTx vh d v</tt> is the same as
--   <a>mustPayToOtherScriptAddressWithDatumHash</a>, but without the
--   staking key hash.
mustPayToOtherScriptWithDatumInTx :: forall i o. ValidatorHash -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToOtherScriptWithInlineDatum vh d v</tt> is the same as
--   <a>mustPayToOtherScriptAddressWithDatumHash</a>, but with an inline
--   datum and without the staking key hash.
mustPayToOtherScriptWithInlineDatum :: forall i o. ValidatorHash -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToOtherScriptAddressWithDatumHash vh svh d v</tt> locks the
--   value <tt>v</tt> with the given script hash <tt>vh</tt> alonside a
--   datum <tt>d</tt>.
--   
--   If used in <a>OffChain</a>, this constraint creates a script output
--   with <tt>vh</tt>, <tt>svh</tt>, <tt>d</tt> and <tt>v</tt> and adds
--   <tt>d</tt> in the transaction's datum witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the script transaction output
--   with <tt>vh</tt>, <tt>svh</tt>, <tt>d</tt> and <tt>v</tt> is part of
--   the transaction's outputs. For <tt>v</tt>, this means that the
--   transactions output must be at least the given value. The output can
--   contain more, or different tokens, but the requested value <tt>v</tt>
--   must be present.
mustPayToOtherScriptAddressWithDatumHash :: forall i o. ValidatorHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToOtherScriptAddressWithDatumInTx vh svh d v</tt> locks the
--   value <tt>v</tt> with the given script hash <tt>vh</tt> alonside a
--   datum <tt>d</tt>.
--   
--   If used in <a>OffChain</a>, this constraint creates a script output
--   with <tt>vh</tt>, <tt>svh</tt>, <tt>d</tt> and <tt>v</tt> and adds
--   <tt>d</tt> in the transaction's datum witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the script transaction output
--   with <tt>vh</tt>, <tt>svh</tt>, <tt>d</tt> and <tt>v</tt> is part of
--   the transaction's outputs. For <tt>v</tt>, this means that the
--   transactions output must be at least the given value. The output can
--   contain more, or different tokens, but the requested value <tt>v</tt>
--   must be present.
mustPayToOtherScriptAddressWithDatumInTx :: forall i o. ValidatorHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToOtherScriptAddressInlineDatum vh d v</tt> is the same as
--   <a>mustPayToOtherScriptAddressWithDatumHash</a>, but with an inline
--   datum.
mustPayToOtherScriptAddressWithInlineDatum :: forall i o. ValidatorHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | A set of constraints for a transaction that collects PlutusV1 script
--   outputs from the address of the given validator script, using the same
--   redeemer script for all outputs.
collectFromPlutusV1Script :: Map Address (Map TxOutRef DecoratedTxOut) -> Validator -> Redeemer -> UntypedConstraints
collectFromPlutusV1ScriptFilter :: (TxOutRef -> DecoratedTxOut -> Bool) -> Map Address (Map TxOutRef DecoratedTxOut) -> Validator -> Redeemer -> UntypedConstraints

-- | Given the pay to script address of the <a>Validator</a>, collect from
--   it all the outputs that match a predicate, using the
--   <tt>RedeemerValue</tt>.
collectFromTheScriptFilter :: forall i o. (TxOutRef -> DecoratedTxOut -> Bool) -> Map TxOutRef DecoratedTxOut -> i -> TxConstraints i o

-- | A version of <tt>collectFromScript</tt> that selects all outputs at
--   the address
collectFromTheScript :: forall i o. Map TxOutRef DecoratedTxOut -> i -> TxConstraints i o

-- | A set of constraints for a transaction that collects PlutusV2 script
--   outputs from the address of the given validator script, using the same
--   redeemer script for all outputs.
collectFromPlutusV2Script :: Map Address (Map TxOutRef DecoratedTxOut) -> Validator -> Redeemer -> UntypedConstraints
collectFromPlutusV2ScriptFilter :: (TxOutRef -> DecoratedTxOut -> Bool) -> Map Address (Map TxOutRef DecoratedTxOut) -> Validator -> Redeemer -> UntypedConstraints

-- | Check whether every transaction that satisfies the constraints has to
--   modify the UTXO set.
modifiesUtxoSet :: forall i o. TxConstraints i o -> Bool

-- | Are the constraints satisfiable?
isSatisfiable :: forall i o. TxConstraints i o -> Bool

-- | An unbalanced transaction. It needs to be balanced and signed before
--   it can be submitted to the ledger. See note [Submitting transactions
--   from Plutus contracts] in <a>Wallet</a>.
data UnbalancedTx
UnbalancedEmulatorTx :: Tx -> Set PaymentPubKeyHash -> Map TxOutRef TxOut -> UnbalancedTx
[unBalancedEmulatorTx] :: UnbalancedTx -> Tx

-- | These are all the payment public keys that should be used to request
--   the signatories from the user's wallet. The signatories are what is
--   required to sign the transaction before submitting it to the
--   blockchain. Transaction validation will fail if the transaction is not
--   signed by the required wallet.
[unBalancedTxRequiredSignatories] :: UnbalancedTx -> Set PaymentPubKeyHash

-- | Utxo lookups that are used for adding inputs to the
--   <a>UnbalancedTx</a>. Simply refers to <a>slTxOutputs</a> of
--   <a>ScriptLookups</a>.
[unBalancedTxUtxoIndex] :: UnbalancedTx -> Map TxOutRef TxOut
UnbalancedCardanoTx :: CardanoBuildTx -> Map TxOutRef TxOut -> UnbalancedTx
[unBalancedCardanoBuildTx] :: UnbalancedTx -> CardanoBuildTx

-- | Utxo lookups that are used for adding inputs to the
--   <a>UnbalancedTx</a>. Simply refers to <a>slTxOutputs</a> of
--   <a>ScriptLookups</a>.
[unBalancedTxUtxoIndex] :: UnbalancedTx -> Map TxOutRef TxOut
data MkTxError
TypeCheckFailed :: ConnectionError -> MkTxError
ToCardanoError :: ToCardanoError -> MkTxError
TxOutRefNotFound :: TxOutRef -> MkTxError
TxOutRefWrongType :: TxOutRef -> MkTxError
TxOutRefNoReferenceScript :: TxOutRef -> MkTxError
DatumNotFound :: DatumHash -> MkTxError
DeclaredInputMismatch :: Value -> MkTxError
DeclaredOutputMismatch :: Value -> MkTxError
MintingPolicyNotFound :: MintingPolicyHash -> MkTxError
ScriptHashNotFound :: ScriptHash -> MkTxError
TypedValidatorMissing :: MkTxError
DatumWrongHash :: DatumHash -> Datum -> MkTxError
CannotSatisfyAny :: MkTxError
NoMatchingOutputFound :: ValidatorHash -> MkTxError
MultipleMatchingOutputsFound :: ValidatorHash -> MkTxError
AmbiguousRedeemer :: TxOutRef -> [Redeemer] -> MkTxError
AmbiguousReferenceScript :: TxOutRef -> [TxOutRef] -> MkTxError

-- | Turn a <a>TxConstraints</a> value into an unbalanced transaction that
--   satisfies the constraints. To use this in a contract, see
--   <a>submitTxConstraints</a> and related functions. Uses default
--   <a>Params</a> which is probably not what you want, use
--   <a>mkTxWithParams</a> instead.

-- | <i>Deprecated: Use mkTxWithParams instead</i>
mkTx :: (FromData (DatumType a), ToData (DatumType a), ToData (RedeemerType a)) => ScriptLookups a -> TxConstraints (RedeemerType a) (DatumType a) -> Either MkTxError UnbalancedTx

-- | Turn a <a>TxConstraints</a> value into an unbalanced transaction that
--   satisfies the constraints. To use this in a contract, see
--   <a>submitTxConstraints</a> and related functions.
mkTxWithParams :: (FromData (DatumType a), ToData (DatumType a), ToData (RedeemerType a)) => Params -> ScriptLookups a -> TxConstraints (RedeemerType a) (DatumType a) -> Either MkTxError UnbalancedTx

-- | Each transaction output should contain a minimum amount of Ada (this
--   is a restriction on the real Cardano network).
adjustUnbalancedTx :: PParams -> UnbalancedTx -> Either ToCardanoError ([Ada], UnbalancedTx)

-- | Some typed <a>TxConstraints</a> and the <a>ScriptLookups</a> needed to
--   turn them into an <a>UnbalancedTx</a>.
data SomeLookupsAndConstraints
[SomeLookupsAndConstraints] :: forall a. (FromData (DatumType a), ToData (DatumType a), ToData (RedeemerType a)) => ScriptLookups a -> TxConstraints (RedeemerType a) (DatumType a) -> SomeLookupsAndConstraints

-- | Given a list of <a>SomeLookupsAndConstraints</a> describing the
--   constraints for several scripts, build a single transaction that runs
--   all the scripts.
mkSomeTx :: Params -> [SomeLookupsAndConstraints] -> Either MkTxError UnbalancedTx
data ScriptLookups a
ScriptLookups :: Map TxOutRef DecoratedTxOut -> Map ScriptHash (Versioned Script) -> Map DatumHash Datum -> Set PaymentPubKeyHash -> Maybe (TypedValidator a) -> Maybe PaymentPubKeyHash -> Maybe StakingCredential -> ScriptLookups a

-- | Unspent outputs that the script may want to spend
[slTxOutputs] :: ScriptLookups a -> Map TxOutRef DecoratedTxOut

-- | Scripts other than "our script"
[slOtherScripts] :: ScriptLookups a -> Map ScriptHash (Versioned Script)

-- | Datums that we might need
[slOtherData] :: ScriptLookups a -> Map DatumHash Datum

-- | Public keys that we might need
[slPaymentPubKeyHashes] :: ScriptLookups a -> Set PaymentPubKeyHash

-- | The script instance with the typed validator hash &amp; actual
--   compiled program
[slTypedValidator] :: ScriptLookups a -> Maybe (TypedValidator a)

-- | The contract's payment public key hash, used for depositing tokens
--   etc.
[slOwnPaymentPubKeyHash] :: ScriptLookups a -> Maybe PaymentPubKeyHash

-- | The contract's staking credentials (optional)
[slOwnStakingCredential] :: ScriptLookups a -> Maybe StakingCredential

-- | A script lookups value with a script instance. For convenience this
--   also includes the minting policy script that forwards all checks to
--   the instance's validator.
--   
--   If called multiple times, only the first typed validator is kept:
--   
--   <pre>
--   typedValidatorLookups tv1 &lt;&gt; typedValidatorLookups tv2 &lt;&gt; ...
--       == typedValidatorLookups tv1
--   </pre>
typedValidatorLookups :: TypedValidator a -> ScriptLookups a

-- | A script lookups value that uses the map of unspent outputs to resolve
--   input constraints.
unspentOutputs :: Map TxOutRef DecoratedTxOut -> ScriptLookups a

-- | A script lookups value with a versioned minting policy script.
mintingPolicy :: Versioned MintingPolicy -> ScriptLookups a

-- | A script lookups value with a PlutusV1 minting policy script.
plutusV1MintingPolicy :: MintingPolicy -> ScriptLookups a

-- | A script lookups value with a PlutusV2 minting policy script.
plutusV2MintingPolicy :: MintingPolicy -> ScriptLookups a

-- | A script lookups value with a versioned validator script.
otherScript :: Versioned Validator -> ScriptLookups a

-- | A script lookups value with a PlutusV1 validator script.
plutusV1OtherScript :: Validator -> ScriptLookups a

-- | A script lookups value with a PlutusV2 validator script.
plutusV2OtherScript :: Validator -> ScriptLookups a

-- | A script lookups value with a datum.
otherData :: Datum -> ScriptLookups a

-- | A script lookups value with a payment public key
paymentPubKey :: PaymentPubKey -> ScriptLookups a

-- | A script lookups value with a payment public key hash.
--   
--   If called multiple times, only the first payment public key hash is
--   kept:
--   
--   <pre>
--   ownPaymentPubKeyHash pkh1 &lt;&gt; ownPaymentPubKeyHash pkh2 &lt;&gt; ...
--       == ownPaymentPubKeyHash pkh1
--   </pre>

-- | <i>Deprecated: Shouldn't be meaningful due to change in
--   MustSpendAtLeast and MustProduceAtLeast offchain code</i>
ownPaymentPubKeyHash :: PaymentPubKeyHash -> ScriptLookups a

-- | A script lookups value with staking credentials.
--   
--   If called multiple times, only the first staking credential is kept:
--   
--   <pre>
--   ownStakingCredential skh1 &lt;&gt; ownStakingCredential skh2 &lt;&gt; ...
--       == ownStakingCredential skh1
--   </pre>

-- | <i>Deprecated: Shouldn't be meaningful due to change in
--   MustSpendAtLeast and MustProduceAtLeast offchain code</i>
ownStakingCredential :: StakingCredential -> ScriptLookups a

-- | <i>Deprecated: Use mustPayToTheScriptWithDatumHash instead</i>
mustPayToTheScript :: o -> Value -> TxConstraints i o

-- | <i>Deprecated: Use mustPayToAddressWithDatumHash instead</i>
mustPayToAddressWithDatum :: forall i o. Address -> Datum -> Value -> TxConstraints i o

-- | <i>Deprecated: Use mustPayToPubKeyWithDatumHash instead</i>
mustPayWithDatumToPubKey :: forall i o. PaymentPubKeyHash -> Datum -> Value -> TxConstraints i o

-- | <i>Deprecated: Use mustPayToPubKeyAddressWithDatumHash instead</i>
mustPayWithDatumToPubKeyAddress :: forall i o. PaymentPubKeyHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <i>Deprecated: Use mustPayToPubKeyWithDatumInTx instead</i>
mustPayWithDatumInTxToPubKey :: forall i o. PaymentPubKeyHash -> Datum -> Value -> TxConstraints i o

-- | <i>Deprecated: Use mustPayToPubKeyAddressWithDatumInTx instead</i>
mustPayWithDatumInTxToPubKeyAddress :: forall i o. PaymentPubKeyHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <i>Deprecated: Use mustPayToPubKeyWithInlineDatum instead</i>
mustPayWithInlineDatumToPubKey :: forall i o. PaymentPubKeyHash -> Datum -> Value -> TxConstraints i o

-- | <i>Deprecated: Use mustPayToPubKeyAddressWithInlineDatum instead</i>
mustPayWithInlineDatumToPubKeyAddress :: forall i o. PaymentPubKeyHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <i>Deprecated: Use mustPayToOtherScriptWithDatumHash instead</i>
mustPayToOtherScript :: forall i o. ValidatorHash -> Datum -> Value -> TxConstraints i o

-- | <i>Deprecated: Use mustPayToOtherScriptAddressWithDatumHash
--   instead</i>
mustPayToOtherScriptAddress :: forall i o. ValidatorHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustValidateIn r</tt> requires the transaction's validity time
--   range to be contained in POSIXTimeRange <tt>r</tt>.
--   
--   If used in <a>OffChain</a>, this constraint sets the transaction's
--   validity time range to <tt>r</tt>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the time
--   range <tt>r</tt> is entirely contained in the transaction's validity
--   time range.

-- | <i>Deprecated: Please use mustValidateInTimeRange or
--   mustValidateInSlotRange instead</i>
mustValidateIn :: forall i o. POSIXTimeRange -> TxConstraints i o

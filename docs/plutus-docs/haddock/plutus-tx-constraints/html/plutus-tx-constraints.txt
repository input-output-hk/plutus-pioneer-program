-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Plutus Transaction Constraints
--   
--   Plutus transaction constraints library
@package plutus-tx-constraints
@version 1.1.0.0

module Ledger.Tx.Constraints.OffChain
data ScriptLookups a
ScriptLookups :: Map TxOutRef DecoratedTxOut -> Map ScriptHash (Versioned Script) -> Map DatumHash Datum -> Set PaymentPubKeyHash -> Maybe (TypedValidator a) -> Maybe PaymentPubKeyHash -> Maybe StakingCredential -> ScriptLookups a

-- | Unspent outputs that the script may want to spend
[slTxOutputs] :: ScriptLookups a -> Map TxOutRef DecoratedTxOut

-- | Scripts other than "our script"
[slOtherScripts] :: ScriptLookups a -> Map ScriptHash (Versioned Script)

-- | Datums that we might need
[slOtherData] :: ScriptLookups a -> Map DatumHash Datum

-- | Public keys that we might need
[slPaymentPubKeyHashes] :: ScriptLookups a -> Set PaymentPubKeyHash

-- | The script instance with the typed validator hash &amp; actual
--   compiled program
[slTypedValidator] :: ScriptLookups a -> Maybe (TypedValidator a)

-- | The contract's payment public key hash, used for depositing tokens
--   etc.
[slOwnPaymentPubKeyHash] :: ScriptLookups a -> Maybe PaymentPubKeyHash

-- | The contract's staking credentials (optional)
[slOwnStakingCredential] :: ScriptLookups a -> Maybe StakingCredential

-- | A script lookups value with a script instance. For convenience this
--   also includes the minting policy script that forwards all checks to
--   the instance's validator.
--   
--   If called multiple times, only the first typed validator is kept:
--   
--   <pre>
--   typedValidatorLookups tv1 &lt;&gt; typedValidatorLookups tv2 &lt;&gt; ...
--       == typedValidatorLookups tv1
--   </pre>
typedValidatorLookups :: TypedValidator a -> ScriptLookups a
generalise :: ScriptLookups a -> ScriptLookups Any

-- | A script lookups value that uses the map of unspent outputs to resolve
--   input constraints.
unspentOutputs :: Map TxOutRef DecoratedTxOut -> ScriptLookups a

-- | A script lookups value with a versioned minting policy script.
mintingPolicy :: Versioned MintingPolicy -> ScriptLookups a

-- | A script lookups value with a PlutusV1 minting policy script.
plutusV1MintingPolicy :: MintingPolicy -> ScriptLookups a

-- | A script lookups value with a PlutusV2 minting policy script.
plutusV2MintingPolicy :: MintingPolicy -> ScriptLookups a

-- | A script lookups value with a versioned validator script.
otherScript :: Versioned Validator -> ScriptLookups a

-- | A script lookups value with a PlutusV1 validator script.
plutusV1OtherScript :: Validator -> ScriptLookups a

-- | A script lookups value with a PlutusV2 validator script.
plutusV2OtherScript :: Validator -> ScriptLookups a

-- | A script lookups value with a datum.
otherData :: Datum -> ScriptLookups a

-- | A script lookups value with a payment public key hash.
--   
--   If called multiple times, only the first payment public key hash is
--   kept:
--   
--   <pre>
--   ownPaymentPubKeyHash pkh1 &lt;&gt; ownPaymentPubKeyHash pkh2 &lt;&gt; ...
--       == ownPaymentPubKeyHash pkh1
--   </pre>
ownPaymentPubKeyHash :: PaymentPubKeyHash -> ScriptLookups a

-- | A script lookups value with staking credentials.
--   
--   If called multiple times, only the first staking credential is kept:
--   
--   <pre>
--   ownStakingCredential skh1 &lt;&gt; ownStakingCredential skh2 &lt;&gt; ...
--       == ownStakingCredential skh1
--   </pre>
ownStakingCredential :: StakingCredential -> ScriptLookups a

-- | A script lookups value with a payment public key
paymentPubKey :: PaymentPubKey -> ScriptLookups a

-- | A script lookups value with a payment public key
paymentPubKeyHash :: PaymentPubKeyHash -> ScriptLookups a

-- | Some typed <a>TxConstraints</a> and the <a>ScriptLookups</a> needed to
--   turn them into an <a>UnbalancedTx</a>.
data SomeLookupsAndConstraints
[SomeLookupsAndConstraints] :: forall a. (FromData (DatumType a), ToData (DatumType a), ToData (RedeemerType a)) => ScriptLookups a -> TxConstraints (RedeemerType a) (DatumType a) -> SomeLookupsAndConstraints

-- | An unbalanced transaction. It needs to be balanced and signed before
--   it can be submitted to the ledger. See note [Submitting transactions
--   from Plutus contracts] in <a>Wallet</a>.
data UnbalancedTx
UnbalancedEmulatorTx :: Tx -> Set PaymentPubKeyHash -> Map TxOutRef TxOut -> UnbalancedTx
[unBalancedEmulatorTx] :: UnbalancedTx -> Tx

-- | These are all the payment public keys that should be used to request
--   the signatories from the user's wallet. The signatories are what is
--   required to sign the transaction before submitting it to the
--   blockchain. Transaction validation will fail if the transaction is not
--   signed by the required wallet.
[unBalancedTxRequiredSignatories] :: UnbalancedTx -> Set PaymentPubKeyHash

-- | Utxo lookups that are used for adding inputs to the
--   <a>UnbalancedTx</a>. Simply refers to <a>slTxOutputs</a> of
--   <a>ScriptLookups</a>.
[unBalancedTxUtxoIndex] :: UnbalancedTx -> Map TxOutRef TxOut
UnbalancedCardanoTx :: CardanoBuildTx -> Map TxOutRef TxOut -> UnbalancedTx
[unBalancedCardanoBuildTx] :: UnbalancedTx -> CardanoBuildTx

-- | Utxo lookups that are used for adding inputs to the
--   <a>UnbalancedTx</a>. Simply refers to <a>slTxOutputs</a> of
--   <a>ScriptLookups</a>.
[unBalancedTxUtxoIndex] :: UnbalancedTx -> Map TxOutRef TxOut
unBalancedTxTx :: UnbalancedTx -> Either CardanoBuildTx Tx
tx :: Traversal' UnbalancedTx CardanoBuildTx
txValidityRange :: Lens' CardanoBuildTx (TxValidityLowerBound BabbageEra, TxValidityUpperBound BabbageEra)
txOuts :: Lens' CardanoBuildTx [TxOut CtxTx BabbageEra]
utxoIndex :: Lens' UnbalancedTx (Map TxOutRef TxOut)
emptyUnbalancedTx :: Params -> UnbalancedTx

-- | Each transaction output should contain a minimum amount of Ada (this
--   is a restriction on the real Cardano network).
adjustUnbalancedTx :: PParams -> UnbalancedTx -> Either ToCardanoError ([Ada], UnbalancedTx)
data MkTxError
ToCardanoError :: ToCardanoError -> MkTxError
LedgerMkTxError :: MkTxError -> MkTxError

-- | Turn a <a>TxConstraints</a> value into an unbalanced transaction that
--   satisfies the constraints. To use this in a contract, see
--   <a>submitTxConstraints</a> and related functions.
mkTx :: (FromData (DatumType a), ToData (DatumType a), ToData (RedeemerType a)) => Params -> ScriptLookups a -> TxConstraints (RedeemerType a) (DatumType a) -> Either MkTxError UnbalancedTx

-- | Given a list of <tt>SomeLookupsAndConstraints</tt> describing the
--   constraints for several scripts, build a single transaction that runs
--   all the scripts.
mkSomeTx :: Params -> [SomeLookupsAndConstraints] -> Either MkTxError UnbalancedTx
instance Data.Aeson.Types.FromJSON.FromJSON Ledger.Tx.Constraints.OffChain.MkTxError
instance Data.Aeson.Types.ToJSON.ToJSON Ledger.Tx.Constraints.OffChain.MkTxError
instance GHC.Generics.Generic Ledger.Tx.Constraints.OffChain.MkTxError
instance GHC.Show.Show Ledger.Tx.Constraints.OffChain.MkTxError
instance GHC.Classes.Eq Ledger.Tx.Constraints.OffChain.MkTxError
instance Prettyprinter.Internal.Pretty Ledger.Tx.Constraints.OffChain.MkTxError


-- | Constraints for transactions
module Ledger.Tx.Constraints

-- | Restrictions placed on the allocation of funds to outputs of
--   transactions.
data TxConstraints i o
TxConstraints :: [TxConstraint] -> TxConstraintFuns -> [ScriptInputConstraint i] -> [ScriptOutputConstraint o] -> TxConstraints i o
[txConstraints] :: TxConstraints i o -> [TxConstraint]
[txConstraintFuns] :: TxConstraints i o -> TxConstraintFuns
[txOwnInputs] :: TxConstraints i o -> [ScriptInputConstraint i]
[txOwnOutputs] :: TxConstraints i o -> [ScriptOutputConstraint o]

-- | Constraints on transactions that want to spend script outputs
data TxConstraint

-- | The provided <a>DatumHash</a> and <a>Datum</a> must be included in the
--   transaction body. Like <a>MustIncludeDatumInTx</a>, but useful when
--   you already have a <a>DatumHash</a> and want to make sure that is is
--   the actual hash of the <a>Datum</a>.
MustIncludeDatumInTxWithHash :: DatumHash -> Datum -> TxConstraint

-- | Like <tt>MustHashDatum</tt>, but the hash of the <a>Datum</a> is
--   computed automatically.
MustIncludeDatumInTx :: Datum -> TxConstraint

-- | The transaction's validity range must be set with the given
--   <a>POSIXTimeRange</a>.
MustValidateInTimeRange :: !ValidityInterval POSIXTime -> TxConstraint

-- | The transaction must add the given <a>PaymentPubKeyHash</a> in its
--   signatories.
MustBeSignedBy :: PaymentPubKeyHash -> TxConstraint

-- | The sum of the transaction's input <a>Value</a>s must be at least as
--   much as the given <a>Value</a>.
MustSpendAtLeast :: Value -> TxConstraint

-- | The sum of the transaction's output <a>Value</a>s must be at least as
--   much as the given <a>Value</a>.
MustProduceAtLeast :: Value -> TxConstraint

-- | The transaction must spend the given unspent transaction public key
--   output.
MustSpendPubKeyOutput :: TxOutRef -> TxConstraint

-- | The transaction must spend the given unspent transaction script
--   output.
MustSpendScriptOutput :: TxOutRef -> Redeemer -> Maybe TxOutRef -> TxConstraint

-- | The transaction must include the utxo as collateral input.
MustUseOutputAsCollateral :: TxOutRef -> TxConstraint

-- | The transaction must reference (not spend) the given unspent
--   transaction output.
MustReferenceOutput :: TxOutRef -> TxConstraint

-- | The transaction must mint the given token and amount.
MustMintValue :: MintingPolicyHash -> Redeemer -> TokenName -> Integer -> Maybe TxOutRef -> TxConstraint

-- | The transaction must create a transaction output.
MustPayToAddress :: Address -> Maybe (TxOutDatum Datum) -> Maybe ScriptHash -> Value -> TxConstraint

-- | The transaction must satisfy constraints given as an alternative of
--   conjuctions (DNF), that is `check (MustSatisfyAnyOf xs) = any (all
--   check) xs`
MustSatisfyAnyOf :: [[TxConstraint]] -> TxConstraint

-- | Constraint which specifies that the transaction must spend a
--   transaction output from a target script.
data ScriptInputConstraint a
ScriptInputConstraint :: a -> TxOutRef -> Maybe TxOutRef -> ScriptInputConstraint a

-- | The typed <a>Redeemer</a> to be used with the target script
[icRedeemer] :: ScriptInputConstraint a -> a

-- | The UTXO to be spent by the target script
[icTxOutRef] :: ScriptInputConstraint a -> TxOutRef

-- | Optionally use a reference script as witness
[icReferenceTxOutRef] :: ScriptInputConstraint a -> Maybe TxOutRef
data ScriptOutputConstraint a
ScriptOutputConstraint :: TxOutDatum a -> Value -> Maybe ScriptHash -> ScriptOutputConstraint a

-- | Typed datum to be used with the target script
[ocDatum] :: ScriptOutputConstraint a -> TxOutDatum a
[ocValue] :: ScriptOutputConstraint a -> Value
[ocReferenceScriptHash] :: ScriptOutputConstraint a -> Maybe ScriptHash

-- | <tt>mustPayToTheScriptWithDatumHash d v</tt> locks the value
--   <tt>v</tt> with a script alongside a datum <tt>d</tt> which is
--   included in the transaction body.
--   
--   If used in <a>OffChain</a>, this constraint creates a script output
--   with <tt>dt</tt> and <tt>vl</tt> and adds <tt>dt</tt> in the
--   transaction's datum witness set. The script address is derived from
--   the typed validator that is provided in the <a>ScriptLookups</a> with
--   <a>typedValidatorLookups</a>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the new script transaction
--   output with <tt>dt</tt> and <tt>vt</tt> is part of the transaction's
--   outputs.
mustPayToTheScriptWithDatumHash :: o -> Value -> TxConstraints i o
mustPayToTheScriptWithDatumInTx :: o -> Value -> TxConstraints i o
mustPayToTheScriptWithInlineDatum :: o -> Value -> TxConstraints i o

-- | <tt>mustPayToAddress addr v</tt> locks the value <tt>v</tt> at the
--   given address <tt>addr</tt>.
--   
--   If used in <a>OffChain</a>, this constraint creates a script output
--   with <tt>addr</tt> and <tt>v</tt>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the script
--   transaction output with <tt>addr</tt> and <tt>v</tt> is part of the
--   transaction's outputs.
mustPayToAddress :: Address -> Value -> TxConstraints i o

-- | <tt>mustPayToAddress addr d v</tt> locks the value <tt>v</tt> at the
--   given address <tt>addr</tt> alonside a datum <tt>d</tt>.
--   
--   If used in <a>OffChain</a>, this constraint creates a script output
--   with <tt>addr</tt>, <tt>d</tt> and <tt>v</tt> and adds <tt>d</tt> in
--   the transaction's datum witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the script transaction output
--   with <tt>addr</tt>, <tt>d</tt> and <tt>v</tt> is part of the
--   transaction's outputs.
mustPayToAddressWithDatumHash :: Address -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToAddressWithDatumInTx addr d v</tt> locks the value
--   <tt>v</tt> at the given address <tt>addr</tt> alonside a datum
--   <tt>d</tt>.
--   
--   If used in <a>OffChain</a>, this constraint creates a script output
--   with <tt>addr</tt>, <tt>d</tt> and <tt>v</tt> and adds <tt>d</tt> in
--   the transaction's datum witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the script transaction output
--   with <tt>addr</tt>, <tt>d</tt> and <tt>v</tt> as part of the
--   transaction's outputs.
mustPayToAddressWithDatumInTx :: Address -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToAddressWithInlineDatum vh d v</tt> is the same as
--   <a>mustPayToAddress</a>, but with an inline datum.
mustPayToAddressWithInlineDatum :: Address -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToAddressWithReferenceScript addr scriptHash d v</tt>
--   creates a transaction output with an reference script. This allows the
--   script to be used as a reference script.
--   
--   If used in <a>OffChain</a>, this constraint creates an output with
--   <tt>addr</tt>, <tt>scriptHash</tt>, <tt>d</tt> and <tt>v</tt> and
--   maybe adds <tt>d</tt> in the transaction's datum witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the transaction output with
--   <tt>addr</tt>, <tt>scriptHash</tt>, <tt>d</tt> and <tt>v</tt> is part
--   of the transaction's outputs.
mustPayToAddressWithReferenceScript :: Address -> ScriptHash -> Maybe (TxOutDatum Datum) -> Value -> TxConstraints i o

-- | <tt>mustPayToAddressWithReferenceValidator</tt> is a helper that calls
--   <tt>mustPayToAddressWithReferenceScript</tt>.
mustPayToAddressWithReferenceValidator :: Address -> ValidatorHash -> Maybe (TxOutDatum Datum) -> Value -> TxConstraints i o

-- | <tt>mustPayToAddressWithReferenceMintingPolicy</tt> is a helper that
--   calls <tt>mustPayToAddressWithReferenceScript</tt>.
mustPayToAddressWithReferenceMintingPolicy :: Address -> MintingPolicyHash -> Maybe (TxOutDatum Datum) -> Value -> TxConstraints i o

-- | Same as <a>mustMintCurrencyWithRedeemer</a>, but sets the redeemer to
--   the unit redeemer.
mustMintCurrency :: MintingPolicyHash -> TokenName -> Integer -> TxConstraints i o

-- | Same as <a>mustMintCurrencyWithRedeemerAndReference</a>, but sets the
--   reference to <a>Nothing</a>.
mustMintCurrencyWithRedeemer :: MintingPolicyHash -> Redeemer -> TokenName -> Integer -> TxConstraints i o

-- | Same as <a>mustMintValueWithRedeemer</a>, but sets the redeemer to the
--   unit redeemer.
mustMintValue :: Value -> TxConstraints i o

-- | Same as <a>mustMintValueWithRedeemerAndReference</a>, but sets the
--   reference to <a>Nothing</a>.
mustMintValueWithRedeemer :: Redeemer -> Value -> TxConstraints i o

-- | <tt>mustSpendAtLeast v</tt> requires the sum of the transaction's
--   inputs value to be at least <tt>v</tt>.
--   
--   If used in <a>OffChain</a>, this constraint checks if at least the
--   given value is spent in the transaction. When the transaction is
--   created, a <a>DeclaredInputMismatch</a> error is raised if it is not
--   the case.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the sum of
--   the transaction's inputs value to be at least <tt>v</tt>.
mustSpendAtLeast :: Value -> TxConstraints i o

-- | <tt>mustSpendPubKeyOutput utxo</tt> must spend the given unspent
--   transaction public key output.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>utxo</tt> as an
--   input to the transaction. Information about this <tt>utxo</tt> must be
--   provided in the <a>ScriptLookups</a> with <a>unspentOutputs</a>.
--   
--   If several calls to <a>mustSpendPubKeyOutput</a> are performed for the
--   same <a>TxOutRef</a>, only one instance of the constraint is kept when
--   the transaction is created.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the
--   transaction spends this <tt>utxo</tt>.
mustSpendPubKeyOutput :: TxOutRef -> TxConstraints i o

-- | <tt>mustSpendOutputFromTheScript txOutRef red</tt> spends the
--   transaction output <tt>txOutRef</tt> with a script address using the
--   redeemer <tt>red</tt>.
--   
--   If used in <a>OffChain</a>, this constraint spends a script output
--   <tt>txOutRef</tt> with redeemer <tt>red</tt>. The script address is
--   derived from the typed validator that is provided in the
--   <a>ScriptLookups</a> with <a>typedValidatorLookups</a>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the spend
--   script transaction output with <tt>red</tt> is part of the
--   transaction's inputs.
mustSpendOutputFromTheScript :: TxOutRef -> i -> TxConstraints i o

-- | <tt>mustSpendScriptOutput utxo red</tt> must spend the given unspent
--   transaction script output.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>utxo</tt> and
--   <tt>red</tt> as an input to the transaction. Information about this
--   <tt>utxo</tt> must be provided in the <a>ScriptLookups</a> with
--   <a>unspentOutputs</a>. The validator must be either provided by
--   <a>unspentOutputs</a> or through <a>otherScript</a> . The datum must
--   be either provided by <a>unspentOutputs</a> or through
--   <a>otherData</a>.
--   
--   If several calls to <a>mustSpendScriptOutput</a> are performed for the
--   same <a>TxOutRef</a>, if the two constraints have different redeemers,
--   an error will be thrown when the transaction is created. Otherwise,
--   only one instance of the constraint is kept. If combined with
--   <a>mustSpendScriptOutputWithReference</a> for the same
--   <a>TxOutRef</a>, see <a>mustSpendScriptOutputWithReference</a>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the
--   transaction spends this <tt>utxo</tt>.
mustSpendScriptOutput :: TxOutRef -> Redeemer -> TxConstraints i o

-- | <tt>mustSpendScriptOutputWithReference utxo red refTxOutref</tt> must
--   spend the given unspent transaction script output, using a script
--   reference as witness.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>utxo</tt> and
--   <tt>red</tt> as an input to the transaction, and <tt>refTxOutref</tt>
--   as reference input. Information about <tt>utxo</tt> and
--   <tt>refTxOutref</tt> must be provided in the <a>ScriptLookups</a> with
--   <a>unspentOutputs</a>. The datum must be either provided by
--   <a>unspentOutputs</a> or through <a>otherData</a>.
--   
--   If several calls to <a>mustSpendScriptOutputWithReference</a> are
--   performed for the same <a>TxOutRef</a>, if the two constraints have
--   different redeemers, or if the two constraints use a different
--   <a>TxOutRef</a> as a TxOutRef, an error will be thrown when the
--   transaction is created. Otherwise, only one instance of the constraint
--   is kept.
--   
--   If combined with <a>mustSpendScriptOutput</a> for the same
--   <a>TxOutRef</a>, an error is throw if they have a different redeemer.
--   Otherwise, only one instance of the
--   <a>mustSpendScriptOutputWithReference</a> constraint is kept, the
--   <a>mustSpendScriptOutput</a> constraints are ignored.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the
--   transaction spends this <tt>utxo</tt>.
mustSpendScriptOutputWithReference :: TxOutRef -> Redeemer -> TxOutRef -> TxConstraints i o

-- | <tt>mustSpendScriptOutputWithMatchingDatumAndValue validatorHash
--   datumPredicate valuePredicate redeemer</tt> must spend an output
--   locked by the given validator script hash, which includes a
--   <tt>Datum</tt> that matches the given datum predicate and a
--   <tt>Value</tt> that matches the given value predicate.
--   
--   If used in <a>OffChain</a>, this constraint checks that there's
--   exactly one output that matches the requirements, and then adds this
--   as an input to the transaction with the given redeemer.
--   
--   The outputs that will be considered need to be privided in the
--   <a>ScriptLookups</a> with <a>unspentOutputs</a>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that there's at
--   least one input that matches the requirements.
mustSpendScriptOutputWithMatchingDatumAndValue :: ValidatorHash -> (Datum -> Bool) -> (Value -> Bool) -> Redeemer -> TxConstraints i o

-- | <tt>mustUseOutputAsCollateral utxo</tt> must use the given unspent
--   transaction output reference as collateral input.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>utxo</tt> as a
--   collateral input to the transaction.
--   
--   In <a>OnChain</a> this constraint has no effect, since no information
--   about collateral inputs is passed to the scripts.
mustUseOutputAsCollateral :: TxOutRef -> TxConstraints i o

-- | <tt>mustReferenceOutput utxo</tt> must reference (not spend!) the
--   given unspent transaction output reference.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>utxo</tt> as a
--   reference input to the transaction.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the
--   transaction references this <tt>utxo</tt>.
mustReferenceOutput :: TxOutRef -> TxConstraints i o

-- | <tt>mustValidateInSlotRange r</tt> requires the transaction's validity
--   slot range to be contained in Slot range <tt>r</tt>.
--   
--   If used in <a>OffChain</a>, this constraint sets the transaction's
--   validity slot range to <tt>r</tt>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the slot
--   range <tt>r</tt> is entirely contained in the transaction's validity
--   time range.
mustValidateInSlotRange :: ValidityInterval Slot -> TxConstraints i o

-- | <tt>mustValidateInTimeRange r</tt> requires the transaction's validity
--   time range to be contained in POSIXTime range <tt>r</tt>.
--   
--   If used in <a>OffChain</a>, this constraint sets the transaction's
--   validity time range to <tt>r</tt>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the time
--   range <tt>r</tt> is entirely contained in the transaction's validity
--   time range.
mustValidateInTimeRange :: ValidityInterval POSIXTime -> TxConstraints i o

-- | <tt>mustBeSignedBy pk</tt> requires the transaction to be signed by
--   the public key <tt>pk</tt>.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>pk</tt> in the
--   transaction's public key witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>pk</tt>
--   is part of the transaction's public key witness set.
mustBeSignedBy :: PaymentPubKeyHash -> TxConstraints i o

-- | <tt>mustProduceAtLeast v</tt> requires the sum of the transaction's
--   outputs value to be at least <tt>v</tt>.
--   
--   If used in <a>OffChain</a>, this constraint checks if at least the
--   given value is produced in the transaction. When the transaction is
--   created, a <a>DeclaredOutputMismatch</a> error is raised if it is not
--   the case.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the sum of
--   the transaction's outputs value to be at least <tt>v</tt>.
mustProduceAtLeast :: Value -> TxConstraints i o

-- | <tt>mustIncludeDatumInTxWithHash dh d</tt> requires the transaction
--   body to include the datum hash <tt>dh</tt> and actual datum
--   <tt>d</tt>.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>dh</tt> and
--   <tt>d</tt> in the transaction's body.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>dh</tt>
--   and <tt>d</tt> are part of the transaction's body.
mustIncludeDatumInTxWithHash :: DatumHash -> Datum -> TxConstraints i o

-- | <tt>mustIncludeDatumInTx d</tt> requires the transaction body to
--   include the datum <tt>d</tt>.
--   
--   If used in <a>OffChain</a>, this constraint adds <tt>d</tt> in the
--   transaction's body alongside it's hash (which is computed
--   automatically).
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the transaction's body.
mustIncludeDatumInTx :: Datum -> TxConstraints i o
mustSatisfyAnyOf :: [TxConstraints i o] -> TxConstraints i o

-- | <tt>mustPayToPubKey pkh v</tt> is the same as
--   <a>mustPayToPubKeyAddressWithDatumHash</a>, but without any staking
--   key hash and datum.
mustPayToPubKey :: PaymentPubKeyHash -> Value -> TxConstraints i o

-- | <tt>mustPayToPubKeyAddress pkh skh v</tt> is the same as
--   <a>mustPayToPubKeyAddressWithDatumHash</a>, but without any datum.
mustPayToPubKeyAddress :: PaymentPubKeyHash -> StakingCredential -> Value -> TxConstraints i o

-- | <tt>mustPayToPubKeyWithDatumHash pkh d v</tt> is the same as
--   <a>mustPayToPubKeyAddressWithDatumHash</a>, but without the staking
--   key hash.
mustPayToPubKeyWithDatumHash :: PaymentPubKeyHash -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToPubKeyAddressWithDatumHash pkh skh d v</tt> locks a
--   transaction output with a public key address.
--   
--   If used in <a>OffChain</a>, this constraint creates a public key
--   output with <tt>pkh</tt>, <tt>skh</tt>, <tt>d</tt> and <tt>v</tt> and
--   maybe adds <tt>d</tt> in the transaction's datum witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the public key transaction
--   output with <tt>pkh</tt>, <tt>skh</tt>, <tt>d</tt> and <tt>v</tt> is
--   part of the transaction's outputs.
mustPayToPubKeyAddressWithDatumHash :: PaymentPubKeyHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToPubKeyWithDatumInTx pkh d v</tt> is the same as
--   <a>mustPayToPubKeyAddressWithDatumHash</a>, but with an inline datum
--   and without the staking key hash.
mustPayToPubKeyWithDatumInTx :: PaymentPubKeyHash -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToPubKeyAddressWithDatumInTx pkh d v</tt> is the same as
--   <a>mustPayToPubKeyAddressWithDatumHash</a>, but the datum is also
--   added in the transaction body.
mustPayToPubKeyAddressWithDatumInTx :: PaymentPubKeyHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToPubKeyWithInlineDatum pkh d v</tt> is the same as
--   <a>mustPayToPubKeyAddressWithDatumHash</a>, but with an inline datum
--   and without the staking key hash.
mustPayToPubKeyWithInlineDatum :: PaymentPubKeyHash -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayWithInlineInlineDatumToPubKeyAddress pkh d v</tt> is the
--   same as <a>mustPayToPubKeyAddressWithInlineDatum</a>, but the datum is
--   inline in the Tx.
mustPayToPubKeyAddressWithInlineDatum :: PaymentPubKeyHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToOtherScriptWithDatumHash vh d v</tt> is the same as
--   <a>mustPayToOtherScriptAddressWithDatumHash</a>, but without the
--   staking key hash.
mustPayToOtherScriptWithDatumHash :: ValidatorHash -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToOtherScriptWithDatumInTx vh d v</tt> is the same as
--   <a>mustPayToOtherScriptAddressWithDatumHash</a>, but without the
--   staking key hash.
mustPayToOtherScriptWithDatumInTx :: ValidatorHash -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToOtherScriptWithInlineDatum vh d v</tt> is the same as
--   <a>mustPayToOtherScriptAddressWithDatumHash</a>, but with an inline
--   datum and without the staking key hash.
mustPayToOtherScriptWithInlineDatum :: ValidatorHash -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToOtherScriptAddressWithDatumHash vh svh d v</tt> locks the
--   value <tt>v</tt> with the given script hash <tt>vh</tt> alonside a
--   datum <tt>d</tt>.
--   
--   If used in <a>OffChain</a>, this constraint creates a script output
--   with <tt>vh</tt>, <tt>svh</tt>, <tt>d</tt> and <tt>v</tt> and adds
--   <tt>d</tt> in the transaction's datum witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the script transaction output
--   with <tt>vh</tt>, <tt>svh</tt>, <tt>d</tt> and <tt>v</tt> is part of
--   the transaction's outputs. For <tt>v</tt>, this means that the
--   transactions output must be at least the given value. The output can
--   contain more, or different tokens, but the requested value <tt>v</tt>
--   must be present.
mustPayToOtherScriptAddressWithDatumHash :: ValidatorHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToOtherScriptAddressWithDatumInTx vh svh d v</tt> locks the
--   value <tt>v</tt> with the given script hash <tt>vh</tt> alonside a
--   datum <tt>d</tt>.
--   
--   If used in <a>OffChain</a>, this constraint creates a script output
--   with <tt>vh</tt>, <tt>svh</tt>, <tt>d</tt> and <tt>v</tt> and adds
--   <tt>d</tt> in the transaction's datum witness set.
--   
--   If used in <a>OnChain</a>, this constraint verifies that <tt>d</tt> is
--   part of the datum witness set and that the script transaction output
--   with <tt>vh</tt>, <tt>svh</tt>, <tt>d</tt> and <tt>v</tt> is part of
--   the transaction's outputs. For <tt>v</tt>, this means that the
--   transactions output must be at least the given value. The output can
--   contain more, or different tokens, but the requested value <tt>v</tt>
--   must be present.
mustPayToOtherScriptAddressWithDatumInTx :: ValidatorHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustPayToOtherScriptAddressInlineDatum vh d v</tt> is the same as
--   <a>mustPayToOtherScriptAddressWithDatumHash</a>, but with an inline
--   datum.
mustPayToOtherScriptAddressWithInlineDatum :: ValidatorHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | A set of constraints for a transaction that collects PlutusV1 script
--   outputs from the address of the given validator script, using the same
--   redeemer script for all outputs.
collectFromPlutusV1Script :: Map Address (Map TxOutRef DecoratedTxOut) -> Validator -> Redeemer -> UntypedConstraints
collectFromPlutusV1ScriptFilter :: (TxOutRef -> DecoratedTxOut -> Bool) -> Map Address (Map TxOutRef DecoratedTxOut) -> Validator -> Redeemer -> UntypedConstraints

-- | Given the pay to script address of the <a>Validator</a>, collect from
--   it all the outputs that match a predicate, using the
--   <tt>RedeemerValue</tt>.
collectFromTheScriptFilter :: (TxOutRef -> DecoratedTxOut -> Bool) -> Map TxOutRef DecoratedTxOut -> i -> TxConstraints i o

-- | A version of <tt>collectFromScript</tt> that selects all outputs at
--   the address
collectFromTheScript :: Map TxOutRef DecoratedTxOut -> i -> TxConstraints i o

-- | A set of constraints for a transaction that collects PlutusV2 script
--   outputs from the address of the given validator script, using the same
--   redeemer script for all outputs.
collectFromPlutusV2Script :: Map Address (Map TxOutRef DecoratedTxOut) -> Validator -> Redeemer -> UntypedConstraints
collectFromPlutusV2ScriptFilter :: (TxOutRef -> DecoratedTxOut -> Bool) -> Map Address (Map TxOutRef DecoratedTxOut) -> Validator -> Redeemer -> UntypedConstraints

-- | Check whether every transaction that satisfies the constraints has to
--   modify the UTXO set.
modifiesUtxoSet :: TxConstraints i o -> Bool

-- | Are the constraints satisfiable?
isSatisfiable :: TxConstraints i o -> Bool

-- | An unbalanced transaction. It needs to be balanced and signed before
--   it can be submitted to the ledger. See note [Submitting transactions
--   from Plutus contracts] in <a>Wallet</a>.
data UnbalancedTx
UnbalancedEmulatorTx :: Tx -> Set PaymentPubKeyHash -> Map TxOutRef TxOut -> UnbalancedTx
[unBalancedEmulatorTx] :: UnbalancedTx -> Tx

-- | These are all the payment public keys that should be used to request
--   the signatories from the user's wallet. The signatories are what is
--   required to sign the transaction before submitting it to the
--   blockchain. Transaction validation will fail if the transaction is not
--   signed by the required wallet.
[unBalancedTxRequiredSignatories] :: UnbalancedTx -> Set PaymentPubKeyHash

-- | Utxo lookups that are used for adding inputs to the
--   <a>UnbalancedTx</a>. Simply refers to <a>slTxOutputs</a> of
--   <a>ScriptLookups</a>.
[unBalancedTxUtxoIndex] :: UnbalancedTx -> Map TxOutRef TxOut
UnbalancedCardanoTx :: CardanoBuildTx -> Map TxOutRef TxOut -> UnbalancedTx
[unBalancedCardanoBuildTx] :: UnbalancedTx -> CardanoBuildTx

-- | Utxo lookups that are used for adding inputs to the
--   <a>UnbalancedTx</a>. Simply refers to <a>slTxOutputs</a> of
--   <a>ScriptLookups</a>.
[unBalancedTxUtxoIndex] :: UnbalancedTx -> Map TxOutRef TxOut
data MkTxError
ToCardanoError :: ToCardanoError -> MkTxError
LedgerMkTxError :: MkTxError -> MkTxError

-- | Turn a <a>TxConstraints</a> value into an unbalanced transaction that
--   satisfies the constraints. To use this in a contract, see
--   <a>submitTxConstraints</a> and related functions.
mkTx :: (FromData (DatumType a), ToData (DatumType a), ToData (RedeemerType a)) => Params -> ScriptLookups a -> TxConstraints (RedeemerType a) (DatumType a) -> Either MkTxError UnbalancedTx

-- | Each transaction output should contain a minimum amount of Ada (this
--   is a restriction on the real Cardano network).
adjustUnbalancedTx :: PParams -> UnbalancedTx -> Either ToCardanoError ([Ada], UnbalancedTx)

-- | Some typed <a>TxConstraints</a> and the <a>ScriptLookups</a> needed to
--   turn them into an <a>UnbalancedTx</a>.
data SomeLookupsAndConstraints
[SomeLookupsAndConstraints] :: forall a. (FromData (DatumType a), ToData (DatumType a), ToData (RedeemerType a)) => ScriptLookups a -> TxConstraints (RedeemerType a) (DatumType a) -> SomeLookupsAndConstraints

-- | Given a list of <tt>SomeLookupsAndConstraints</tt> describing the
--   constraints for several scripts, build a single transaction that runs
--   all the scripts.
mkSomeTx :: Params -> [SomeLookupsAndConstraints] -> Either MkTxError UnbalancedTx
data ScriptLookups a
ScriptLookups :: Map TxOutRef DecoratedTxOut -> Map ScriptHash (Versioned Script) -> Map DatumHash Datum -> Set PaymentPubKeyHash -> Maybe (TypedValidator a) -> Maybe PaymentPubKeyHash -> Maybe StakingCredential -> ScriptLookups a

-- | Unspent outputs that the script may want to spend
[slTxOutputs] :: ScriptLookups a -> Map TxOutRef DecoratedTxOut

-- | Scripts other than "our script"
[slOtherScripts] :: ScriptLookups a -> Map ScriptHash (Versioned Script)

-- | Datums that we might need
[slOtherData] :: ScriptLookups a -> Map DatumHash Datum

-- | Public keys that we might need
[slPaymentPubKeyHashes] :: ScriptLookups a -> Set PaymentPubKeyHash

-- | The script instance with the typed validator hash &amp; actual
--   compiled program
[slTypedValidator] :: ScriptLookups a -> Maybe (TypedValidator a)

-- | The contract's payment public key hash, used for depositing tokens
--   etc.
[slOwnPaymentPubKeyHash] :: ScriptLookups a -> Maybe PaymentPubKeyHash

-- | The contract's staking credentials (optional)
[slOwnStakingCredential] :: ScriptLookups a -> Maybe StakingCredential

-- | A script lookups value with a script instance. For convenience this
--   also includes the minting policy script that forwards all checks to
--   the instance's validator.
--   
--   If called multiple times, only the first typed validator is kept:
--   
--   <pre>
--   typedValidatorLookups tv1 &lt;&gt; typedValidatorLookups tv2 &lt;&gt; ...
--       == typedValidatorLookups tv1
--   </pre>
typedValidatorLookups :: TypedValidator a -> ScriptLookups a

-- | A script lookups value that uses the map of unspent outputs to resolve
--   input constraints.
unspentOutputs :: Map TxOutRef DecoratedTxOut -> ScriptLookups a

-- | A script lookups value with a versioned minting policy script.
mintingPolicy :: Versioned MintingPolicy -> ScriptLookups a

-- | A script lookups value with a PlutusV1 minting policy script.
plutusV1MintingPolicy :: MintingPolicy -> ScriptLookups a

-- | A script lookups value with a PlutusV2 minting policy script.
plutusV2MintingPolicy :: MintingPolicy -> ScriptLookups a

-- | A script lookups value with a versioned validator script.
otherScript :: Versioned Validator -> ScriptLookups a

-- | A script lookups value with a PlutusV1 validator script.
plutusV1OtherScript :: Validator -> ScriptLookups a

-- | A script lookups value with a PlutusV2 validator script.
plutusV2OtherScript :: Validator -> ScriptLookups a

-- | A script lookups value with a datum.
otherData :: Datum -> ScriptLookups a

-- | A script lookups value with a payment public key
paymentPubKey :: PaymentPubKey -> ScriptLookups a

-- | A script lookups value with a payment public key
paymentPubKeyHash :: PaymentPubKeyHash -> ScriptLookups a

-- | A script lookups value with a payment public key hash.
--   
--   If called multiple times, only the first payment public key hash is
--   kept:
--   
--   <pre>
--   ownPaymentPubKeyHash pkh1 &lt;&gt; ownPaymentPubKeyHash pkh2 &lt;&gt; ...
--       == ownPaymentPubKeyHash pkh1
--   </pre>
ownPaymentPubKeyHash :: PaymentPubKeyHash -> ScriptLookups a

-- | A script lookups value with staking credentials.
--   
--   If called multiple times, only the first staking credential is kept:
--   
--   <pre>
--   ownStakingCredential skh1 &lt;&gt; ownStakingCredential skh2 &lt;&gt; ...
--       == ownStakingCredential skh1
--   </pre>
ownStakingCredential :: StakingCredential -> ScriptLookups a
mustPayToTheScript :: o -> Value -> TxConstraints i o
mustPayToAddressWithDatum :: Address -> Datum -> Value -> TxConstraints i o
mustPayWithDatumToPubKey :: PaymentPubKeyHash -> Datum -> Value -> TxConstraints i o
mustPayWithDatumToPubKeyAddress :: PaymentPubKeyHash -> StakingCredential -> Datum -> Value -> TxConstraints i o
mustPayWithDatumInTxToPubKey :: PaymentPubKeyHash -> Datum -> Value -> TxConstraints i o
mustPayWithDatumInTxToPubKeyAddress :: PaymentPubKeyHash -> StakingCredential -> Datum -> Value -> TxConstraints i o
mustPayWithInlineDatumToPubKey :: PaymentPubKeyHash -> Datum -> Value -> TxConstraints i o
mustPayWithInlineDatumToPubKeyAddress :: PaymentPubKeyHash -> StakingCredential -> Datum -> Value -> TxConstraints i o
mustPayToOtherScript :: ValidatorHash -> Datum -> Value -> TxConstraints i o
mustPayToOtherScriptAddress :: ValidatorHash -> StakingCredential -> Datum -> Value -> TxConstraints i o

-- | <tt>mustValidateIn r</tt> requires the transaction's validity time
--   range to be contained in POSIXTimeRange <tt>r</tt>.
--   
--   If used in <a>OffChain</a>, this constraint sets the transaction's
--   validity time range to <tt>r</tt>.
--   
--   If used in <a>OnChain</a>, this constraint verifies that the time
--   range <tt>r</tt> is entirely contained in the transaction's validity
--   time range.
mustValidateIn :: POSIXTimeRange -> TxConstraints i o
